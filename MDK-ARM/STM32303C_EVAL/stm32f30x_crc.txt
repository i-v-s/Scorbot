; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32f30x_crc.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32f30x_crc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Libraries\STM32F30x_StdPeriph_Driver\src\stm32f30x_crc.c]
                          THUMB

                          AREA ||i.CRC_CalcBlockCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcBlockCRC PROC
;;;280      */
;;;281    uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
000000  b510              PUSH     {r4,lr}
;;;282    {
;;;283      uint32_t index = 0;
000002  2200              MOVS     r2,#0
;;;284      
;;;285      for(index = 0; index < BufferLength; index++)
;;;286      {
;;;287        CRC->DR = pBuffer[index];
000004  4b04              LDR      r3,|L1.24|
000006  e003              B        |L1.16|
                  |L1.8|
000008  f8504022          LDR      r4,[r0,r2,LSL #2]
00000c  601c              STR      r4,[r3,#0]
00000e  1c52              ADDS     r2,r2,#1
                  |L1.16|
000010  428a              CMP      r2,r1                 ;285
000012  d3f9              BCC      |L1.8|
;;;288      }
;;;289      return (CRC->DR);
000014  6818              LDR      r0,[r3,#0]
;;;290    }
000016  bd10              POP      {r4,pc}
;;;291    
                          ENDP

                  |L1.24|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC PROC
;;;243      */
;;;244    uint32_t CRC_CalcCRC(uint32_t CRC_Data)
000000  4901              LDR      r1,|L2.8|
;;;245    {
;;;246      CRC->DR = CRC_Data;
000002  6008              STR      r0,[r1,#0]
;;;247      
;;;248      return (CRC->DR);
000004  6808              LDR      r0,[r1,#0]
;;;249    }
000006  4770              BX       lr
;;;250    
                          ENDP

                  |L2.8|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC16bits||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC16bits PROC
;;;255      */
;;;256    uint32_t CRC_CalcCRC16bits(uint16_t CRC_Data)
000000  4901              LDR      r1,|L3.8|
;;;257    {
;;;258      *(uint16_t*)(CRC_BASE) = (uint16_t) CRC_Data;
000002  8008              STRH     r0,[r1,#0]
;;;259      
;;;260      return (CRC->DR);
000004  6808              LDR      r0,[r1,#0]
;;;261    }
000006  4770              BX       lr
;;;262    
                          ENDP

                  |L3.8|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC8bits||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC8bits PROC
;;;267      */
;;;268    uint32_t CRC_CalcCRC8bits(uint8_t CRC_Data)
000000  4901              LDR      r1,|L4.8|
;;;269    {
;;;270      *(uint8_t*)(CRC_BASE) = (uint8_t) CRC_Data;
000002  7008              STRB     r0,[r1,#0]
;;;271    
;;;272      return (CRC->DR);
000004  6808              LDR      r0,[r1,#0]
;;;273    }
000006  4770              BX       lr
;;;274    
                          ENDP

                  |L4.8|
                          DCD      0x40023000

                          AREA ||i.CRC_DeInit||, CODE, READONLY, ALIGN=2

                  CRC_DeInit PROC
;;;94       */
;;;95     void CRC_DeInit(void)
000000  4805              LDR      r0,|L5.24|
;;;96     {
;;;97       /* Set DR register to reset value */
;;;98       CRC->DR = 0xFFFFFFFF;
000002  f04f31ff          MOV      r1,#0xffffffff
000006  6001              STR      r1,[r0,#0]
;;;99       /* Set the POL register to the reset value: 0x04C11DB7 */
;;;100      CRC->POL = 0x04C11DB7;
000008  4a04              LDR      r2,|L5.28|
00000a  6142              STR      r2,[r0,#0x14]
;;;101      /* Reset IDR register */
;;;102      CRC->IDR = 0x00;
00000c  2200              MOVS     r2,#0
00000e  7102              STRB     r2,[r0,#4]
;;;103      /* Set INIT register to reset value */
;;;104      CRC->INIT = 0xFFFFFFFF;
000010  6101              STR      r1,[r0,#0x10]
;;;105      /* Reset the CRC calculation unit */
;;;106      CRC->CR = CRC_CR_RESET;
000012  2101              MOVS     r1,#1
000014  6081              STR      r1,[r0,#8]
;;;107    }
000016  4770              BX       lr
;;;108    
                          ENDP

                  |L5.24|
                          DCD      0x40023000
                  |L5.28|
                          DCD      0x04c11db7

                          AREA ||i.CRC_GetCRC||, CODE, READONLY, ALIGN=2

                  CRC_GetCRC PROC
;;;296      */
;;;297    uint32_t CRC_GetCRC(void)
000000  4801              LDR      r0,|L6.8|
;;;298    {
;;;299      return (CRC->DR);
000002  6800              LDR      r0,[r0,#0]
;;;300    }
000004  4770              BX       lr
;;;301    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40023000

                          AREA ||i.CRC_GetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_GetIDRegister PROC
;;;332      */
;;;333    uint8_t CRC_GetIDRegister(void)
000000  4801              LDR      r0,|L7.8|
;;;334    {
;;;335      return (CRC->IDR);
000002  7900              LDRB     r0,[r0,#4]
;;;336    }
000004  4770              BX       lr
;;;337    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x40023000

                          AREA ||i.CRC_PolynomialSizeSelect||, CODE, READONLY, ALIGN=2

                  CRC_PolynomialSizeSelect PROC
;;;129      */
;;;130    void CRC_PolynomialSizeSelect(uint32_t CRC_PolSize)
000000  4a03              LDR      r2,|L8.16|
;;;131    {
;;;132      uint32_t tmpcr = 0;
;;;133    
;;;134      /* Check the parameter */
;;;135      assert_param(IS_CRC_POL_SIZE(CRC_PolSize));
;;;136    
;;;137      /* Get CR register value */
;;;138      tmpcr = CRC->CR;
000002  6891              LDR      r1,[r2,#8]
;;;139    
;;;140      /* Reset POL_SIZE bits */
;;;141      tmpcr &= (uint32_t)~((uint32_t)CRC_CR_POLSIZE);
000004  f0210118          BIC      r1,r1,#0x18
;;;142      /* Set the polynomial size */
;;;143      tmpcr |= (uint32_t)CRC_PolSize;
000008  4301              ORRS     r1,r1,r0
;;;144    
;;;145      /* Write to CR register */
;;;146      CRC->CR = (uint32_t)tmpcr;
00000a  6091              STR      r1,[r2,#8]
;;;147    }
00000c  4770              BX       lr
;;;148    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40023000

                          AREA ||i.CRC_ResetDR||, CODE, READONLY, ALIGN=2

                  CRC_ResetDR PROC
;;;113      */
;;;114    void CRC_ResetDR(void)
000000  4802              LDR      r0,|L9.12|
;;;115    {
;;;116      /* Reset CRC generator */
;;;117      CRC->CR |= CRC_CR_RESET;
000002  6881              LDR      r1,[r0,#8]
000004  f0410101          ORR      r1,r1,#1
000008  6081              STR      r1,[r0,#8]
;;;118    }
00000a  4770              BX       lr
;;;119    
                          ENDP

                  |L9.12|
                          DCD      0x40023000

                          AREA ||i.CRC_ReverseInputDataSelect||, CODE, READONLY, ALIGN=2

                  CRC_ReverseInputDataSelect PROC
;;;158      */
;;;159    void CRC_ReverseInputDataSelect(uint32_t CRC_ReverseInputData)
000000  4a03              LDR      r2,|L10.16|
;;;160    {
;;;161      uint32_t tmpcr = 0;
;;;162    
;;;163      /* Check the parameter */
;;;164      assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));
;;;165    
;;;166      /* Get CR register value */
;;;167      tmpcr = CRC->CR;
000002  6891              LDR      r1,[r2,#8]
;;;168    
;;;169      /* Reset REV_IN bits */
;;;170      tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
000004  f0210160          BIC      r1,r1,#0x60
;;;171      /* Set the reverse operation */
;;;172      tmpcr |= (uint32_t)CRC_ReverseInputData;
000008  4301              ORRS     r1,r1,r0
;;;173    
;;;174      /* Write to CR register */
;;;175      CRC->CR = (uint32_t)tmpcr;
00000a  6091              STR      r1,[r2,#8]
;;;176    }
00000c  4770              BX       lr
;;;177    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40023000

                          AREA ||i.CRC_ReverseOutputDataCmd||, CODE, READONLY, ALIGN=2

                  CRC_ReverseOutputDataCmd PROC
;;;184      */
;;;185    void CRC_ReverseOutputDataCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L11.24|
;;;186    {
;;;187      /* Check the parameters */
;;;188      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;189    
;;;190      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;191      {
;;;192        /* Enable reverse operation on output data */
;;;193        CRC->CR |= CRC_CR_REV_OUT;
;;;194      }
;;;195      else
;;;196      {
;;;197        /* Disable reverse operation on output data */
;;;198        CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
000004  6888              LDR      r0,[r1,#8]
000006  d002              BEQ      |L11.14|
000008  f0400080          ORR      r0,r0,#0x80           ;193
00000c  e001              B        |L11.18|
                  |L11.14|
00000e  f0200080          BIC      r0,r0,#0x80
                  |L11.18|
000012  6088              STR      r0,[r1,#8]            ;193
;;;199      }
;;;200    }
000014  4770              BX       lr
;;;201    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      0x40023000

                          AREA ||i.CRC_SetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_SetIDRegister PROC
;;;322      */
;;;323    void CRC_SetIDRegister(uint8_t CRC_IDValue)
000000  4901              LDR      r1,|L12.8|
;;;324    {
;;;325      CRC->IDR = CRC_IDValue;
000002  7108              STRB     r0,[r1,#4]
;;;326    }
000004  4770              BX       lr
;;;327    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40023000

                          AREA ||i.CRC_SetInitRegister||, CODE, READONLY, ALIGN=2

                  CRC_SetInitRegister PROC
;;;207      */
;;;208    void CRC_SetInitRegister(uint32_t CRC_InitValue)
000000  4901              LDR      r1,|L13.8|
;;;209    {
;;;210      CRC->INIT = CRC_InitValue;
000002  6108              STR      r0,[r1,#0x10]
;;;211    }
000004  4770              BX       lr
;;;212    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40023000

                          AREA ||i.CRC_SetPolynomial||, CODE, READONLY, ALIGN=2

                  CRC_SetPolynomial PROC
;;;217      */
;;;218    void CRC_SetPolynomial(uint32_t CRC_Pol)
000000  4901              LDR      r1,|L14.8|
;;;219    {
;;;220      CRC->POL = CRC_Pol;
000002  6148              STR      r0,[r1,#0x14]
;;;221    }
000004  4770              BX       lr
;;;222    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x40023000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F30x_StdPeriph_Driver\\src\\stm32f30x_crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_crc_c_3a35c564____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f30x_crc_c_3a35c564____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_crc_c_3a35c564____REVSH|
#line 128
|__asm___15_stm32f30x_crc_c_3a35c564____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
