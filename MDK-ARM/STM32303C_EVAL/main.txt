; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\main.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\main.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\src\main.c]
                          THUMB

                          AREA ||i.Enc2||, CODE, READONLY, ALIGN=2

                  Enc2 PROC
;;;1185   }
;;;1186   void Enc2(void){ //обработка энкодера #2 
000000  b510              PUSH     {r4,lr}
;;;1187   	
;;;1188   	uint8_t New;
;;;1189   	uint16_t t3 = GPIO_ReadInputData(GPIOA);
000002  f04f4090          MOV      r0,#0x48000000
000006  f7fffffe          BL       GPIO_ReadInputData
;;;1190   	New = t3 & 0x03;//состояние энкодера
00000a  f0000103          AND      r1,r0,#3
;;;1191   	
;;;1192   								switch(EncState2)
00000e  4811              LDR      r0,|L1.84|
000010  7c82              LDRB     r2,[r0,#0x12]  ; EncState2
000012  b162              CBZ      r2,|L1.46|
000014  2a01              CMP      r2,#1
000016  d00f              BEQ      |L1.56|
000018  2a02              CMP      r2,#2
00001a  d002              BEQ      |L1.34|
00001c  2a03              CMP      r2,#3
00001e  d117              BNE      |L1.80|
000020  e00e              B        |L1.64|
                  |L1.34|
;;;1193   									{
;;;1194   									case 2:
;;;1195   										{
;;;1196   										if(New == 3) EncData2++;
000022  2903              CMP      r1,#3
000024  d011              BEQ      |L1.74|
;;;1197   										if(New == 0) EncData2--; 
000026  b999              CBNZ     r1,|L1.80|
                  |L1.40|
000028  8b42              LDRH     r2,[r0,#0x1a]  ; EncData2
00002a  1e52              SUBS     r2,r2,#1
00002c  e00f              B        |L1.78|
                  |L1.46|
;;;1198   										break;
;;;1199   										}
;;;1200   
;;;1201   									case 0:
;;;1202   										{
;;;1203   										if(New == 2) EncData2++;
00002e  2902              CMP      r1,#2
000030  d00b              BEQ      |L1.74|
;;;1204   										if(New == 1) EncData2--;
000032  2901              CMP      r1,#1
000034  d0f8              BEQ      |L1.40|
000036  e00b              B        |L1.80|
                  |L1.56|
;;;1205   										break;
;;;1206   										}
;;;1207   									case 1:
;;;1208   										{
;;;1209   										if(New == 0) EncData2++;
000038  b139              CBZ      r1,|L1.74|
;;;1210   										if(New == 3) EncData2--;
00003a  2903              CMP      r1,#3
00003c  d0f4              BEQ      |L1.40|
00003e  e007              B        |L1.80|
                  |L1.64|
;;;1211   										break;
;;;1212   										}
;;;1213   									case 3:
;;;1214   										{
;;;1215   										if(New == 1) EncData2++;
000040  2901              CMP      r1,#1
000042  d002              BEQ      |L1.74|
;;;1216   										if(New == 2) EncData2--; 
000044  2902              CMP      r1,#2
000046  d0ef              BEQ      |L1.40|
000048  e002              B        |L1.80|
                  |L1.74|
00004a  8b42              LDRH     r2,[r0,#0x1a]         ;1215  ; EncData2
00004c  1c52              ADDS     r2,r2,#1              ;1215
                  |L1.78|
00004e  8342              STRH     r2,[r0,#0x1a]         ;1215
                  |L1.80|
;;;1217   										break;
;;;1218   										}
;;;1219   									}
;;;1220   	
;;;1221   	EncState2 = New;		// запись нового значения
000050  7481              STRB     r1,[r0,#0x12]
;;;1222   				// предыдущего состояния
;;;1223   }
000052  bd10              POP      {r4,pc}
;;;1224   
                          ENDP

                  |L1.84|
                          DCD      ||area_number.19||

                          AREA ||i.Enc3||, CODE, READONLY, ALIGN=2

                  Enc3 PROC
;;;1224   
;;;1225   void Enc3(void){ //обработка энкодера #3 
000000  b510              PUSH     {r4,lr}
;;;1226   
;;;1227   	uint8_t New;
;;;1228   	uint16_t t3 = GPIO_ReadInputData(GPIOA);
000002  f04f4090          MOV      r0,#0x48000000
000006  f7fffffe          BL       GPIO_ReadInputData
;;;1229   	New = (t3>>4) & 0x03;//состояние энкодера
00000a  f3c01101          UBFX     r1,r0,#4,#2
;;;1230    
;;;1231   		switch(EncState3)
00000e  4811              LDR      r0,|L2.84|
000010  7cc2              LDRB     r2,[r0,#0x13]  ; EncState3
000012  b162              CBZ      r2,|L2.46|
000014  2a01              CMP      r2,#1
000016  d00f              BEQ      |L2.56|
000018  2a02              CMP      r2,#2
00001a  d002              BEQ      |L2.34|
00001c  2a03              CMP      r2,#3
00001e  d117              BNE      |L2.80|
000020  e00e              B        |L2.64|
                  |L2.34|
;;;1232   			{
;;;1233   			case 2:
;;;1234   				{
;;;1235   				if(New == 3) EncData3++;
000022  2903              CMP      r1,#3
000024  d011              BEQ      |L2.74|
;;;1236   				if(New == 0) EncData3--; 
000026  b999              CBNZ     r1,|L2.80|
                  |L2.40|
000028  8b82              LDRH     r2,[r0,#0x1c]  ; EncData3
00002a  1e52              SUBS     r2,r2,#1
00002c  e00f              B        |L2.78|
                  |L2.46|
;;;1237   				break;
;;;1238   				}
;;;1239   
;;;1240   			case 0:
;;;1241   				{
;;;1242   				if(New == 2) EncData3++;
00002e  2902              CMP      r1,#2
000030  d00b              BEQ      |L2.74|
;;;1243   				if(New == 1) EncData3--;
000032  2901              CMP      r1,#1
000034  d0f8              BEQ      |L2.40|
000036  e00b              B        |L2.80|
                  |L2.56|
;;;1244   				break;
;;;1245   				}
;;;1246   			case 1:
;;;1247   				{
;;;1248   				if(New == 0) EncData3++;
000038  b139              CBZ      r1,|L2.74|
;;;1249   				if(New == 3) EncData3--;
00003a  2903              CMP      r1,#3
00003c  d0f4              BEQ      |L2.40|
00003e  e007              B        |L2.80|
                  |L2.64|
;;;1250   				break;
;;;1251   				}
;;;1252   			case 3:
;;;1253   				{
;;;1254   				if(New == 1) EncData3++;
000040  2901              CMP      r1,#1
000042  d002              BEQ      |L2.74|
;;;1255   				if(New == 2) EncData3--; 
000044  2902              CMP      r1,#2
000046  d0ef              BEQ      |L2.40|
000048  e002              B        |L2.80|
                  |L2.74|
00004a  8b82              LDRH     r2,[r0,#0x1c]         ;1254  ; EncData3
00004c  1c52              ADDS     r2,r2,#1              ;1254
                  |L2.78|
00004e  8382              STRH     r2,[r0,#0x1c]         ;1254
                  |L2.80|
;;;1256   				break;
;;;1257   				}
;;;1258   			}
;;;1259   	
;;;1260   	EncState3 = New;		// запись нового значения
000050  74c1              STRB     r1,[r0,#0x13]
;;;1261   				// предыдущего состояния
;;;1262   }
000052  bd10              POP      {r4,pc}
;;;1263   void Enc4(void){ //обработка энкодера #4
                          ENDP

                  |L2.84|
                          DCD      ||area_number.19||

                          AREA ||i.Enc4||, CODE, READONLY, ALIGN=2

                  Enc4 PROC
;;;1262   }
;;;1263   void Enc4(void){ //обработка энкодера #4
000000  b510              PUSH     {r4,lr}
;;;1264   
;;;1265   	uint8_t New;
;;;1266   	uint16_t t3 = GPIO_ReadInputData(GPIOD);
000002  4814              LDR      r0,|L3.84|
000004  f7fffffe          BL       GPIO_ReadInputData
;;;1267   	New = (t3>>12) & 0x03;//состояние энкодера
000008  f3c03101          UBFX     r1,r0,#12,#2
;;;1268   	
;;;1269   	switch(EncState4)
00000c  4812              LDR      r0,|L3.88|
00000e  7d02              LDRB     r2,[r0,#0x14]  ; EncState4
000010  b162              CBZ      r2,|L3.44|
000012  2a01              CMP      r2,#1
000014  d00f              BEQ      |L3.54|
000016  2a02              CMP      r2,#2
000018  d002              BEQ      |L3.32|
00001a  2a03              CMP      r2,#3
00001c  d117              BNE      |L3.78|
00001e  e00e              B        |L3.62|
                  |L3.32|
;;;1270   		{
;;;1271   		case 2:
;;;1272   			{
;;;1273   			if(New == 3) EncData4++;
000020  2903              CMP      r1,#3
000022  d011              BEQ      |L3.72|
;;;1274   			if(New == 0) EncData4--; 
000024  b999              CBNZ     r1,|L3.78|
                  |L3.38|
000026  8bc2              LDRH     r2,[r0,#0x1e]  ; EncData4
000028  1e52              SUBS     r2,r2,#1
00002a  e00f              B        |L3.76|
                  |L3.44|
;;;1275   			break;
;;;1276   			}
;;;1277   
;;;1278   		case 0:
;;;1279   			{
;;;1280   			if(New == 2) EncData4++;
00002c  2902              CMP      r1,#2
00002e  d00b              BEQ      |L3.72|
;;;1281   			if(New == 1) EncData4--;
000030  2901              CMP      r1,#1
000032  d0f8              BEQ      |L3.38|
000034  e00b              B        |L3.78|
                  |L3.54|
;;;1282   			break;
;;;1283   			}
;;;1284   		case 1:
;;;1285   			{
;;;1286   			if(New == 0) EncData4++;
000036  b139              CBZ      r1,|L3.72|
;;;1287   			if(New == 3) EncData4--;
000038  2903              CMP      r1,#3
00003a  d0f4              BEQ      |L3.38|
00003c  e007              B        |L3.78|
                  |L3.62|
;;;1288   			break;
;;;1289   			}
;;;1290   		case 3:
;;;1291   			{
;;;1292   			if(New == 1) EncData4++;
00003e  2901              CMP      r1,#1
000040  d002              BEQ      |L3.72|
;;;1293   			if(New == 2) EncData4--; 
000042  2902              CMP      r1,#2
000044  d0ef              BEQ      |L3.38|
000046  e002              B        |L3.78|
                  |L3.72|
000048  8bc2              LDRH     r2,[r0,#0x1e]         ;1292  ; EncData4
00004a  1c52              ADDS     r2,r2,#1              ;1292
                  |L3.76|
00004c  83c2              STRH     r2,[r0,#0x1e]         ;1292
                  |L3.78|
;;;1294   			break;
;;;1295   			}
;;;1296   		}
;;;1297   	
;;;1298   	EncState4 = New;		// запись нового значения
00004e  7501              STRB     r1,[r0,#0x14]
;;;1299   				// предыдущего состояния
;;;1300   }
000050  bd10              POP      {r4,pc}
;;;1301   void Enc5(void){ //обработка энкодера #5
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      0x48000c00
                  |L3.88|
                          DCD      ||area_number.19||

                          AREA ||i.Enc5||, CODE, READONLY, ALIGN=2

                  Enc5 PROC
;;;1300   }
;;;1301   void Enc5(void){ //обработка энкодера #5
000000  b510              PUSH     {r4,lr}
;;;1302   
;;;1303   	uint8_t New;
;;;1304   	uint16_t t3 = GPIO_ReadInputData(GPIOC);
000002  4814              LDR      r0,|L4.84|
000004  f7fffffe          BL       GPIO_ReadInputData
;;;1305   	New = (t3>>6) & 0x03;//состояние энкодера
000008  f3c01181          UBFX     r1,r0,#6,#2
;;;1306   	
;;;1307   	switch(EncState5)
00000c  4812              LDR      r0,|L4.88|
00000e  7d42              LDRB     r2,[r0,#0x15]  ; EncState5
000010  b162              CBZ      r2,|L4.44|
000012  2a01              CMP      r2,#1
000014  d00f              BEQ      |L4.54|
000016  2a02              CMP      r2,#2
000018  d002              BEQ      |L4.32|
00001a  2a03              CMP      r2,#3
00001c  d117              BNE      |L4.78|
00001e  e00e              B        |L4.62|
                  |L4.32|
;;;1308   		{
;;;1309   		case 2:
;;;1310   			{
;;;1311   			if(New == 3) EncData5++;
000020  2903              CMP      r1,#3
000022  d011              BEQ      |L4.72|
;;;1312   			if(New == 0) EncData5--; 
000024  b999              CBNZ     r1,|L4.78|
                  |L4.38|
000026  8c02              LDRH     r2,[r0,#0x20]  ; EncData5
000028  1e52              SUBS     r2,r2,#1
00002a  e00f              B        |L4.76|
                  |L4.44|
;;;1313   			break;
;;;1314   			}
;;;1315   
;;;1316   		case 0:
;;;1317   			{
;;;1318   			if(New == 2) EncData5++;
00002c  2902              CMP      r1,#2
00002e  d00b              BEQ      |L4.72|
;;;1319   			if(New == 1) EncData5--;
000030  2901              CMP      r1,#1
000032  d0f8              BEQ      |L4.38|
000034  e00b              B        |L4.78|
                  |L4.54|
;;;1320   			break;
;;;1321   			}
;;;1322   		case 1:
;;;1323   			{
;;;1324   			if(New == 0) EncData5++;
000036  b139              CBZ      r1,|L4.72|
;;;1325   			if(New == 3) EncData5--;
000038  2903              CMP      r1,#3
00003a  d0f4              BEQ      |L4.38|
00003c  e007              B        |L4.78|
                  |L4.62|
;;;1326   			break;
;;;1327   			}
;;;1328   		case 3:
;;;1329   			{
;;;1330   			if(New == 1) EncData5++;
00003e  2901              CMP      r1,#1
000040  d002              BEQ      |L4.72|
;;;1331   			if(New == 2) EncData5--; 
000042  2902              CMP      r1,#2
000044  d0ef              BEQ      |L4.38|
000046  e002              B        |L4.78|
                  |L4.72|
000048  8c02              LDRH     r2,[r0,#0x20]         ;1330  ; EncData5
00004a  1c52              ADDS     r2,r2,#1              ;1330
                  |L4.76|
00004c  8402              STRH     r2,[r0,#0x20]         ;1330
                  |L4.78|
;;;1332   			break;
;;;1333   			}
;;;1334   		}
;;;1335   	
;;;1336   	EncState5 = New;		// запись нового значения
00004e  7541              STRB     r1,[r0,#0x15]
;;;1337   				// предыдущего состояния
;;;1338   }
000050  bd10              POP      {r4,pc}
;;;1339   void EncClaw(void){ //обработка энкодера #6 (claw)
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      0x48000800
                  |L4.88|
                          DCD      ||area_number.19||

                          AREA ||i.EncClaw||, CODE, READONLY, ALIGN=2

                  EncClaw PROC
;;;1338   }
;;;1339   void EncClaw(void){ //обработка энкодера #6 (claw)
000000  b510              PUSH     {r4,lr}
;;;1340   
;;;1341   	uint8_t New;
;;;1342   	uint16_t t3 = GPIO_ReadInputData(GPIOF);
000002  4814              LDR      r0,|L5.84|
000004  f7fffffe          BL       GPIO_ReadInputData
;;;1343   	New = (t3>>9) & 0x03;//состояние энкодера
000008  f3c02141          UBFX     r1,r0,#9,#2
;;;1344    
;;;1345   					switch(EncState6)
00000c  4812              LDR      r0,|L5.88|
00000e  7d82              LDRB     r2,[r0,#0x16]  ; EncState6
000010  b162              CBZ      r2,|L5.44|
000012  2a01              CMP      r2,#1
000014  d00f              BEQ      |L5.54|
000016  2a02              CMP      r2,#2
000018  d002              BEQ      |L5.32|
00001a  2a03              CMP      r2,#3
00001c  d117              BNE      |L5.78|
00001e  e00e              B        |L5.62|
                  |L5.32|
;;;1346   						{
;;;1347   						case 2:
;;;1348   							{
;;;1349   							if(New == 3) EncData6++;
000020  2903              CMP      r1,#3
000022  d011              BEQ      |L5.72|
;;;1350   							if(New == 0) EncData6--; 
000024  b999              CBNZ     r1,|L5.78|
                  |L5.38|
000026  8c42              LDRH     r2,[r0,#0x22]  ; EncData6
000028  1e52              SUBS     r2,r2,#1
00002a  e00f              B        |L5.76|
                  |L5.44|
;;;1351   							break;
;;;1352   							}
;;;1353   
;;;1354   						case 0:
;;;1355   							{
;;;1356   							if(New == 2) EncData6++;
00002c  2902              CMP      r1,#2
00002e  d00b              BEQ      |L5.72|
;;;1357   							if(New == 1) EncData6--;
000030  2901              CMP      r1,#1
000032  d0f8              BEQ      |L5.38|
000034  e00b              B        |L5.78|
                  |L5.54|
;;;1358   							break;
;;;1359   							}
;;;1360   						case 1:
;;;1361   							{
;;;1362   							if(New == 0) EncData6++;
000036  b139              CBZ      r1,|L5.72|
;;;1363   							if(New == 3) EncData6--;
000038  2903              CMP      r1,#3
00003a  d0f4              BEQ      |L5.38|
00003c  e007              B        |L5.78|
                  |L5.62|
;;;1364   							break;
;;;1365   							}
;;;1366   						case 3:
;;;1367   							{
;;;1368   							if(New == 1) EncData6++;
00003e  2901              CMP      r1,#1
000040  d002              BEQ      |L5.72|
;;;1369   							if(New == 2) EncData6--; 
000042  2902              CMP      r1,#2
000044  d0ef              BEQ      |L5.38|
000046  e002              B        |L5.78|
                  |L5.72|
000048  8c42              LDRH     r2,[r0,#0x22]         ;1368  ; EncData6
00004a  1c52              ADDS     r2,r2,#1              ;1368
                  |L5.76|
00004c  8442              STRH     r2,[r0,#0x22]         ;1368
                  |L5.78|
;;;1370   							break;
;;;1371   							}
;;;1372   						}
;;;1373   	
;;;1374   	EncState6 = New;		// запись нового значения
00004e  7581              STRB     r1,[r0,#0x16]
;;;1375   				// предыдущего состояния
;;;1376   }
000050  bd10              POP      {r4,pc}
;;;1377   
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
                          DCD      0x48001400
                  |L5.88|
                          DCD      ||area_number.19||

                          AREA ||i.EncPlatform||, CODE, READONLY, ALIGN=2

                  EncPlatform PROC
;;;1126   }
;;;1127   void EncPlatform(void){ //обработка энкодера #1 (platform)
000000  b510              PUSH     {r4,lr}
;;;1128   
;;;1129   	uint8_t New;
;;;1130   	// ОК для энкодера #6
;;;1131   	//uint16_t t3 = GPIO_ReadInputData(GPIOF);
;;;1132   	//New = (t3>>9) & 0x03;//состояние энкодера
;;;1133   	
;;;1134   	// ОК для энкодера #2
;;;1135   	//uint16_t t3 = GPIO_ReadInputData(GPIOA);
;;;1136   	//New = t3 & 0x03;//состояние энкодера
;;;1137   	
;;;1138   	// OK для энкодера #4
;;;1139   	//uint16_t t3 = GPIO_ReadInputData(GPIOD);
;;;1140   	//New = (t3>>12) & 0x03;//состояние энкодера
;;;1141   	
;;;1142   	// OK для энкодера #1
;;;1143   	uint16_t t3 = GPIO_ReadInputData(GPIOA);
000002  f04f4090          MOV      r0,#0x48000000
000006  f7fffffe          BL       GPIO_ReadInputData
;;;1144   	New = (t3>>6) & 0x03;//состояние энкодера
00000a  f3c01181          UBFX     r1,r0,#6,#2
;;;1145   	
;;;1146   	// OK для энкодера #5
;;;1147   	//uint16_t t3 = GPIO_ReadInputData(GPIOC);
;;;1148   	//New = (t3>>6) & 0x03;//состояние энкодера
;;;1149   	
;;;1150   	// OK для энкодера #3
;;;1151   	//uint16_t t3 = GPIO_ReadInputData(GPIOA);
;;;1152   	//New = (t3>>4) & 0x03;//состояние энкодера
;;;1153    
;;;1154   switch(EncState1)
00000e  4811              LDR      r0,|L6.84|
000010  7c42              LDRB     r2,[r0,#0x11]  ; EncState1
000012  b162              CBZ      r2,|L6.46|
000014  2a01              CMP      r2,#1
000016  d00f              BEQ      |L6.56|
000018  2a02              CMP      r2,#2
00001a  d002              BEQ      |L6.34|
00001c  2a03              CMP      r2,#3
00001e  d117              BNE      |L6.80|
000020  e00e              B        |L6.64|
                  |L6.34|
;;;1155   	{
;;;1156   	case 2:
;;;1157   		{
;;;1158   		if(New == 3) EncData1++;
000022  2903              CMP      r1,#3
000024  d011              BEQ      |L6.74|
;;;1159   		if(New == 0) EncData1--; 
000026  b999              CBNZ     r1,|L6.80|
                  |L6.40|
000028  8b02              LDRH     r2,[r0,#0x18]  ; EncData1
00002a  1e52              SUBS     r2,r2,#1
00002c  e00f              B        |L6.78|
                  |L6.46|
;;;1160   		break;
;;;1161   		}
;;;1162   
;;;1163   	case 0:
;;;1164   		{
;;;1165   		if(New == 2) EncData1++;
00002e  2902              CMP      r1,#2
000030  d00b              BEQ      |L6.74|
;;;1166   		if(New == 1) EncData1--;
000032  2901              CMP      r1,#1
000034  d0f8              BEQ      |L6.40|
000036  e00b              B        |L6.80|
                  |L6.56|
;;;1167   		break;
;;;1168   		}
;;;1169   	case 1:
;;;1170   		{
;;;1171   		if(New == 0) EncData1++;
000038  b139              CBZ      r1,|L6.74|
;;;1172   		if(New == 3) EncData1--;
00003a  2903              CMP      r1,#3
00003c  d0f4              BEQ      |L6.40|
00003e  e007              B        |L6.80|
                  |L6.64|
;;;1173   		break;
;;;1174   		}
;;;1175   	case 3:
;;;1176   		{
;;;1177   		if(New == 1) EncData1++;
000040  2901              CMP      r1,#1
000042  d002              BEQ      |L6.74|
;;;1178   		if(New == 2) EncData1--; 
000044  2902              CMP      r1,#2
000046  d0ef              BEQ      |L6.40|
000048  e002              B        |L6.80|
                  |L6.74|
00004a  8b02              LDRH     r2,[r0,#0x18]         ;1177  ; EncData1
00004c  1c52              ADDS     r2,r2,#1              ;1177
                  |L6.78|
00004e  8302              STRH     r2,[r0,#0x18]         ;1177
                  |L6.80|
;;;1179   		break;
;;;1180   		}
;;;1181   	}
;;;1182   	
;;;1183   	EncState1 = New;		// запись нового значения
000050  7441              STRB     r1,[r0,#0x11]
;;;1184   				// предыдущего состояния
;;;1185   }
000052  bd10              POP      {r4,pc}
;;;1186   void Enc2(void){ //обработка энкодера #2 
                          ENDP

                  |L6.84|
                          DCD      ||area_number.19||

                          AREA ||i.axis2||, CODE, READONLY, ALIGN=2

                  axis2 PROC
;;;989    //2 -- вперед, 1 -- назад, 0 -- стоп
;;;990    void axis2(uint8_t x){
000000  b570              PUSH     {r4-r6,lr}
;;;991    	switch (x)
;;;992    	{
;;;993    		case 2:
;;;994    				GPIOB->BSRR = GPIO_Pin_4; //enabled
000002  2410              MOVS     r4,#0x10
;;;995                    GPIOD->BSRR = GPIO_Pin_7; //move
000004  2380              MOVS     r3,#0x80
;;;996                    GPIOB->BRR = GPIO_Pin_3;
000006  4a0b              LDR      r2,|L7.52|
;;;997    				break;
;;;998    				  	
;;;999    		case 1:  
;;;1000   				GPIOB->BSRR = GPIO_Pin_4; //enabled
;;;1001                   GPIOB->BSRR = GPIO_Pin_3; //move
;;;1002                   GPIOD->BRR = GPIO_Pin_7;
000008  4e0b              LDR      r6,|L7.56|
00000a  2508              MOVS     r5,#8                 ;996
00000c  b170              CBZ      r0,|L7.44|
00000e  4909              LDR      r1,|L7.52|
000010  3910              SUBS     r1,r1,#0x10           ;994
000012  2801              CMP      r0,#1                 ;991
000014  d007              BEQ      |L7.38|
000016  2802              CMP      r0,#2                 ;991
000018  d104              BNE      |L7.36|
00001a  600c              STR      r4,[r1,#0]            ;994
00001c  4806              LDR      r0,|L7.56|
00001e  3810              SUBS     r0,r0,#0x10           ;995
000020  6003              STR      r3,[r0,#0]            ;995
000022  8015              STRH     r5,[r2,#0]            ;996
                  |L7.36|
;;;1003   				break;
;;;1004   					  
;;;1005   		case 0:  
;;;1006   				GPIOB->BRR = GPIO_Pin_4; //enabled
;;;1007                   GPIOB->BRR = GPIO_Pin_3; //move
;;;1008                   GPIOD->BRR = GPIO_Pin_7;
;;;1009   				break;		
;;;1010   	}
;;;1011   }
000024  bd70              POP      {r4-r6,pc}
                  |L7.38|
000026  600c              STR      r4,[r1,#0]            ;1000
000028  600d              STR      r5,[r1,#0]            ;1001
00002a  e001              B        |L7.48|
                  |L7.44|
00002c  8014              STRH     r4,[r2,#0]            ;1006
00002e  8015              STRH     r5,[r2,#0]            ;1007
                  |L7.48|
000030  8033              STRH     r3,[r6,#0]            ;1008
000032  bd70              POP      {r4-r6,pc}
;;;1012   
                          ENDP

                  |L7.52|
                          DCD      0x48000428
                  |L7.56|
                          DCD      0x48000c28

                          AREA ||i.axis3||, CODE, READONLY, ALIGN=2

                  axis3 PROC
;;;1012   
;;;1013   void axis3(uint8_t x){
000000  b570              PUSH     {r4-r6,lr}
000002  2101              MOVS     r1,#1
;;;1014   	
;;;1015   	switch (x)
;;;1016   	{
;;;1017   		case 2:
;;;1018   									GPIOD->BSRR = GPIO_Pin_0; //enabled
;;;1019                     GPIOC->BRR = GPIO_Pin_11; //move
000004  02ca              LSLS     r2,r1,#11
000006  4c0b              LDR      r4,|L8.52|
;;;1020                     GPIOC->BSRR = GPIO_Pin_12;
000008  030b              LSLS     r3,r1,#12
00000a  b168              CBZ      r0,|L8.40|
00000c  4d09              LDR      r5,|L8.52|
00000e  4e0a              LDR      r6,|L8.56|
000010  3d10              SUBS     r5,r5,#0x10
000012  2801              CMP      r0,#1                 ;1015
000014  d005              BEQ      |L8.34|
000016  2802              CMP      r0,#2                 ;1015
000018  d102              BNE      |L8.32|
00001a  6031              STR      r1,[r6,#0]            ;1018
00001c  8022              STRH     r2,[r4,#0]            ;1019
00001e  602b              STR      r3,[r5,#0]
                  |L8.32|
;;;1021   									break;
;;;1022   				  	
;;;1023   		case 1:  		
;;;1024   									GPIOD->BSRR = GPIO_Pin_0; //enabled
;;;1025                     GPIOC->BSRR = GPIO_Pin_11; //move
;;;1026                     GPIOC->BRR = GPIO_Pin_12;
;;;1027   									break;
;;;1028   				
;;;1029   		case 0:
;;;1030   									GPIOD->BRR = GPIO_Pin_0; //enabled
;;;1031                     GPIOC->BRR = GPIO_Pin_11; //move
;;;1032                     GPIOC->BRR = GPIO_Pin_12;
;;;1033   									break;
;;;1034   	}
;;;1035   }
000020  bd70              POP      {r4-r6,pc}
                  |L8.34|
000022  6031              STR      r1,[r6,#0]            ;1024
000024  602a              STR      r2,[r5,#0]            ;1025
000026  e003              B        |L8.48|
                  |L8.40|
000028  4803              LDR      r0,|L8.56|
00002a  3010              ADDS     r0,r0,#0x10           ;1030
00002c  8001              STRH     r1,[r0,#0]            ;1030
00002e  8022              STRH     r2,[r4,#0]            ;1031
                  |L8.48|
000030  8023              STRH     r3,[r4,#0]            ;1032
000032  bd70              POP      {r4-r6,pc}
;;;1036   
                          ENDP

                  |L8.52|
                          DCD      0x48000828
                  |L8.56|
                          DCD      0x48000c18

                          AREA ||i.axis4||, CODE, READONLY, ALIGN=2

                  axis4 PROC
;;;1036   
;;;1037   void axis4(uint8_t x){
000000  b5f0              PUSH     {r4-r7,lr}
000002  2302              MOVS     r3,#2
;;;1038   	
;;;1039   	switch (x)
;;;1040   	{
;;;1041   		case 2:
;;;1042   				GPIOD->BSRR = GPIO_Pin_3; //enabled
;;;1043                   GPIOD->BSRR = GPIO_Pin_1; //move
;;;1044                   GPIOD->BRR = GPIO_Pin_2;
000004  2404              MOVS     r4,#4
000006  4912              LDR      r1,|L9.80|
;;;1045                   GPIOD->BSRR = GPIO_Pin_6; //enabled
000008  2540              MOVS     r5,#0x40
;;;1046                   GPIOD->BSRR = GPIO_Pin_4; //move
00000a  2610              MOVS     r6,#0x10
00000c  f04f0c08          MOV      r12,#8                ;1042
;;;1047                   GPIOD->BRR = GPIO_Pin_5;
000010  2720              MOVS     r7,#0x20
000012  b1a0              CBZ      r0,|L9.62|
000014  4a0e              LDR      r2,|L9.80|
000016  3a10              SUBS     r2,r2,#0x10           ;1042
000018  2801              CMP      r0,#1                 ;1039
00001a  d009              BEQ      |L9.48|
00001c  2802              CMP      r0,#2                 ;1039
00001e  d106              BNE      |L9.46|
000020  f8c2c000          STR      r12,[r2,#0]           ;1042
000024  6013              STR      r3,[r2,#0]            ;1043
000026  800c              STRH     r4,[r1,#0]            ;1044
000028  6015              STR      r5,[r2,#0]            ;1045
00002a  6016              STR      r6,[r2,#0]            ;1046
00002c  800f              STRH     r7,[r1,#0]
                  |L9.46|
;;;1048   				break;
;;;1049   		
;;;1050   		case 1: 
;;;1051   				GPIOD->BSRR = GPIO_Pin_3; //enabled
;;;1052                   GPIOD->BSRR = GPIO_Pin_2; //move
;;;1053                   GPIOD->BRR = GPIO_Pin_1;
;;;1054                   GPIOD->BSRR = GPIO_Pin_6; //enabled
;;;1055                   GPIOD->BSRR = GPIO_Pin_5; //move
;;;1056                   GPIOD->BRR = GPIO_Pin_4;
;;;1057   				break;
;;;1058   		
;;;1059   		case 0:  
;;;1060   				GPIOD->BRR = GPIO_Pin_3; //enabled
;;;1061                   GPIOD->BRR = GPIO_Pin_2; //move
;;;1062                   GPIOD->BRR = GPIO_Pin_1;
;;;1063                   GPIOD->BRR = GPIO_Pin_6; //enabled
;;;1064                   GPIOD->BRR = GPIO_Pin_5; //move
;;;1065                   GPIOD->BRR = GPIO_Pin_4;
;;;1066   				break;
;;;1067   	}
;;;1068   }
00002e  bdf0              POP      {r4-r7,pc}
                  |L9.48|
000030  f8c2c000          STR      r12,[r2,#0]           ;1051
000034  6014              STR      r4,[r2,#0]            ;1052
000036  800b              STRH     r3,[r1,#0]            ;1053
000038  6015              STR      r5,[r2,#0]            ;1054
00003a  6017              STR      r7,[r2,#0]            ;1055
00003c  e005              B        |L9.74|
                  |L9.62|
00003e  f8a1c000          STRH     r12,[r1,#0]           ;1060
000042  800c              STRH     r4,[r1,#0]            ;1061
000044  800b              STRH     r3,[r1,#0]            ;1062
000046  800d              STRH     r5,[r1,#0]            ;1063
000048  800f              STRH     r7,[r1,#0]            ;1064
                  |L9.74|
00004a  800e              STRH     r6,[r1,#0]            ;1065
00004c  bdf0              POP      {r4-r7,pc}
;;;1069   
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
                          DCD      0x48000c28

                          AREA ||i.axis5||, CODE, READONLY, ALIGN=2

                  axis5 PROC
;;;1070   //2 -- по часовой, 1 -- против часовой, 0 -- стоп
;;;1071   void axis5(uint8_t x){
000000  b5f0              PUSH     {r4-r7,lr}
000002  2302              MOVS     r3,#2
;;;1072   	switch (x)
;;;1073   	{
;;;1074   		case 2:
;;;1075   				GPIOD->BSRR = GPIO_Pin_6; //enabled
;;;1076                   GPIOD->BSRR = GPIO_Pin_4; //move
000004  2410              MOVS     r4,#0x10
;;;1077                   GPIOD->BRR = GPIO_Pin_5;
000006  2520              MOVS     r5,#0x20
000008  4911              LDR      r1,|L10.80|
;;;1078                   GPIOD->BSRR = GPIO_Pin_3; //enabled
00000a  2608              MOVS     r6,#8
00000c  f04f0c40          MOV      r12,#0x40             ;1075
;;;1079                   GPIOD->BSRR = GPIO_Pin_2; //move
000010  2704              MOVS     r7,#4
000012  b1a0              CBZ      r0,|L10.62|
000014  4a0e              LDR      r2,|L10.80|
000016  3a10              SUBS     r2,r2,#0x10           ;1075
000018  2801              CMP      r0,#1                 ;1072
00001a  d009              BEQ      |L10.48|
00001c  2802              CMP      r0,#2                 ;1072
00001e  d106              BNE      |L10.46|
000020  f8c2c000          STR      r12,[r2,#0]           ;1075
000024  6014              STR      r4,[r2,#0]            ;1076
000026  800d              STRH     r5,[r1,#0]            ;1077
000028  6016              STR      r6,[r2,#0]            ;1078
00002a  6017              STR      r7,[r2,#0]
;;;1080                   GPIOD->BRR = GPIO_Pin_1;
00002c  800b              STRH     r3,[r1,#0]
                  |L10.46|
;;;1081   				break;
;;;1082   		
;;;1083   		case 1:
;;;1084   				GPIOD->BSRR = GPIO_Pin_6; //enabled
;;;1085                   GPIOD->BSRR = GPIO_Pin_5; //move
;;;1086                   GPIOD->BRR = GPIO_Pin_4;
;;;1087                   GPIOD->BSRR = GPIO_Pin_3; //enabled
;;;1088                   GPIOD->BSRR = GPIO_Pin_1; //move
;;;1089                   GPIOD->BRR = GPIO_Pin_2;
;;;1090   				break;
;;;1091   		
;;;1092   		case 0:  
;;;1093   				GPIOD->BRR = GPIO_Pin_6; //enabled
;;;1094                   GPIOD->BRR = GPIO_Pin_5; //move
;;;1095                   GPIOD->BRR = GPIO_Pin_4;
;;;1096                   GPIOD->BRR = GPIO_Pin_3; //enabled
;;;1097                   GPIOD->BRR = GPIO_Pin_1; //move
;;;1098                   GPIOD->BRR = GPIO_Pin_2;
;;;1099   				break;
;;;1100   	}
;;;1101   }
00002e  bdf0              POP      {r4-r7,pc}
                  |L10.48|
000030  f8c2c000          STR      r12,[r2,#0]           ;1084
000034  6015              STR      r5,[r2,#0]            ;1085
000036  800c              STRH     r4,[r1,#0]            ;1086
000038  6016              STR      r6,[r2,#0]            ;1087
00003a  6013              STR      r3,[r2,#0]            ;1088
00003c  e005              B        |L10.74|
                  |L10.62|
00003e  f8a1c000          STRH     r12,[r1,#0]           ;1093
000042  800d              STRH     r5,[r1,#0]            ;1094
000044  800c              STRH     r4,[r1,#0]            ;1095
000046  800e              STRH     r6,[r1,#0]            ;1096
000048  800b              STRH     r3,[r1,#0]            ;1097
                  |L10.74|
00004a  800f              STRH     r7,[r1,#0]            ;1098
00004c  bdf0              POP      {r4-r7,pc}
;;;1102   
                          ENDP

00004e  0000              DCW      0x0000
                  |L10.80|
                          DCD      0x48000c28

                          AREA ||i.claw||, CODE, READONLY, ALIGN=2

                  claw PROC
;;;1103   //2 -- клешня закрывается, 1 -- клешня открывается, 0 -- клешня стоп
;;;1104   void claw(uint8_t x){
000000  b570              PUSH     {r4-r6,lr}
;;;1105   	
;;;1106   	switch (x)
;;;1107   	{
;;;1108   		case 2:
;;;1109   				GPIOC->BSRR = GPIO_Pin_9; //enabled
000002  f44f7100          MOV      r1,#0x200
;;;1110                   GPIOA->BRR = GPIO_Pin_13; //move
000006  010a              LSLS     r2,r1,#4
;;;1111                   GPIOF->BSRR = GPIO_Pin_6;
;;;1112   				break;
;;;1113   		
;;;1114   		case 1:  
;;;1115   				GPIOC->BSRR = GPIO_Pin_9; //enabled
;;;1116                   GPIOA->BSRR = GPIO_Pin_13; //move
;;;1117                   GPIOF->BRR = GPIO_Pin_6;
000008  4d0c              LDR      r5,|L11.60|
00000a  f04f4390          MOV      r3,#0x48000000        ;1110
00000e  2440              MOVS     r4,#0x40              ;1111
000010  b168              CBZ      r0,|L11.46|
000012  4e0b              LDR      r6,|L11.64|
000014  2801              CMP      r0,#1                 ;1106
000016  d007              BEQ      |L11.40|
000018  2802              CMP      r0,#2                 ;1106
00001a  d104              BNE      |L11.38|
00001c  6031              STR      r1,[r6,#0]            ;1109
00001e  851a              STRH     r2,[r3,#0x28]         ;1110
000020  4806              LDR      r0,|L11.60|
000022  3810              SUBS     r0,r0,#0x10           ;1111
000024  6004              STR      r4,[r0,#0]            ;1111
                  |L11.38|
;;;1118   				break;
;;;1119   		
;;;1120   		case 0:  
;;;1121   				GPIOC->BRR = GPIO_Pin_9; //enabled
;;;1122                   GPIOA->BRR = GPIO_Pin_13; //move
;;;1123                   GPIOF->BRR = GPIO_Pin_6;
;;;1124   				break;
;;;1125   	}
;;;1126   }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  6031              STR      r1,[r6,#0]            ;1115
00002a  619a              STR      r2,[r3,#0x18]         ;1116
00002c  e003              B        |L11.54|
                  |L11.46|
00002e  4804              LDR      r0,|L11.64|
000030  3010              ADDS     r0,r0,#0x10           ;1121
000032  8001              STRH     r1,[r0,#0]            ;1121
000034  851a              STRH     r2,[r3,#0x28]         ;1122
                  |L11.54|
000036  802c              STRH     r4,[r5,#0]            ;1123
000038  bd70              POP      {r4-r6,pc}
;;;1127   void EncPlatform(void){ //обработка энкодера #1 (platform)
                          ENDP

00003a  0000              DCW      0x0000
                  |L11.60|
                          DCD      0x48001428
                  |L11.64|
                          DCD      0x48000818

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;239    */
;;;240    int main(void)
000000  f7fffffe          BL       Set_System
;;;241    {
;;;242      Set_System();
;;;243      Set_USBClock();
000004  f7fffffe          BL       Set_USBClock
;;;244      USB_Interrupts_Config();
000008  f7fffffe          BL       USB_Interrupts_Config
;;;245      USB_Init();
00000c  f7fffffe          BL       USB_Init
;;;246      mx_pinout_config();//gpio init
000010  f7fffffe          BL       mx_pinout_config
;;;247    //	EncInit();//apparat_encoders init
;;;248     
;;;249      while (1)
;;;250      {
;;;251    		if (nozero)
;;;252    		{
;;;253    			zero(); 
;;;254    			zero();
;;;255    			zero();
;;;256    			nozero = 0;
;;;257    		}
;;;258    
;;;259    	// дебаг
;;;260      	//Send_Buffer[0] = GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_14);
;;;261      	//Send_Buffer[1] = GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_8);
;;;262      	//Send_Buffer[2] = GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_10);
;;;263      	//Send_Buffer[3] = GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_9);
;;;264    
;;;265    		//считаем энкодеры
;;;266    	EncPlatform();
;;;267    	Enc2();
;;;268    	Enc3();
;;;269    	Enc4();
;;;270    	Enc5();
;;;271    	EncClaw();
;;;272    
;;;273    	if (((EncData1 >> 6) & 0xFF) > 250) {EncData1 += (1<<6);}
;;;274    	if (((EncData2 >> 5) & 0xFF) > 250) {EncData2 += (1<<5);}
;;;275    	if (((EncData3 >> 6) & 0xFF) > 250) {EncData3 += (1<<6);}
;;;276    	if (((EncData4 >> 4) & 0xFF) > 250) {EncData4 += (1<<4);}
;;;277    	if (((EncData5 >> 5) & 0xFF) > 250) {EncData5 += (1<<5);}
;;;278    	if (((EncData6 >> 2) & 0xFF) > 250) {EncData6 += (1<<2);}
;;;279    				/*отправляем данные о положении энкодера
;;;280    		if (Receive_Buffer[0] == 1)
;;;281    		{
;;;282    			monit = Receive_Buffer[1];
;;;283    			if (monit > 10)  
;;;284    			{
;;;285    				monit = monit/10;
;;;286    			}//если в обратную сторону, то делим на 10 (44/4=4 -- энкодер #4)
;;;287    		}	*/			
;;;288    		//ОБРАБОТКА
;;;289    //if (!error)	//если нет ошибки
;;;290    //	{	
;;;291    		if (rab1)
;;;292    		{
;;;293    			temp8 = ((EncData1>>6) & 0xFF);
;;;294    			//if ((temp8 > 205) || (e1 > 205))
;;;295    			//	{
;;;296    			//		error = 1;
;;;297    			//	}
;;;298    			if(e1 > temp8)
;;;299    			{
;;;300    				platform (1);
;;;301    			}
;;;302    			if (e1 < temp8)
;;;303    			{
;;;304    				platform(2);
;;;305    			}
;;;306    			if (e1 == temp8)
;;;307    			{
;;;308    				platform(0);
;;;309    				rab1 = 0;
;;;310    			}
;;;311    			if (error) //Обработка ошибки!!!
;;;312    			{
;;;313    				platform(0);
;;;314    				rab1 = 0;
;;;315    				error = 0;
;;;316    			}
;;;317    		}
;;;318    
;;;319    		if (rab2)
;;;320    		{
;;;321    			temp8 = ((EncData2>>5) & 0xFF);
;;;322    			//if ((temp8 > 205) || (e2 > 205))//уточнить!!
;;;323    			//	{
;;;324    			//		error = 1;
;;;325    			//	}
;;;326    			if(e2 > temp8)
;;;327    			{
;;;328    				axis2(2);
;;;329    			}
;;;330    			if (e2 < temp8)
;;;331    			{
;;;332    				axis2(1);
;;;333    			}
;;;334    			if (e2 == temp8)
;;;335    			{
;;;336    				axis2(0);
;;;337    				rab2 = 0;
;;;338    			}
;;;339    			if (error) //Обработка ошибки!!!
;;;340    			{
;;;341    				axis2(0);
;;;342    				rab2 = 0;
;;;343    				error = 0;
;;;344    			}
;;;345    		}
;;;346    
;;;347    		if (rab3)
;;;348    		{
;;;349    			temp8 = ((EncData3>>6) & 0xFF);
;;;350    			//if ((temp8 > 100) || (e3 > 100))
;;;351    			//	{
;;;352    			//		error = 1;
;;;353    			//	}
;;;354    			if(e3 > temp8)
;;;355    			{
;;;356    				axis3(1);
;;;357    			}
;;;358    			if (e3 < temp8)
;;;359    			{
;;;360    				axis3(2);
;;;361    			}
;;;362    			if (e3 == temp8)
;;;363    			{
;;;364    				axis3(0);
;;;365    				rab3 = 0;
;;;366    			}
;;;367    			if (error) //Обработка ошибки!!!
;;;368    			{
;;;369    				axis3(0);
;;;370    				rab3 = 0;
;;;371    				error = 0;
;;;372    			}
;;;373    		}
;;;374    
;;;375    		if (rab4)
;;;376    		{
;;;377    			temp8 = ((EncData4>>4) & 0xFF);
;;;378    			//if ((temp8 > 95) || (e4 > 95))
;;;379    			//	{
;;;380    			//		error = 1;
;;;381    			//	}
;;;382    			if(e4 > temp8)
;;;383    			{
;;;384    				axis4(1);
;;;385    			}
;;;386    			if (e4 < temp8)
;;;387    			{
;;;388    				axis4(2);
;;;389    			}
;;;390    			if (e4 == temp8)
;;;391    			{
;;;392    				axis4(0);
;;;393    				rab4 = 0;
;;;394    			}
;;;395    			if (error) //Обработка ошибки!!!
;;;396    			{
;;;397    				axis4(0);
;;;398    				rab4 = 0;
;;;399    				error = 0;
;;;400    			}
;;;401    		}
;;;402    
;;;403    		if (rab5)
;;;404    		{
;;;405    			temp8 = ((EncData5>>5) & 0xFF);
;;;406    			//if ((temp8 > 100) || (e5 > 100))
;;;407    			//	{
;;;408    			//		error = 1;
;;;409    			//	}
;;;410    			if(e5 > temp8)
;;;411    			{
;;;412    				axis5(1);
;;;413    			}
;;;414    			if (e5 < temp8)
;;;415    			{
;;;416    				axis5(2);
;;;417    			}
;;;418    			if (e5 == temp8)
;;;419    			{
;;;420    				axis5(0);
;;;421    				rab5 = 0;
;;;422    			}
;;;423    			if (error) //Обработка ошибки!!!
;;;424    			{
;;;425    				axis5(0);
;;;426    				rab5 = 0;
;;;427    				error = 0;
;;;428    			}
;;;429    		}
;;;430    
;;;431    		if (rab6)
;;;432    		{
;;;433    			temp8 = ((EncData6>>2) & 0xFF);
;;;434    			//if ((temp8 > 200) || (e6 > 200))
;;;435    			//	{
;;;436    			//		error = 1;
;;;437    			//	}
;;;438    			if(e6 > temp8)
;;;439    			{
;;;440    				claw(2);//закрываем
;;;441    			}
;;;442    			if (e6 < temp8)
;;;443    			{
;;;444    				claw(1);//открываем
;;;445    			}
;;;446    			if (e6 == temp8)
;;;447    			{
;;;448    				claw(0);
;;;449    				rab6 = 0;
;;;450    			}
;;;451    			if (error) //Обработка ошибки!!!
;;;452    			{
;;;453    				claw(0);
;;;454    				rab6 = 0;
;;;455    				error = 0;
;;;456    			}
;;;457    		}
;;;458    
;;;459    							//--debug--	
;;;460    						//	Send_Buffer[0] = (EncData2>>6);//((EncData6>>7) & 0xFF);
;;;461    						//	Send_Buffer[2] = e6;
;;;462    						//	Send_Buffer[3] = monit;
;;;463    							//---------
;;;464    						/*	temp8 = ((EncData1 >> 6) & 0xFF);
;;;465    							if (e1 > ((EncData1 >> 6) & 0xFF))
;;;466    								{
;;;467    									platform(1);
;;;468    								}
;;;469    							else 
;;;470    								{
;;;471    									platform(0);
;;;472    									rab1 = 0;
;;;473    									flg1 = 0;
;;;474    								}
;;;475    						*/	
;;;476    		
;;;477    	//	Receive_Buffer[0] = 0;
;;;478    	//	Receive_Buffer[1] = 0;
;;;479    	//	Receive_Buffer[2] = 0;
;;;480    	//	Receive_Buffer[3] = 0;
;;;481    		
;;;482    		
;;;483    	/*	
;;;484    					
;;;485    	*/	
;;;486    				/* выявление активных двигателей
;;;487    											1: C_10;
;;;488    											2: B_4;
;;;489    											3: D_0;
;;;490    											4: D_3 || D_6;
;;;491    											5: D_6 || D_3;
;;;492    											6: C_9; 
;;;493    				
;;;494    		m1 = GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_10);
;;;495    		m2 = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_4);
;;;496    		m3 = GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_0);
;;;497    		m4 = GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_3);
;;;498    		m5 = GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_6);
;;;499    		m6 = GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_9);
;;;500    */
;;;501    									
;;;502    		switch (flag)
;;;503    				{
;;;504    				case 0: 
;;;505    								flag = 1;
;;;506    								data1_one = ((EncData1>>6) & 0xFF);
;;;507    								data2_one = ((EncData2>>5) & 0xFF);
;;;508    								data3_one = ((EncData3>>6) & 0xFF);
;;;509    								data4_one = ((EncData4>>4) & 0xFF);
;;;510    								data5_one = ((EncData5>>5) & 0xFF);
;;;511    								data6_one = ((EncData6>>2) & 0xFF);
;;;512    								break;
;;;513    				case 1:
;;;514    								if (cnt_base > 50000)
;;;515    									{
;;;516    										cnt_base = 0;
;;;517    										flag = 0;
;;;518    										if (rab1)
;;;519    										{
;;;520    											temp8 = ((EncData1>>6) & 0xFF);
;;;521    											if (e1 != temp8)
;;;522    											{
;;;523    											if (data1_one == ((EncData1>>6) & 0xFF))
;;;524    												{
;;;525    													platform(0);
;;;526    													error = 1;
;;;527    													//flag = 0;
;;;528    													rab1 = 0;
;;;529    												}
;;;530    											}
;;;531    										}
;;;532    
;;;533    										if (rab2)
;;;534    										{
;;;535    											temp8 = ((EncData2>>5) & 0xFF);
;;;536    											if (e2 != temp8)
;;;537    											{
;;;538    											if (data2_one == ((EncData2>>5) & 0xFF))
;;;539    												{
;;;540    													axis2(0);
;;;541    													error = 1;
;;;542    													//flag = 0;
;;;543    													rab2 = 0;
;;;544    												}
;;;545    											}
;;;546    										}
;;;547    
;;;548    										if (rab3)
;;;549    										{
;;;550    											temp8 = ((EncData3>>6) & 0xFF);
;;;551    											if (e3 != temp8)
;;;552    											{
;;;553    											if (data3_one == ((EncData3>>6) & 0xFF))
;;;554    												{
;;;555    													axis3(0);
;;;556    													error = 1;
;;;557    													//flag = 0;
;;;558    													rab3 = 0;
;;;559    												}
;;;560    											}
;;;561    										}
;;;562    
;;;563    										if (rab4)
;;;564    										{
;;;565    											temp8 = ((EncData4>>4) & 0xFF);
;;;566    											if (e4 != temp8)
;;;567    											{
;;;568    											if (data4_one == ((EncData4>>4) & 0xFF))
;;;569    												{
;;;570    													axis4(0);
;;;571    													error = 1;
;;;572    													//flag = 0;
;;;573    													rab4 = 0;
;;;574    												}
;;;575    											}
;;;576    										}
;;;577    
;;;578    										if (rab5)
;;;579    										{
;;;580    											temp8 = ((EncData5>>5) & 0xFF);
;;;581    											if (e5 != temp8)
;;;582    											{
;;;583    											if (data5_one == ((EncData5>>5) & 0xFF))
;;;584    												{
;;;585    													axis5(0);
;;;586    													error = 1;
;;;587    													//flag = 0;
;;;588    													rab5 = 0;
;;;589    												}
;;;590    											}
;;;591    										}
;;;592    
;;;593    										if (rab6)
;;;594    										{
;;;595    											temp8 = ((EncData6>>2) & 0xFF);
;;;596    											if (e6 != temp8)
;;;597    											{
;;;598    											if (data6_one == ((EncData6>>2) & 0xFF))
;;;599    												{
;;;600    													claw(0);
;;;601    													error = 1;
;;;602    													//flag = 0;
;;;603    													rab6 = 0;
;;;604    												}
;;;605    											}
;;;606    										}
;;;607    
;;;608    
;;;609    									}//end if cnt_base
;;;610    								else
;;;611    									{
;;;612    										cnt_base++;
;;;613    									}
;;;614    					}//end switch
;;;615    			
;;;616    /*	}//END if ERROR	
;;;617    //	else //если ошибка -- выводим 40 40 40
;;;618    //	{
;;;619    		platform(0);
;;;620    		axis2(0);
;;;621    		axis3(0);
;;;622    		axis4(0);
;;;623    		axis5(0);
;;;624    		claw(0);
;;;625    		Send_Buffer[0] = 40;
;;;626    		Send_Buffer[1] = 40;
;;;627    		Send_Buffer[2] = 40;
;;;628    		Send_Buffer[3] = 40;
;;;629    		mail = 1;
;;;630    	}	*/				
;;;631    		//	Receive_Buffer[1] = 0;
;;;632    
;;;633    
;;;634    				
;;;635        if (bDeviceState == CONFIGURED)
;;;636        {
;;;637          CDC_Receive_DATA();
;;;638    			
;;;639    			if (Receive_Buffer[0]==0) // установка нулей, установление центаральных положений счетчиков
;;;640                {
;;;641    							//---DEBUG-------
;;;642    							//		platform(0);
;;;643    							//		axis2(0);
;;;644    							//		axis3(0);
;;;645    							//		axis4(0);
;;;646    							//		axis5(0);
;;;647    							//		claw(0);
;;;648    							
;;;649    							//---------------
;;;650    							//		Send_Buffer[0] = 0;//обнуляем буфер отправки данных
;;;651    							//		Send_Buffer[1] = 0;
;;;652    							//		Send_Buffer[2] = 0;
;;;653    							//		Send_Buffer[3] = 0;
;;;654    				switch (Receive_Buffer[1])
;;;655    					{
;;;656    										case 1: 
;;;657    												Send_Buffer[0] = ((EncData1 >> 6) & 0xFF);
000014  f8df93f0          LDR      r9,|L12.1032|
000018  4ffa              LDR      r7,|L12.1028|
00001a  2601              MOVS     r6,#1                 ;300
00001c  f8df83ec          LDR      r8,|L12.1036|
;;;658    												Send_Buffer[1] = 180;
;;;659    												mail = 1;
;;;660    												break;
;;;661    										case 2: Send_Buffer[0] = ((EncData2 >> 5) & 0xFF);
;;;662    												Send_Buffer[1] = 160;
;;;663    												mail = 1;
;;;664    												break;
;;;665    										case 3: Send_Buffer[0] = ((EncData3 >> 6) & 0xFF);
;;;666    												Send_Buffer[1] = 110;
;;;667    												mail = 1;
;;;668    												break;
;;;669    										case 4: Send_Buffer[0] = ((EncData4 >> 4) & 0xFF);
;;;670    												Send_Buffer[1] = 80;
;;;671    												mail = 1;
;;;672    												break;
;;;673    										case 5: Send_Buffer[0] = ((EncData5 >> 5) & 0xFF);
;;;674    												Send_Buffer[1] = 250;
;;;675    												mail = 1;
;;;676    												break;
;;;677    										case 6: Send_Buffer[0] = ((EncData6 >> 2) & 0xFF);
;;;678    												Send_Buffer[1] = 200;
;;;679    												mail = 1;
;;;680    												break;
;;;681    										case 7: //error = 0;
;;;682    							                   	platform(0);
;;;683    												axis2(0);
;;;684    												axis3(0);
;;;685    												axis4(0);
;;;686    												axis5(0);
;;;687    												claw(0);
;;;688    												Send_Buffer[0] = 0;
;;;689    												Send_Buffer[1] = 0;
;;;690    												//Send_Buffer[2] = 0;
;;;691    												//Send_Buffer[3] = 0;
;;;692    
;;;693    										default:;
;;;694    					}
;;;695    
;;;696                }
;;;697        }//end #0
;;;698          
;;;699    //****** запись -- номер мотора 					
;;;700    								
;;;701          if (Receive_Buffer[0] == 1) 
;;;702                {
;;;703    //            	error = 0;
;;;704                  	switch (Receive_Buffer[1])
;;;705    							{
;;;706    								case 0: 
;;;707    													 rab1 = 0;
;;;708    													 rab2 = 0;
;;;709    													 rab3 = 0;
;;;710    													 rab4 = 0;
;;;711    													 rab5 = 0;
;;;712    													 rab6 = 0;
;;;713    													 platform(0);
;;;714    													 axis2(0);
;;;715    													 axis3(0);
;;;716    													 axis4(0);
;;;717    													 axis5(0);
;;;718    													 claw(0);
;;;719    													 break;
;;;720    								
;;;721    								case 1:
;;;722    													if (!rab1)
;;;723    												  	{													
;;;724    														rab1 = 1;
;;;725    														// platform(2);
;;;726    														e1 = Receive_Buffer[2];//запоминаем угол 
;;;727    													}
;;;728    													break;
;;;729    								
;;;730    								/*case 11:
;;;731    												if (!rab1)
;;;732    												  {
;;;733    													rab1 = 2;
;;;734    													// platform(1);
;;;735    													Receive_Buffer[2] = e1;//запоминаем угол
;;;736    		  										  } 
;;;737    												break;
;;;738    								*/
;;;739    								case 2:
;;;740    													if (!rab2)
;;;741    												  	{													
;;;742    														rab2 = 1;
;;;743    														e2 = Receive_Buffer[2];//запоминаем угол 
;;;744    													} 
;;;745    													// axis2(2);
;;;746    													 break;
;;;747    								/*
;;;748    								case 22:
;;;749    													 axis2(1);
;;;750    													 break;
;;;751    								*/
;;;752    								case 3:
;;;753    													if (!rab3)
;;;754    												  	{													
;;;755    														rab3 = 1;
;;;756    														e3 = Receive_Buffer[2];//запоминаем угол 
;;;757    													}
;;;758    													 //axis3(2);
;;;759    													 break;
;;;760    								
;;;761    								/*case 33:
;;;762    													 axis3(1);
;;;763    													 break;
;;;764    								*/
;;;765    								case 4:
;;;766    													if (!rab4)
;;;767    												  	{													
;;;768    														rab4 = 1;
;;;769    														e4 = Receive_Buffer[2];//запоминаем угол 
;;;770    													}
;;;771    													 //axis4(2);
;;;772    													 break;
;;;773    								
;;;774    								/*case 44:
;;;775    													 axis4(1);
;;;776    													 break;
;;;777    								*/
;;;778    								case 5:
;;;779    													if (!rab5)
;;;780    												  	{													
;;;781    														rab5 = 1;
;;;782    														e5 = Receive_Buffer[2];//запоминаем угол 
;;;783    													}
;;;784    													 //axis5(2);
;;;785    													 break;
;;;786    								
;;;787    								/*case 55:
;;;788    													 axis5(1);
;;;789    													 break;
;;;790    								*/
;;;791    								case 6: 	 //otkrivaetsa
;;;792    													 if (!rab6)
;;;793    												  	{													
;;;794    														rab6 = 1;
;;;795    														e6 = Receive_Buffer[2];//запоминаем угол 
;;;796    													}
;;;797    													 //claw(1);
;;;798    													 break;
;;;799    								default:;
;;;800    								/*case 66:	 //zakrivaetsa
;;;801    													 claw(2);
;;;802    													 break;
;;;803    								*/
;;;804    							}//end switch
;;;805    						}//end if
;;;806    											
;;;807          /*Check to see if we have data yet */
;;;808          if (mail && (Receive_length  != 0))
000020  f8dfa3ec          LDR      r10,|L12.1040|
000024  2500              MOVS     r5,#0                 ;639
000026  f1a90438          SUB      r4,r9,#0x38           ;251
                  |L12.42|
00002a  7820              LDRB     r0,[r4,#0]            ;251  ; nozero
00002c  b130              CBZ      r0,|L12.60|
00002e  f7fffffe          BL       zero
000032  f7fffffe          BL       zero
000036  f7fffffe          BL       zero
00003a  7025              STRB     r5,[r4,#0]            ;256
                  |L12.60|
00003c  f7fffffe          BL       EncPlatform
000040  f7fffffe          BL       Enc2
000044  f7fffffe          BL       Enc3
000048  f7fffffe          BL       Enc4
00004c  f7fffffe          BL       Enc5
000050  f7fffffe          BL       EncClaw
000054  8b20              LDRH     r0,[r4,#0x18]         ;273  ; EncData1
000056  f3c01187          UBFX     r1,r0,#6,#8           ;273
00005a  29fa              CMP      r1,#0xfa              ;273
00005c  d901              BLS      |L12.98|
00005e  3040              ADDS     r0,r0,#0x40           ;273
000060  8320              STRH     r0,[r4,#0x18]         ;273
                  |L12.98|
000062  8b60              LDRH     r0,[r4,#0x1a]         ;274  ; EncData2
000064  f3c01147          UBFX     r1,r0,#5,#8           ;274
000068  29fa              CMP      r1,#0xfa              ;274
00006a  d901              BLS      |L12.112|
00006c  3020              ADDS     r0,r0,#0x20           ;274
00006e  8360              STRH     r0,[r4,#0x1a]         ;274
                  |L12.112|
000070  8ba1              LDRH     r1,[r4,#0x1c]         ;275  ; EncData3
000072  f3c11087          UBFX     r0,r1,#6,#8           ;275
000076  28fa              CMP      r0,#0xfa              ;275
000078  d901              BLS      |L12.126|
00007a  3140              ADDS     r1,r1,#0x40           ;275
00007c  83a1              STRH     r1,[r4,#0x1c]         ;275
                  |L12.126|
00007e  8be0              LDRH     r0,[r4,#0x1e]         ;276  ; EncData4
000080  f3c01107          UBFX     r1,r0,#4,#8           ;276
000084  29fa              CMP      r1,#0xfa              ;276
000086  d901              BLS      |L12.140|
000088  3010              ADDS     r0,r0,#0x10           ;276
00008a  83e0              STRH     r0,[r4,#0x1e]         ;276
                  |L12.140|
00008c  8c20              LDRH     r0,[r4,#0x20]         ;277  ; EncData5
00008e  f3c01147          UBFX     r1,r0,#5,#8           ;277
000092  29fa              CMP      r1,#0xfa              ;277
000094  d901              BLS      |L12.154|
000096  3020              ADDS     r0,r0,#0x20           ;277
000098  8420              STRH     r0,[r4,#0x20]         ;277
                  |L12.154|
00009a  8c60              LDRH     r0,[r4,#0x22]         ;278  ; EncData6
00009c  f3c00187          UBFX     r1,r0,#2,#8           ;278
0000a0  29fa              CMP      r1,#0xfa              ;278
0000a2  d901              BLS      |L12.168|
0000a4  1d00              ADDS     r0,r0,#4              ;278
0000a6  8460              STRH     r0,[r4,#0x22]         ;278
                  |L12.168|
0000a8  7860              LDRB     r0,[r4,#1]            ;291  ; rab1
0000aa  b1f8              CBZ      r0,|L12.236|
0000ac  8b20              LDRH     r0,[r4,#0x18]         ;293  ; EncData1
0000ae  f3c01087          UBFX     r0,r0,#6,#8           ;293
0000b2  75e0              STRB     r0,[r4,#0x17]         ;293
0000b4  8ca1              LDRH     r1,[r4,#0x24]         ;298  ; e1
0000b6  4281              CMP      r1,r0                 ;298
0000b8  d902              BLS      |L12.192|
0000ba  2001              MOVS     r0,#1                 ;300
0000bc  f7fffffe          BL       platform
                  |L12.192|
0000c0  8ca0              LDRH     r0,[r4,#0x24]         ;302  ; e1
0000c2  7de1              LDRB     r1,[r4,#0x17]         ;302  ; temp8
0000c4  4288              CMP      r0,r1                 ;302
0000c6  d202              BCS      |L12.206|
0000c8  2002              MOVS     r0,#2                 ;304
0000ca  f7fffffe          BL       platform
                  |L12.206|
0000ce  8ca0              LDRH     r0,[r4,#0x24]         ;306  ; e1
0000d0  7de1              LDRB     r1,[r4,#0x17]         ;306  ; temp8
0000d2  4288              CMP      r0,r1                 ;306
0000d4  d103              BNE      |L12.222|
0000d6  2000              MOVS     r0,#0                 ;308
0000d8  f7fffffe          BL       platform
0000dc  7065              STRB     r5,[r4,#1]            ;309
                  |L12.222|
0000de  7aa0              LDRB     r0,[r4,#0xa]          ;311  ; error
0000e0  b120              CBZ      r0,|L12.236|
0000e2  2000              MOVS     r0,#0                 ;313
0000e4  f7fffffe          BL       platform
0000e8  7065              STRB     r5,[r4,#1]            ;314
0000ea  72a5              STRB     r5,[r4,#0xa]          ;315
                  |L12.236|
0000ec  78a0              LDRB     r0,[r4,#2]            ;319  ; rab2
0000ee  b1f8              CBZ      r0,|L12.304|
0000f0  8b60              LDRH     r0,[r4,#0x1a]         ;321  ; EncData2
0000f2  f3c01047          UBFX     r0,r0,#5,#8           ;321
0000f6  75e0              STRB     r0,[r4,#0x17]         ;321
0000f8  8ce1              LDRH     r1,[r4,#0x26]         ;326  ; e2
0000fa  4281              CMP      r1,r0                 ;326
0000fc  d902              BLS      |L12.260|
0000fe  2002              MOVS     r0,#2                 ;328
000100  f7fffffe          BL       axis2
                  |L12.260|
000104  8ce0              LDRH     r0,[r4,#0x26]         ;330  ; e2
000106  7de1              LDRB     r1,[r4,#0x17]         ;330  ; temp8
000108  4288              CMP      r0,r1                 ;330
00010a  d202              BCS      |L12.274|
00010c  2001              MOVS     r0,#1                 ;332
00010e  f7fffffe          BL       axis2
                  |L12.274|
000112  8ce0              LDRH     r0,[r4,#0x26]         ;334  ; e2
000114  7de1              LDRB     r1,[r4,#0x17]         ;334  ; temp8
000116  4288              CMP      r0,r1                 ;334
000118  d103              BNE      |L12.290|
00011a  2000              MOVS     r0,#0                 ;336
00011c  f7fffffe          BL       axis2
000120  70a5              STRB     r5,[r4,#2]            ;337
                  |L12.290|
000122  7aa0              LDRB     r0,[r4,#0xa]          ;339  ; error
000124  b120              CBZ      r0,|L12.304|
000126  2000              MOVS     r0,#0                 ;341
000128  f7fffffe          BL       axis2
00012c  70a5              STRB     r5,[r4,#2]            ;342
00012e  72a5              STRB     r5,[r4,#0xa]          ;343
                  |L12.304|
000130  78e0              LDRB     r0,[r4,#3]            ;347  ; rab3
000132  b1f8              CBZ      r0,|L12.372|
000134  8ba0              LDRH     r0,[r4,#0x1c]         ;349  ; EncData3
000136  f3c01087          UBFX     r0,r0,#6,#8           ;349
00013a  75e0              STRB     r0,[r4,#0x17]         ;349
00013c  8d21              LDRH     r1,[r4,#0x28]         ;354  ; e3
00013e  4281              CMP      r1,r0                 ;354
000140  d902              BLS      |L12.328|
000142  2001              MOVS     r0,#1                 ;356
000144  f7fffffe          BL       axis3
                  |L12.328|
000148  8d20              LDRH     r0,[r4,#0x28]         ;358  ; e3
00014a  7de1              LDRB     r1,[r4,#0x17]         ;358  ; temp8
00014c  4288              CMP      r0,r1                 ;358
00014e  d202              BCS      |L12.342|
000150  2002              MOVS     r0,#2                 ;360
000152  f7fffffe          BL       axis3
                  |L12.342|
000156  8d20              LDRH     r0,[r4,#0x28]         ;362  ; e3
000158  7de1              LDRB     r1,[r4,#0x17]         ;362  ; temp8
00015a  4288              CMP      r0,r1                 ;362
00015c  d103              BNE      |L12.358|
00015e  2000              MOVS     r0,#0                 ;364
000160  f7fffffe          BL       axis3
000164  70e5              STRB     r5,[r4,#3]            ;365
                  |L12.358|
000166  7aa0              LDRB     r0,[r4,#0xa]          ;367  ; error
000168  b120              CBZ      r0,|L12.372|
00016a  2000              MOVS     r0,#0                 ;369
00016c  f7fffffe          BL       axis3
000170  70e5              STRB     r5,[r4,#3]            ;370
000172  72a5              STRB     r5,[r4,#0xa]          ;371
                  |L12.372|
000174  7920              LDRB     r0,[r4,#4]            ;375  ; rab4
000176  b1f8              CBZ      r0,|L12.440|
000178  8be0              LDRH     r0,[r4,#0x1e]         ;377  ; EncData4
00017a  f3c01007          UBFX     r0,r0,#4,#8           ;377
00017e  75e0              STRB     r0,[r4,#0x17]         ;377
000180  8d61              LDRH     r1,[r4,#0x2a]         ;382  ; e4
000182  4281              CMP      r1,r0                 ;382
000184  d902              BLS      |L12.396|
000186  2001              MOVS     r0,#1                 ;384
000188  f7fffffe          BL       axis4
                  |L12.396|
00018c  8d60              LDRH     r0,[r4,#0x2a]         ;386  ; e4
00018e  7de1              LDRB     r1,[r4,#0x17]         ;386  ; temp8
000190  4288              CMP      r0,r1                 ;386
000192  d202              BCS      |L12.410|
000194  2002              MOVS     r0,#2                 ;388
000196  f7fffffe          BL       axis4
                  |L12.410|
00019a  8d60              LDRH     r0,[r4,#0x2a]         ;390  ; e4
00019c  7de1              LDRB     r1,[r4,#0x17]         ;390  ; temp8
00019e  4288              CMP      r0,r1                 ;390
0001a0  d103              BNE      |L12.426|
0001a2  2000              MOVS     r0,#0                 ;392
0001a4  f7fffffe          BL       axis4
0001a8  7125              STRB     r5,[r4,#4]            ;393
                  |L12.426|
0001aa  7aa0              LDRB     r0,[r4,#0xa]          ;395  ; error
0001ac  b120              CBZ      r0,|L12.440|
0001ae  2000              MOVS     r0,#0                 ;397
0001b0  f7fffffe          BL       axis4
0001b4  7125              STRB     r5,[r4,#4]            ;398
0001b6  72a5              STRB     r5,[r4,#0xa]          ;399
                  |L12.440|
0001b8  7960              LDRB     r0,[r4,#5]            ;403  ; rab5
0001ba  b1f8              CBZ      r0,|L12.508|
0001bc  8c20              LDRH     r0,[r4,#0x20]         ;405  ; EncData5
0001be  f3c01047          UBFX     r0,r0,#5,#8           ;405
0001c2  75e0              STRB     r0,[r4,#0x17]         ;405
0001c4  8da1              LDRH     r1,[r4,#0x2c]         ;410  ; e5
0001c6  4281              CMP      r1,r0                 ;410
0001c8  d902              BLS      |L12.464|
0001ca  2001              MOVS     r0,#1                 ;412
0001cc  f7fffffe          BL       axis5
                  |L12.464|
0001d0  8da0              LDRH     r0,[r4,#0x2c]         ;414  ; e5
0001d2  7de1              LDRB     r1,[r4,#0x17]         ;414  ; temp8
0001d4  4288              CMP      r0,r1                 ;414
0001d6  d202              BCS      |L12.478|
0001d8  2002              MOVS     r0,#2                 ;416
0001da  f7fffffe          BL       axis5
                  |L12.478|
0001de  8da0              LDRH     r0,[r4,#0x2c]         ;418  ; e5
0001e0  7de1              LDRB     r1,[r4,#0x17]         ;418  ; temp8
0001e2  4288              CMP      r0,r1                 ;418
0001e4  d103              BNE      |L12.494|
0001e6  2000              MOVS     r0,#0                 ;420
0001e8  f7fffffe          BL       axis5
0001ec  7165              STRB     r5,[r4,#5]            ;421
                  |L12.494|
0001ee  7aa0              LDRB     r0,[r4,#0xa]          ;423  ; error
0001f0  b120              CBZ      r0,|L12.508|
0001f2  2000              MOVS     r0,#0                 ;425
0001f4  f7fffffe          BL       axis5
0001f8  7165              STRB     r5,[r4,#5]            ;426
0001fa  72a5              STRB     r5,[r4,#0xa]          ;427
                  |L12.508|
0001fc  79a0              LDRB     r0,[r4,#6]            ;431  ; rab6
0001fe  b1f8              CBZ      r0,|L12.576|
000200  8c60              LDRH     r0,[r4,#0x22]         ;433  ; EncData6
000202  f3c00087          UBFX     r0,r0,#2,#8           ;433
000206  75e0              STRB     r0,[r4,#0x17]         ;433
000208  8de1              LDRH     r1,[r4,#0x2e]         ;438  ; e6
00020a  4281              CMP      r1,r0                 ;438
00020c  d902              BLS      |L12.532|
00020e  2002              MOVS     r0,#2                 ;440
000210  f7fffffe          BL       claw
                  |L12.532|
000214  8de0              LDRH     r0,[r4,#0x2e]         ;442  ; e6
000216  7de1              LDRB     r1,[r4,#0x17]         ;442  ; temp8
000218  4288              CMP      r0,r1                 ;442
00021a  d202              BCS      |L12.546|
00021c  2001              MOVS     r0,#1                 ;444
00021e  f7fffffe          BL       claw
                  |L12.546|
000222  8de0              LDRH     r0,[r4,#0x2e]         ;446  ; e6
000224  7de1              LDRB     r1,[r4,#0x17]         ;446  ; temp8
000226  4288              CMP      r0,r1                 ;446
000228  d103              BNE      |L12.562|
00022a  2000              MOVS     r0,#0                 ;448
00022c  f7fffffe          BL       claw
000230  71a5              STRB     r5,[r4,#6]            ;449
                  |L12.562|
000232  7aa0              LDRB     r0,[r4,#0xa]          ;451  ; error
000234  b120              CBZ      r0,|L12.576|
000236  2000              MOVS     r0,#0                 ;453
000238  f7fffffe          BL       claw
00023c  71a5              STRB     r5,[r4,#6]            ;454
00023e  72a5              STRB     r5,[r4,#0xa]          ;455
                  |L12.576|
000240  7a60              LDRB     r0,[r4,#9]            ;502  ; flag
000242  b110              CBZ      r0,|L12.586|
000244  2801              CMP      r0,#1                 ;502
000246  d113              BNE      |L12.624|
000248  e013              B        |L12.626|
                  |L12.586|
00024a  7266              STRB     r6,[r4,#9]            ;505
00024c  8b20              LDRH     r0,[r4,#0x18]         ;506  ; EncData1
00024e  0980              LSRS     r0,r0,#6              ;506
000250  72e0              STRB     r0,[r4,#0xb]          ;506
000252  8b60              LDRH     r0,[r4,#0x1a]         ;507  ; EncData2
000254  0940              LSRS     r0,r0,#5              ;507
000256  7320              STRB     r0,[r4,#0xc]          ;507
000258  8ba0              LDRH     r0,[r4,#0x1c]         ;508  ; EncData3
00025a  0980              LSRS     r0,r0,#6              ;508
00025c  7360              STRB     r0,[r4,#0xd]          ;508
00025e  8be0              LDRH     r0,[r4,#0x1e]         ;509  ; EncData4
000260  0900              LSRS     r0,r0,#4              ;509
000262  73a0              STRB     r0,[r4,#0xe]          ;509
000264  8c20              LDRH     r0,[r4,#0x20]         ;510  ; EncData5
000266  0940              LSRS     r0,r0,#5              ;510
000268  73e0              STRB     r0,[r4,#0xf]          ;510
00026a  8c60              LDRH     r0,[r4,#0x22]         ;511  ; EncData6
00026c  0880              LSRS     r0,r0,#2              ;511
00026e  7420              STRB     r0,[r4,#0x10]         ;511
                  |L12.624|
000270  e06f              B        |L12.850|
                  |L12.626|
000272  8e20              LDRH     r0,[r4,#0x30]         ;514  ; cnt_base
000274  f24c3150          MOV      r1,#0xc350            ;514
000278  4288              CMP      r0,r1                 ;514
00027a  d968              BLS      |L12.846|
00027c  8625              STRH     r5,[r4,#0x30]         ;516
00027e  7265              STRB     r5,[r4,#9]            ;517
000280  7860              LDRB     r0,[r4,#1]            ;518  ; rab1
000282  b170              CBZ      r0,|L12.674|
000284  8b20              LDRH     r0,[r4,#0x18]         ;520  ; EncData1
000286  f3c01087          UBFX     r0,r0,#6,#8           ;520
00028a  75e0              STRB     r0,[r4,#0x17]         ;520
00028c  8ca1              LDRH     r1,[r4,#0x24]         ;521  ; e1
00028e  4281              CMP      r1,r0                 ;521
000290  d007              BEQ      |L12.674|
000292  7ae1              LDRB     r1,[r4,#0xb]          ;523  ; data1_one
000294  4281              CMP      r1,r0                 ;523
000296  d104              BNE      |L12.674|
000298  2000              MOVS     r0,#0                 ;525
00029a  f7fffffe          BL       platform
00029e  72a6              STRB     r6,[r4,#0xa]          ;526
0002a0  7065              STRB     r5,[r4,#1]            ;528
                  |L12.674|
0002a2  78a0              LDRB     r0,[r4,#2]            ;533  ; rab2
0002a4  b170              CBZ      r0,|L12.708|
0002a6  8b60              LDRH     r0,[r4,#0x1a]         ;535  ; EncData2
0002a8  f3c01047          UBFX     r0,r0,#5,#8           ;535
0002ac  75e0              STRB     r0,[r4,#0x17]         ;535
0002ae  8ce1              LDRH     r1,[r4,#0x26]         ;536  ; e2
0002b0  4281              CMP      r1,r0                 ;536
0002b2  d007              BEQ      |L12.708|
0002b4  7b21              LDRB     r1,[r4,#0xc]          ;538  ; data2_one
0002b6  4281              CMP      r1,r0                 ;538
0002b8  d104              BNE      |L12.708|
0002ba  2000              MOVS     r0,#0                 ;540
0002bc  f7fffffe          BL       axis2
0002c0  72a6              STRB     r6,[r4,#0xa]          ;541
0002c2  70a5              STRB     r5,[r4,#2]            ;543
                  |L12.708|
0002c4  78e0              LDRB     r0,[r4,#3]            ;548  ; rab3
0002c6  b170              CBZ      r0,|L12.742|
0002c8  8ba0              LDRH     r0,[r4,#0x1c]         ;550  ; EncData3
0002ca  f3c01087          UBFX     r0,r0,#6,#8           ;550
0002ce  75e0              STRB     r0,[r4,#0x17]         ;550
0002d0  8d21              LDRH     r1,[r4,#0x28]         ;551  ; e3
0002d2  4281              CMP      r1,r0                 ;551
0002d4  d007              BEQ      |L12.742|
0002d6  7b61              LDRB     r1,[r4,#0xd]          ;553  ; data3_one
0002d8  4281              CMP      r1,r0                 ;553
0002da  d104              BNE      |L12.742|
0002dc  2000              MOVS     r0,#0                 ;555
0002de  f7fffffe          BL       axis3
0002e2  72a6              STRB     r6,[r4,#0xa]          ;556
0002e4  70e5              STRB     r5,[r4,#3]            ;558
                  |L12.742|
0002e6  7920              LDRB     r0,[r4,#4]            ;563  ; rab4
0002e8  b170              CBZ      r0,|L12.776|
0002ea  8be0              LDRH     r0,[r4,#0x1e]         ;565  ; EncData4
0002ec  f3c01007          UBFX     r0,r0,#4,#8           ;565
0002f0  75e0              STRB     r0,[r4,#0x17]         ;565
0002f2  8d61              LDRH     r1,[r4,#0x2a]         ;566  ; e4
0002f4  4281              CMP      r1,r0                 ;566
0002f6  d007              BEQ      |L12.776|
0002f8  7ba1              LDRB     r1,[r4,#0xe]          ;568  ; data4_one
0002fa  4281              CMP      r1,r0                 ;568
0002fc  d104              BNE      |L12.776|
0002fe  2000              MOVS     r0,#0                 ;570
000300  f7fffffe          BL       axis4
000304  72a6              STRB     r6,[r4,#0xa]          ;571
000306  7125              STRB     r5,[r4,#4]            ;573
                  |L12.776|
000308  7960              LDRB     r0,[r4,#5]            ;578  ; rab5
00030a  b170              CBZ      r0,|L12.810|
00030c  8c20              LDRH     r0,[r4,#0x20]         ;580  ; EncData5
00030e  f3c01047          UBFX     r0,r0,#5,#8           ;580
000312  75e0              STRB     r0,[r4,#0x17]         ;580
000314  8da1              LDRH     r1,[r4,#0x2c]         ;581  ; e5
000316  4281              CMP      r1,r0                 ;581
000318  d007              BEQ      |L12.810|
00031a  7be1              LDRB     r1,[r4,#0xf]          ;583  ; data5_one
00031c  4281              CMP      r1,r0                 ;583
00031e  d104              BNE      |L12.810|
000320  2000              MOVS     r0,#0                 ;585
000322  f7fffffe          BL       axis5
000326  72a6              STRB     r6,[r4,#0xa]          ;586
000328  7165              STRB     r5,[r4,#5]            ;588
                  |L12.810|
00032a  79a0              LDRB     r0,[r4,#6]            ;593  ; rab6
00032c  b188              CBZ      r0,|L12.850|
00032e  8c60              LDRH     r0,[r4,#0x22]         ;595  ; EncData6
000330  f3c00087          UBFX     r0,r0,#2,#8           ;595
000334  75e0              STRB     r0,[r4,#0x17]         ;595
000336  8de1              LDRH     r1,[r4,#0x2e]         ;596  ; e6
000338  4281              CMP      r1,r0                 ;596
00033a  d00a              BEQ      |L12.850|
00033c  7c21              LDRB     r1,[r4,#0x10]         ;598  ; data6_one
00033e  4281              CMP      r1,r0                 ;598
000340  d107              BNE      |L12.850|
000342  2000              MOVS     r0,#0                 ;600
000344  f7fffffe          BL       claw
000348  72a6              STRB     r6,[r4,#0xa]          ;601
00034a  71a5              STRB     r5,[r4,#6]            ;603
00034c  e001              B        |L12.850|
                  |L12.846|
00034e  1c40              ADDS     r0,r0,#1              ;603
000350  8620              STRH     r0,[r4,#0x30]         ;612
                  |L12.850|
000352  6838              LDR      r0,[r7,#0]            ;635  ; bDeviceState
000354  2805              CMP      r0,#5                 ;635
000356  d14b              BNE      |L12.1008|
000358  f7fffffe          BL       CDC_Receive_DATA
00035c  f8981000          LDRB     r1,[r8,#0]            ;639  ; Receive_Buffer
000360  4640              MOV      r0,r8                 ;639
000362  bb71              CBNZ     r1,|L12.962|
000364  7840              LDRB     r0,[r0,#1]            ;654  ; Receive_Buffer
000366  2808              CMP      r0,#8                 ;654
000368  d242              BCS      |L12.1008|
00036a  e8dff000          TBB      [pc,r0]               ;654
00036e  4104              DCB      0x41,0x04
000370  0a10161c          DCB      0x0a,0x10,0x16,0x1c
000374  222b              DCB      0x22,0x2b
000376  8b20              LDRH     r0,[r4,#0x18]         ;657  ; EncData1
000378  0981              LSRS     r1,r0,#6              ;657
00037a  f8891000          STRB     r1,[r9,#0]            ;657
00037e  21b4              MOVS     r1,#0xb4              ;658
000380  e01c              B        |L12.956|
000382  8b60              LDRH     r0,[r4,#0x1a]         ;661  ; EncData2
000384  0941              LSRS     r1,r0,#5              ;661
000386  f8891000          STRB     r1,[r9,#0]            ;661
00038a  21a0              MOVS     r1,#0xa0              ;662
00038c  e016              B        |L12.956|
00038e  8ba0              LDRH     r0,[r4,#0x1c]         ;665  ; EncData3
000390  0981              LSRS     r1,r0,#6              ;665
000392  f8891000          STRB     r1,[r9,#0]            ;665
000396  216e              MOVS     r1,#0x6e              ;666
000398  e010              B        |L12.956|
00039a  8be0              LDRH     r0,[r4,#0x1e]         ;669  ; EncData4
00039c  0901              LSRS     r1,r0,#4              ;669
00039e  f8891000          STRB     r1,[r9,#0]            ;669
0003a2  2150              MOVS     r1,#0x50              ;670
0003a4  e00a              B        |L12.956|
0003a6  8c20              LDRH     r0,[r4,#0x20]         ;673  ; EncData5
0003a8  0941              LSRS     r1,r0,#5              ;673
0003aa  f8891000          STRB     r1,[r9,#0]            ;673
0003ae  21fa              MOVS     r1,#0xfa              ;674
0003b0  e004              B        |L12.956|
0003b2  8c60              LDRH     r0,[r4,#0x22]         ;677  ; EncData6
0003b4  0881              LSRS     r1,r0,#2              ;677
0003b6  f8891000          STRB     r1,[r9,#0]            ;677
0003ba  21c8              MOVS     r1,#0xc8              ;678
                  |L12.956|
0003bc  f8891001          STRB     r1,[r9,#1]            ;678
0003c0  71e6              STRB     r6,[r4,#7]            ;679
                  |L12.962|
0003c2  e015              B        |L12.1008|
0003c4  2000              MOVS     r0,#0                 ;682
0003c6  f7fffffe          BL       platform
0003ca  2000              MOVS     r0,#0                 ;683
0003cc  f7fffffe          BL       axis2
0003d0  2000              MOVS     r0,#0                 ;684
0003d2  f7fffffe          BL       axis3
0003d6  2000              MOVS     r0,#0                 ;685
0003d8  f7fffffe          BL       axis4
0003dc  2000              MOVS     r0,#0                 ;686
0003de  f7fffffe          BL       axis5
0003e2  2000              MOVS     r0,#0                 ;687
0003e4  f7fffffe          BL       claw
0003e8  f8895000          STRB     r5,[r9,#0]            ;688
0003ec  f8895001          STRB     r5,[r9,#1]            ;689
                  |L12.1008|
0003f0  f8981000          LDRB     r1,[r8,#0]            ;701  ; Receive_Buffer
0003f4  4640              MOV      r0,r8                 ;701
0003f6  2901              CMP      r1,#1                 ;701
0003f8  d14e              BNE      |L12.1176|
0003fa  7841              LDRB     r1,[r0,#1]            ;704  ; Receive_Buffer
0003fc  2907              CMP      r1,#7                 ;704
0003fe  d24b              BCS      |L12.1176|
000400  e008              B        |L12.1044|
000402  0000              DCW      0x0000
                  |L12.1028|
                          DCD      bDeviceState
                  |L12.1032|
                          DCD      ||area_number.19||+0x38
                  |L12.1036|
                          DCD      Receive_Buffer
                  |L12.1040|
                          DCD      Receive_length
                  |L12.1044|
000414  e8dff001          TBB      [pc,r1]               ;704
000418  041d2329          DCB      0x04,0x1d,0x23,0x29
00041c  2f353b00          DCB      0x2f,0x35,0x3b,0x00
000420  7065              STRB     r5,[r4,#1]            ;707
000422  70a5              STRB     r5,[r4,#2]            ;708
000424  70e5              STRB     r5,[r4,#3]            ;709
000426  7125              STRB     r5,[r4,#4]            ;710
000428  7165              STRB     r5,[r4,#5]            ;711
00042a  71a5              STRB     r5,[r4,#6]            ;712
00042c  2000              MOVS     r0,#0                 ;713
00042e  f7fffffe          BL       platform
000432  2000              MOVS     r0,#0                 ;714
000434  f7fffffe          BL       axis2
000438  2000              MOVS     r0,#0                 ;715
00043a  f7fffffe          BL       axis3
00043e  2000              MOVS     r0,#0                 ;716
000440  f7fffffe          BL       axis4
000444  2000              MOVS     r0,#0                 ;717
000446  f7fffffe          BL       axis5
00044a  2000              MOVS     r0,#0                 ;718
00044c  f7fffffe          BL       claw
000450  e022              B        |L12.1176|
000452  7861              LDRB     r1,[r4,#1]            ;722  ; rab1
000454  bb01              CBNZ     r1,|L12.1176|
000456  7066              STRB     r6,[r4,#1]            ;724
000458  7880              LDRB     r0,[r0,#2]            ;726  ; Receive_Buffer
00045a  84a0              STRH     r0,[r4,#0x24]         ;726
00045c  e01c              B        |L12.1176|
00045e  78a1              LDRB     r1,[r4,#2]            ;740  ; rab2
000460  b9d1              CBNZ     r1,|L12.1176|
000462  70a6              STRB     r6,[r4,#2]            ;742
000464  7880              LDRB     r0,[r0,#2]            ;743  ; Receive_Buffer
000466  84e0              STRH     r0,[r4,#0x26]         ;743
000468  e016              B        |L12.1176|
00046a  78e1              LDRB     r1,[r4,#3]            ;753  ; rab3
00046c  b9a1              CBNZ     r1,|L12.1176|
00046e  70e6              STRB     r6,[r4,#3]            ;755
000470  7880              LDRB     r0,[r0,#2]            ;756  ; Receive_Buffer
000472  8520              STRH     r0,[r4,#0x28]         ;756
000474  e010              B        |L12.1176|
000476  7921              LDRB     r1,[r4,#4]            ;766  ; rab4
000478  b971              CBNZ     r1,|L12.1176|
00047a  7126              STRB     r6,[r4,#4]            ;768
00047c  7880              LDRB     r0,[r0,#2]            ;769  ; Receive_Buffer
00047e  8560              STRH     r0,[r4,#0x2a]         ;769
000480  e00a              B        |L12.1176|
000482  7961              LDRB     r1,[r4,#5]            ;779  ; rab5
000484  b941              CBNZ     r1,|L12.1176|
000486  7166              STRB     r6,[r4,#5]            ;781
000488  7880              LDRB     r0,[r0,#2]            ;782  ; Receive_Buffer
00048a  85a0              STRH     r0,[r4,#0x2c]         ;782
00048c  e004              B        |L12.1176|
00048e  79a1              LDRB     r1,[r4,#6]            ;792  ; rab6
000490  b911              CBNZ     r1,|L12.1176|
000492  71a6              STRB     r6,[r4,#6]            ;794
000494  7880              LDRB     r0,[r0,#2]            ;795  ; Receive_Buffer
000496  85e0              STRH     r0,[r4,#0x2e]         ;795
                  |L12.1176|
000498  79e0              LDRB     r0,[r4,#7]  ; mail
00049a  2800              CMP      r0,#0
                  |L12.1180|
00049c  f43fadc5          BEQ      |L12.42|
0004a0  f8da0000          LDR      r0,[r10,#0]  ; Receive_length
0004a4  2800              CMP      r0,#0
0004a6  d0f9              BEQ      |L12.1180|
;;;809          {
;;;810    		if (packet_sent == 1)
0004a8  6b60              LDR      r0,[r4,#0x34]  ; packet_sent
0004aa  2801              CMP      r0,#1
0004ac  d103              BNE      |L12.1206|
;;;811              CDC_Send_DATA (Send_Buffer, 2); //Receive_length);
0004ae  2102              MOVS     r1,#2
0004b0  4803              LDR      r0,|L12.1216|
0004b2  f7fffffe          BL       CDC_Send_DATA
                  |L12.1206|
;;;812            Receive_length = 0;
0004b6  f8ca5000          STR      r5,[r10,#0]  ; Receive_length
;;;813            mail = 0;
0004ba  71e5              STRB     r5,[r4,#7]
0004bc  e5b5              B        |L12.42|
;;;814          }
;;;815    					
;;;816    			
;;;817        }//end if (bDeviceState == CONFIGURED)
;;;818      }//end while
;;;819     
                          ENDP

0004be  0000              DCW      0x0000
                  |L12.1216|
                          DCD      ||area_number.19||+0x38

                          AREA ||i.platform||, CODE, READONLY, ALIGN=2

                  platform PROC
;;;964    //OK 2 -- по часовой, 1 -- против часовой, 0 -- стоп
;;;965    void platform(uint8_t x){
000000  b530              PUSH     {r4,r5,lr}
;;;966    	
;;;967    		switch (x)
;;;968    			{
;;;969    			case 0:
;;;970    					GPIOC->BRR = GPIO_Pin_10; //enabled
000002  f44f6280          MOV      r2,#0x400
;;;971                      	GPIOA->BRR = GPIO_Pin_15; //move
000006  0154              LSLS     r4,r2,#5
000008  f04f4190          MOV      r1,#0x48000000
;;;972                      	GPIOA->BRR = GPIO_Pin_14;
00000c  0113              LSLS     r3,r2,#4
00000e  b140              CBZ      r0,|L13.34|
;;;973    					break;
;;;974    			
;;;975    			case 1:
;;;976    					GPIOC->BSRR = GPIO_Pin_10; //enabled
000010  4d08              LDR      r5,|L13.52|
000012  2801              CMP      r0,#1                 ;967
000014  d00a              BEQ      |L13.44|
000016  2802              CMP      r0,#2                 ;967
000018  d102              BNE      |L13.32|
;;;977                      	GPIOA->BSRR = GPIO_Pin_15; //move
;;;978                      	GPIOA->BRR = GPIO_Pin_14;
;;;979    					break;
;;;980    					 
;;;981    			case 2:
;;;982    					GPIOC->BSRR = GPIO_Pin_10; //enabled
00001a  602a              STR      r2,[r5,#0]
;;;983                      	GPIOA->BSRR = GPIO_Pin_14; //move
00001c  618b              STR      r3,[r1,#0x18]
;;;984                      	GPIOA->BRR = GPIO_Pin_15;
00001e  850c              STRH     r4,[r1,#0x28]
                  |L13.32|
;;;985    					break;
;;;986    			}			
;;;987    }
000020  bd30              POP      {r4,r5,pc}
                  |L13.34|
000022  4804              LDR      r0,|L13.52|
000024  3010              ADDS     r0,r0,#0x10           ;970
000026  8002              STRH     r2,[r0,#0]            ;970
000028  850c              STRH     r4,[r1,#0x28]         ;971
00002a  e001              B        |L13.48|
                  |L13.44|
00002c  602a              STR      r2,[r5,#0]            ;976
00002e  618c              STR      r4,[r1,#0x18]         ;977
                  |L13.48|
000030  850b              STRH     r3,[r1,#0x28]         ;978
000032  bd30              POP      {r4,r5,pc}
;;;988    
                          ENDP

                  |L13.52|
                          DCD      0x48000818

                          AREA ||i.zero||, CODE, READONLY, ALIGN=2

                  zero PROC
;;;822    //функция установки нулей
;;;823    void zero (void) //pfgecrfnm 2-3 раза
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;824    {
;;;825    		uint8_t p = 0;
000004  f04f0900          MOV      r9,#0
;;;826    		uint16_t cnt_dick = 0;
000008  464d              MOV      r5,r9
;;;827    		uint8_t dick = 1; //для нулей
00000a  2601              MOVS     r6,#1
;;;828    		uint8_t cl = 0;
;;;829    	//	uint8_t p1 = 0;
;;;830    		uint8_t cn1 = 0;
;;;831    		
;;;832    	//	platform(2);//двигаем тему) 
;;;833    	//	axis2(1);
;;;834    	//	axis3(2);
;;;835    	//	axis4(2);
;;;836    	//	axis5(2);
;;;837    	//	claw(1);
;;;838    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_10))
;;;839    	{
;;;840    		axis2(1);
;;;841    
;;;842    		if (!GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_9))
;;;843    		{	
;;;844    			axis2(0);
;;;845    			EncData3 = 0;
;;;846    			while (EncData3 != ((0x28<<6) & 0xFFFF))
00000c  f44f6b20          MOV      r11,#0xa00
000010  f8df8180          LDR      r8,|L14.404|
000014  46ca              MOV      r10,r9                ;845
000016  e01a              B        |L14.78|
                  |L14.24|
000018  2001              MOVS     r0,#1                 ;840
00001a  f7fffffe          BL       axis2
00001e  f44f7100          MOV      r1,#0x200             ;842
000022  4620              MOV      r0,r4                 ;842
000024  f7fffffe          BL       GPIO_ReadInputDataBit
000028  b988              CBNZ     r0,|L14.78|
00002a  2000              MOVS     r0,#0                 ;844
00002c  f7fffffe          BL       axis2
000030  4644              MOV      r4,r8                 ;845
000032  f8a8a01c          STRH     r10,[r8,#0x1c]        ;845
000036  465f              MOV      r7,r11
                  |L14.56|
;;;847    				{
;;;848    					Enc3();
000038  f7fffffe          BL       Enc3
;;;849    					axis3(1);
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       axis3
000042  8ba0              LDRH     r0,[r4,#0x1c]         ;846  ; EncData3
000044  42b8              CMP      r0,r7                 ;846
000046  d1f7              BNE      |L14.56|
;;;850    				}
;;;851    			axis3(0);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       axis3
                  |L14.78|
00004e  4c52              LDR      r4,|L14.408|
000050  f44f6180          MOV      r1,#0x400             ;838
000054  4620              MOV      r0,r4                 ;838
000056  f7fffffe          BL       GPIO_ReadInputDataBit
00005a  2800              CMP      r0,#0                 ;838
00005c  d1dc              BNE      |L14.24|
;;;852    		}
;;;853    	}
;;;854    	axis2(0);
00005e  f7fffffe          BL       axis2
;;;855    	EncData2 = 0;
000062  4657              MOV      r7,r10
000064  f8a8a01a          STRH     r10,[r8,#0x1a]
;;;856    
;;;857    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_14))
000068  f44f4a80          MOV      r10,#0x4000
00006c  e002              B        |L14.116|
                  |L14.110|
;;;858    	{
;;;859    		axis5(2);
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       axis5
                  |L14.116|
000074  4651              MOV      r1,r10                ;857
000076  4620              MOV      r0,r4                 ;857
000078  f7fffffe          BL       GPIO_ReadInputDataBit
00007c  2800              CMP      r0,#0                 ;857
00007e  d1f6              BNE      |L14.110|
;;;860    	}
;;;861    	axis5(0);
000080  f7fffffe          BL       axis5
;;;862    	EncData5 = 0;
000084  46ba              MOV      r10,r7
000086  f8a87020          STRH     r7,[r8,#0x20]
;;;863    
;;;864    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_8))
;;;865    	{
;;;866    		axis4(2);
;;;867    		if (!GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_8)){
00008a  f44f7780          MOV      r7,#0x100
00008e  e00e              B        |L14.174|
                  |L14.144|
000090  2002              MOVS     r0,#2                 ;866
000092  f7fffffe          BL       axis4
000096  4639              MOV      r1,r7
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       GPIO_ReadInputDataBit
00009e  b930              CBNZ     r0,|L14.174|
;;;868    			cn1 = 10;
0000a0  200a              MOVS     r0,#0xa
                  |L14.162|
0000a2  1e40              SUBS     r0,r0,#1
;;;869    			while (cn1>0){cn1--;}
0000a4  f01000ff          ANDS     r0,r0,#0xff
0000a8  d1fb              BNE      |L14.162|
;;;870    			axis4(0);}
0000aa  f7fffffe          BL       axis4
                  |L14.174|
0000ae  4639              MOV      r1,r7                 ;864
0000b0  4620              MOV      r0,r4                 ;864
0000b2  f7fffffe          BL       GPIO_ReadInputDataBit
0000b6  2800              CMP      r0,#0                 ;864
0000b8  d1ea              BNE      |L14.144|
;;;871    	}
;;;872    	axis4(0);
0000ba  f7fffffe          BL       axis4
;;;873    	EncData4 = 0;
0000be  4647              MOV      r7,r8
0000c0  f8a8a01e          STRH     r10,[r8,#0x1e]
0000c4  f44f7800          MOV      r8,#0x200             ;842
;;;874    
;;;875    	/*
;;;876    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_8))
;;;877    	{
;;;878    		axis4(2);
;;;879    	}
;;;880    	axis4(0);
;;;881    	EncData4 = 0;
;;;882    */
;;;883    	
;;;884    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_9))
0000c8  e002              B        |L14.208|
                  |L14.202|
;;;885    	{
;;;886    		axis3(2);
0000ca  2002              MOVS     r0,#2
0000cc  f7fffffe          BL       axis3
                  |L14.208|
0000d0  4641              MOV      r1,r8                 ;884
0000d2  4620              MOV      r0,r4                 ;884
0000d4  f7fffffe          BL       GPIO_ReadInputDataBit
0000d8  2800              CMP      r0,#0                 ;884
0000da  d1f6              BNE      |L14.202|
;;;887    	}
;;;888    	axis3(0);
0000dc  f7fffffe          BL       axis3
;;;889    	EncData3 = ((0x28<<6) & 0xFFFF); //40
0000e0  f8a7b01c          STRH     r11,[r7,#0x1c]
;;;890    
;;;891    	while (GPIO_ReadInputDataBit (GPIOD, GPIO_Pin_11)) // кнопка платформы
;;;892    	{
;;;893    		EncPlatform();
;;;894    
;;;895    		if (!p)
;;;896    		{
;;;897    			platform(2);
;;;898    		}
;;;899    
;;;900    		switch (dick)
;;;901    					{
;;;902    					case 0: 
;;;903    									fll = ((EncData1>>6) & 0xFF);
;;;904    									dick = 1;
;;;905    									break;
;;;906    					case 1:
;;;907    									if (cnt_dick > 50000)
0000e4  f24c3850          MOV      r8,#0xc350
0000e8  f44f6b00          MOV      r11,#0x800            ;891
0000ec  e023              B        |L14.310|
0000ee  bf00              NOP                            ;893
                  |L14.240|
0000f0  f7fffffe          BL       EncPlatform
0000f4  f1b90f00          CMP      r9,#0                 ;895
0000f8  d102              BNE      |L14.256|
0000fa  2002              MOVS     r0,#2                 ;897
0000fc  f7fffffe          BL       platform
                  |L14.256|
000100  b116              CBZ      r6,|L14.264|
000102  2e01              CMP      r6,#1                 ;900
000104  d117              BNE      |L14.310|
000106  e004              B        |L14.274|
                  |L14.264|
000108  8b38              LDRH     r0,[r7,#0x18]         ;903  ; EncData1
00010a  0980              LSRS     r0,r0,#6              ;903
00010c  7238              STRB     r0,[r7,#8]            ;903
00010e  2601              MOVS     r6,#1                 ;904
000110  e011              B        |L14.310|
                  |L14.274|
000112  4545              CMP      r5,r8
000114  d90d              BLS      |L14.306|
;;;908    										{
;;;909    											cnt_dick = 0;
;;;910    											dick = 0;
;;;911    											
;;;912    											if (fll == ((EncData1>>6) & 0xFF))
000116  8b39              LDRH     r1,[r7,#0x18]  ; EncData1
000118  2500              MOVS     r5,#0                 ;909
00011a  7a38              LDRB     r0,[r7,#8]  ; fll
00011c  f3c11187          UBFX     r1,r1,#6,#8
000120  462e              MOV      r6,r5                 ;910
000122  4288              CMP      r0,r1
000124  d107              BNE      |L14.310|
;;;913    											{
;;;914    												platform(1);
000126  2001              MOVS     r0,#1
000128  f7fffffe          BL       platform
;;;915    												p = 1;
00012c  f04f0901          MOV      r9,#1
000130  e001              B        |L14.310|
                  |L14.306|
000132  1c6d              ADDS     r5,r5,#1
;;;916    											}
;;;917    										}
;;;918    									else
;;;919    										{
;;;920    											cnt_dick++;
000134  b2ad              UXTH     r5,r5
                  |L14.310|
000136  4659              MOV      r1,r11                ;891
000138  4620              MOV      r0,r4                 ;891
00013a  f7fffffe          BL       GPIO_ReadInputDataBit
00013e  2800              CMP      r0,#0                 ;891
000140  d1d6              BNE      |L14.240|
;;;921    										}
;;;922    					}
;;;923    	}	
;;;924    	platform(0);
000142  f7fffffe          BL       platform
;;;925    	EncData1 = ((0x55<<6) & 0xFFFF); // 85 сдвигаем влево на 6! или 120??!!
000146  f44f50aa          MOV      r0,#0x1540
;;;926    	dick = 0;
00014a  2500              MOVS     r5,#0
00014c  8338              STRH     r0,[r7,#0x18]         ;925
;;;927    	cnt_dick = 0;
00014e  462c              MOV      r4,r5
                  |L14.336|
;;;928    
;;;929    	while (!cl)
;;;930    	{
;;;931    		EncClaw();
000150  f7fffffe          BL       EncClaw
;;;932    		claw(1);
000154  2001              MOVS     r0,#1
000156  f7fffffe          BL       claw
;;;933    
;;;934    		switch (dick)
00015a  b195              CBZ      r5,|L14.386|
00015c  2d01              CMP      r5,#1
00015e  d1f7              BNE      |L14.336|
;;;935    					{
;;;936    					case 0: 
;;;937    									fll = ((EncData6>>2) & 0xFF);
;;;938    									dick = 1;
;;;939    									break;
;;;940    					case 1:
;;;941    									if (cnt_dick > 50000)
000160  4544              CMP      r4,r8
000162  d913              BLS      |L14.396|
;;;942    										{
;;;943    											cnt_dick = 0;
;;;944    											dick = 0;
;;;945    											
;;;946    											if (fll == ((EncData6>>2) & 0xFF))
000164  8c79              LDRH     r1,[r7,#0x22]  ; EncData6
000166  2400              MOVS     r4,#0                 ;943
000168  7a38              LDRB     r0,[r7,#8]  ; fll
00016a  f3c10187          UBFX     r1,r1,#2,#8
00016e  4625              MOV      r5,r4                 ;944
000170  4288              CMP      r0,r1
000172  d1ed              BNE      |L14.336|
;;;947    											{
;;;948    												cl = 1;
;;;949    											}
;;;950    										}
;;;951    									else
;;;952    										{
;;;953    											cnt_dick++;
;;;954    										}
;;;955    					}
;;;956    	}	
;;;957    	claw(0);
000174  2000              MOVS     r0,#0
000176  f7fffffe          BL       claw
;;;958    	EncData6 = 0;
00017a  f8a7a022          STRH     r10,[r7,#0x22]
;;;959    
;;;960    } // end zero(0);
00017e  e8bd9ff0          POP      {r4-r12,pc}
                  |L14.386|
000182  8c78              LDRH     r0,[r7,#0x22]         ;937  ; EncData6
000184  0880              LSRS     r0,r0,#2              ;937
000186  7238              STRB     r0,[r7,#8]            ;937
000188  2501              MOVS     r5,#1                 ;938
00018a  e7e1              B        |L14.336|
                  |L14.396|
00018c  1c64              ADDS     r4,r4,#1              ;939
00018e  b2a4              UXTH     r4,r4                 ;953
000190  e7de              B        |L14.336|
;;;961    
                          ENDP

000192  0000              DCW      0x0000
                  |L14.404|
                          DCD      ||area_number.19||
                  |L14.408|
                          DCD      0x48000c00

                          AREA ||.data||, DATA, ALIGN=2

                  c
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  monit
000000  00                DCB      0x00

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  nozero
000000  01                DCB      0x01
                  rab1
000001  00                DCB      0x00
                  rab2
000002  00                DCB      0x00
                  rab3
000003  00                DCB      0x00
                  rab4
000004  00                DCB      0x00
                  rab5
000005  00                DCB      0x00
                  rab6
000006  00                DCB      0x00
                  mail
000007  00                DCB      0x00
                  ||fll||
000008  01                DCB      0x01
                  flag
000009  00                DCB      0x00
                  error
00000a  00                DCB      0x00
                  data1_one
00000b  00                DCB      0x00
                  data2_one
00000c  00                DCB      0x00
                  data3_one
00000d  00                DCB      0x00
                  data4_one
00000e  00                DCB      0x00
                  data5_one
00000f  00                DCB      0x00
                  data6_one
000010  00                DCB      0x00
                  EncState1
000011  00                DCB      0x00
                  EncState2
000012  00                DCB      0x00
                  EncState3
000013  00                DCB      0x00
                  EncState4
000014  00                DCB      0x00
                  EncState5
000015  00                DCB      0x00
                  EncState6
000016  00                DCB      0x00
                  temp8
000017  00                DCB      0x00
                  EncData1
000018  0001              DCW      0x0001
                  EncData2
00001a  0001              DCW      0x0001
                  EncData3
00001c  0001              DCW      0x0001
                  EncData4
00001e  0001              DCW      0x0001
                  EncData5
000020  0001              DCW      0x0001
                  EncData6
000022  0001              DCW      0x0001
                  ||e1||
000024  0000              DCW      0x0000
                  ||e2||
000026  0000              DCW      0x0000
                  ||e3||
000028  0000              DCW      0x0000
                  ||e4||
00002a  0000              DCW      0x0000
                  ||e5||
00002c  0000              DCW      0x0000
                  ||e6||
00002e  0000              DCW      0x0000
                  cnt_base
000030  0000              DCW      0x0000
000032  0000              DCB      0x00,0x00
                  packet_sent
                          DCD      0x00000001
                  Send_Buffer
                          DCD      0x00000000

                          AREA ||area_number.20||, DATA, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.data||
                  ||m1||
000000  00                DCB      0x00

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  ||m2||
000000  00                DCB      0x00

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  ||m3||
000000  00                DCB      0x00

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  ||m4||
000000  00                DCB      0x00

                          AREA ||area_number.24||, DATA, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.data||
                  ||m5||
000000  00                DCB      0x00

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  ||m6||
000000  00                DCB      0x00

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  cnt_deb
                          DCD      0x00000080

                          AREA ||area_number.27||, DATA, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.data||
                  cnt_deb1
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.data||
                  packet_receive
                          DCD      0x00000001

                          AREA ||area_number.29||, DATA, ALIGN=1

                          EXPORTAS ||area_number.29||, ||.data||
                  ||rel||
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.30||, DATA, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.data||
                  relativ
                          DCD      0x00000000

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  ||che||
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  ||div||
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c____REVSH|
#line 128
|__asm___6_main_c_c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
