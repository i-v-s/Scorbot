; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32f30x_flash.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32f30x_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Libraries\STM32F30x_StdPeriph_Driver\src\stm32f30x_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;1082     */
;;;1083   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;1084   {
;;;1085     /* Check the parameters */
;;;1086     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;1087     
;;;1088     /* Clear the flags */
;;;1089     FLASH->SR = FLASH_FLAG;
000002  60c8              STR      r0,[r1,#0xc]
;;;1090   }
000004  4770              BX       lr
;;;1091   
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_EraseAllPages||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllPages PROC
;;;298      */
;;;299    FLASH_Status FLASH_EraseAllPages(void)
000000  b530              PUSH     {r4,r5,lr}
;;;300    {
;;;301      FLASH_Status status = FLASH_COMPLETE;
;;;302    
;;;303      /* Wait for last operation to be completed */
;;;304      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000002  f44f2530          MOV      r5,#0xb0000
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       FLASH_WaitForLastOperation
;;;305      
;;;306      if(status == FLASH_COMPLETE)
00000c  2804              CMP      r0,#4
00000e  d10f              BNE      |L2.48|
;;;307      {
;;;308        /* if the previous operation is completed, proceed to erase all pages */
;;;309         FLASH->CR |= FLASH_CR_MER;
000010  4c08              LDR      r4,|L2.52|
000012  6920              LDR      r0,[r4,#0x10]
000014  f0400004          ORR      r0,r0,#4
000018  6120              STR      r0,[r4,#0x10]
;;;310         FLASH->CR |= FLASH_CR_STRT;
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400040          ORR      r0,r0,#0x40
000020  6120              STR      r0,[r4,#0x10]
;;;311        
;;;312        /* Wait for last operation to be completed */
;;;313        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FLASH_WaitForLastOperation
;;;314    
;;;315        /* Disable the MER Bit */
;;;316        FLASH->CR &= ~FLASH_CR_MER;
000028  6921              LDR      r1,[r4,#0x10]
00002a  f0210104          BIC      r1,r1,#4
00002e  6121              STR      r1,[r4,#0x10]
                  |L2.48|
;;;317      }
;;;318    
;;;319      /* Return the Erase Status */
;;;320      return status;
;;;321    }
000030  bd30              POP      {r4,r5,pc}
;;;322    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_ErasePage||, CODE, READONLY, ALIGN=2

                  FLASH_ErasePage PROC
;;;260      */
;;;261    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
000002  4605              MOV      r5,r0
;;;263      FLASH_Status status = FLASH_COMPLETE;
;;;264    
;;;265      /* Check the parameters */
;;;266      assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
;;;267     
;;;268      /* Wait for last operation to be completed */
;;;269      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;270      
;;;271      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d110              BNE      |L3.52|
;;;272      { 
;;;273        /* If the previous operation is completed, proceed to erase the page */
;;;274        FLASH->CR |= FLASH_CR_PER;
000012  4c09              LDR      r4,|L3.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400002          ORR      r0,r0,#2
00001a  6120              STR      r0,[r4,#0x10]
;;;275        FLASH->AR  = Page_Address; 
00001c  6165              STR      r5,[r4,#0x14]
;;;276        FLASH->CR |= FLASH_CR_STRT;
00001e  6920              LDR      r0,[r4,#0x10]
000020  f0400040          ORR      r0,r0,#0x40
000024  6120              STR      r0,[r4,#0x10]
;;;277        
;;;278        /* Wait for last operation to be completed */
;;;279        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       FLASH_WaitForLastOperation
;;;280        
;;;281        /* Disable the PER Bit */
;;;282        FLASH->CR &= ~FLASH_CR_PER;
00002c  6921              LDR      r1,[r4,#0x10]
00002e  f0210102          BIC      r1,r1,#2
000032  6121              STR      r1,[r4,#0x10]
                  |L3.52|
;;;283      }
;;;284        
;;;285      /* Return the Erase Status */
;;;286      return status;
;;;287    }
000034  bd70              POP      {r4-r6,pc}
;;;288    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;1054     */
;;;1055   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4a03              LDR      r2,|L4.16|
;;;1056   {
000002  4601              MOV      r1,r0
;;;1057     FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1058   
;;;1059     /* Check the parameters */
;;;1060     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;1061   
;;;1062     if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000006  68d2              LDR      r2,[r2,#0xc]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L4.14|
;;;1063     {
;;;1064       bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;1065     }
;;;1066     else
;;;1067     {
;;;1068       bitstatus = RESET;
;;;1069     }
;;;1070     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1071     return bitstatus; 
;;;1072   }
00000e  4770              BX       lr
;;;1073   
                          ENDP

                  |L4.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;1097     */
;;;1098   FLASH_Status FLASH_GetStatus(void)
000000  4908              LDR      r1,|L5.36|
;;;1099   {
;;;1100     FLASH_Status FLASHstatus = FLASH_COMPLETE;
000002  2004              MOVS     r0,#4
;;;1101     
;;;1102     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000004  68ca              LDR      r2,[r1,#0xc]
000006  07d2              LSLS     r2,r2,#31
000008  d001              BEQ      |L5.14|
;;;1103     {
;;;1104       FLASHstatus = FLASH_BUSY;
00000a  2001              MOVS     r0,#1
;;;1105     }
;;;1106     else 
;;;1107     {  
;;;1108       if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
;;;1109       { 
;;;1110         FLASHstatus = FLASH_ERROR_WRP;
;;;1111       }
;;;1112       else 
;;;1113       {
;;;1114         if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
;;;1115         {
;;;1116           FLASHstatus = FLASH_ERROR_PROGRAM; 
;;;1117         }
;;;1118         else
;;;1119         {
;;;1120           FLASHstatus = FLASH_COMPLETE;
;;;1121         }
;;;1122       }
;;;1123     }
;;;1124     /* Return the FLASH Status */
;;;1125     return FLASHstatus;
;;;1126   }
00000c  4770              BX       lr
                  |L5.14|
00000e  68ca              LDR      r2,[r1,#0xc]          ;1108
000010  06d2              LSLS     r2,r2,#27             ;1108
000012  d501              BPL      |L5.24|
000014  2002              MOVS     r0,#2                 ;1110
                  |L5.22|
000016  4770              BX       lr
                  |L5.24|
000018  68c9              LDR      r1,[r1,#0xc]          ;1114
00001a  0749              LSLS     r1,r1,#29             ;1114
00001c  d5fb              BPL      |L5.22|
00001e  2003              MOVS     r0,#3                 ;1116
000020  4770              BX       lr
;;;1127   
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_HalfCycleAccessCmd||, CODE, READONLY, ALIGN=2

                  FLASH_HalfCycleAccessCmd PROC
;;;156      */
;;;157    void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L6.24|
;;;158    {
;;;159      /* Check the parameters */
;;;160      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;161       
;;;162      if(NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;163      {
;;;164        FLASH->ACR |= FLASH_ACR_HLFCYA;
;;;165      }
;;;166      else
;;;167      {
;;;168        FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L6.14|
000008  f0400008          ORR      r0,r0,#8              ;164
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f0200008          BIC      r0,r0,#8
                  |L6.18|
000012  6008              STR      r0,[r1,#0]            ;164
;;;169      }
;;;170    }
000014  4770              BX       lr
;;;171    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;1026     */
;;;1027   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;1028   {
;;;1029     /* Check the parameters */
;;;1030     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1031     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1032     
;;;1033     if(NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1034     {
;;;1035       /* Enable the interrupt sources */
;;;1036       FLASH->CR |= FLASH_IT;
;;;1037     }
;;;1038     else
;;;1039     {
;;;1040       /* Disable the interrupt sources */
;;;1041       FLASH->CR &= ~(uint32_t)FLASH_IT;
000004  6911              LDR      r1,[r2,#0x10]
000006  d001              BEQ      |L7.12|
000008  4301              ORRS     r1,r1,r0              ;1036
00000a  e000              B        |L7.14|
                  |L7.12|
00000c  4381              BICS     r1,r1,r0
                  |L7.14|
00000e  6111              STR      r1,[r2,#0x10]         ;1036
;;;1042     }
;;;1043   }
000010  4770              BX       lr
;;;1044   
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;242      */
;;;243    void FLASH_Lock(void)
000000  4802              LDR      r0,|L8.12|
;;;244    {
;;;245      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;246      FLASH->CR |= FLASH_CR_LOCK;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;247    }
00000a  4770              BX       lr
;;;248    
                          ENDP

                  |L8.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_BOOTConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BOOTConfig PROC
;;;759      */
;;;760    FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
000000  b570              PUSH     {r4-r6,lr}
;;;761    {
;;;762      FLASH_Status status = FLASH_COMPLETE; 
;;;763    
;;;764      /* Check the parameters */
;;;765      assert_param(IS_OB_BOOT1(OB_BOOT1));
;;;766    
;;;767      /* Authorize the small information block programming */
;;;768      FLASH->OPTKEYR = FLASH_KEY1;
000002  4c10              LDR      r4,|L9.68|
000004  4605              MOV      r5,r0                 ;761
000006  480e              LDR      r0,|L9.64|
000008  60a0              STR      r0,[r4,#8]
;;;769      FLASH->OPTKEYR = FLASH_KEY2;
00000a  480f              LDR      r0,|L9.72|
00000c  60a0              STR      r0,[r4,#8]
;;;770      
;;;771      /* Wait for last operation to be completed */
;;;772      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  f44f2630          MOV      r6,#0xb0000
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       FLASH_WaitForLastOperation
;;;773      
;;;774      if(status == FLASH_COMPLETE)
000018  2804              CMP      r0,#4
00001a  d110              BNE      |L9.62|
;;;775      {  
;;;776        /* Enable the Option Bytes Programming operation */
;;;777        FLASH->CR |= FLASH_CR_OPTPG; 
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400010          ORR      r0,r0,#0x10
000022  6120              STR      r0,[r4,#0x10]
;;;778               
;;;779    	OB->USER = OB_BOOT1|0xEF;
000024  4909              LDR      r1,|L9.76|
000026  f04500ef          ORR      r0,r5,#0xef
00002a  8008              STRH     r0,[r1,#0]
;;;780      
;;;781        /* Wait for last operation to be completed */
;;;782        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;783    
;;;784        if(status != FLASH_TIMEOUT)
000032  2805              CMP      r0,#5
000034  d003              BEQ      |L9.62|
;;;785        {
;;;786          /* if the program operation is completed, disable the OPTPG Bit */
;;;787          FLASH->CR &= ~FLASH_CR_OPTPG;
000036  6921              LDR      r1,[r4,#0x10]
000038  f0210110          BIC      r1,r1,#0x10
00003c  6121              STR      r1,[r4,#0x10]
                  |L9.62|
;;;788        }
;;;789      }    
;;;790      /* Return the Option Byte program Status */
;;;791      return status;
;;;792    }
00003e  bd70              POP      {r4-r6,pc}
;;;793    
                          ENDP

                  |L9.64|
                          DCD      0x45670123
                  |L9.68|
                          DCD      0x40022000
                  |L9.72|
                          DCD      0xcdef89ab
                  |L9.76|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;591      */
;;;592    FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
000000  b5f0              PUSH     {r4-r7,lr}
;;;593    {
;;;594      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
;;;595      
;;;596      FLASH_Status status = FLASH_COMPLETE;
;;;597      
;;;598      /* Check the parameters */
;;;599      assert_param(IS_OB_WRP(OB_WRP));
;;;600        
;;;601      OB_WRP = (uint32_t)(~OB_WRP);
000002  43c0              MVNS     r0,r0
;;;602      WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
000004  b2c6              UXTB     r6,r0
;;;603      WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
000006  f3c02507          UBFX     r5,r0,#8,#8
;;;604      
;;;605      /* Wait for last operation to be completed */
;;;606      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000a  f44f2730          MOV      r7,#0xb0000
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;607      
;;;608      if(status == FLASH_COMPLETE)
000014  2804              CMP      r0,#4
000016  d11b              BNE      |L10.80|
;;;609      {
;;;610        FLASH->CR |= FLASH_CR_OPTPG;
000018  4c0e              LDR      r4,|L10.84|
00001a  6921              LDR      r1,[r4,#0x10]
00001c  f0410110          ORR      r1,r1,#0x10
000020  6121              STR      r1,[r4,#0x10]
;;;611    
;;;612        if(WRP0_Data != 0xFF)
000022  2eff              CMP      r6,#0xff
000024  d006              BEQ      |L10.52|
;;;613        {
;;;614          OB->WRP0 = WRP0_Data;
000026  480c              LDR      r0,|L10.88|
000028  8006              STRH     r6,[r0,#0]
;;;615          
;;;616          /* Wait for last operation to be completed */
;;;617          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;618        }
;;;619        if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
000030  2804              CMP      r0,#4
000032  d107              BNE      |L10.68|
                  |L10.52|
000034  2dff              CMP      r5,#0xff
000036  d007              BEQ      |L10.72|
;;;620        {
;;;621          OB->WRP1 = WRP1_Data;
000038  4807              LDR      r0,|L10.88|
00003a  1c80              ADDS     r0,r0,#2
00003c  8005              STRH     r5,[r0,#0]
;;;622          
;;;623          /* Wait for last operation to be completed */
;;;624          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L10.68|
;;;625        }
;;;626              
;;;627        if(status != FLASH_TIMEOUT)
000044  2805              CMP      r0,#5
000046  d003              BEQ      |L10.80|
                  |L10.72|
;;;628        {
;;;629          /* if the program operation is completed, disable the OPTPG Bit */
;;;630          FLASH->CR &= ~FLASH_CR_OPTPG;
000048  6921              LDR      r1,[r4,#0x10]
00004a  f0210110          BIC      r1,r1,#0x10
00004e  6121              STR      r1,[r4,#0x10]
                  |L10.80|
;;;631        }
;;;632      } 
;;;633      /* Return the write protection operation Status */
;;;634      return status;      
;;;635    }
000050  bdf0              POP      {r4-r7,pc}
;;;636    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      0x40022000
                  |L10.88|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Erase PROC
;;;521      */
;;;522    FLASH_Status FLASH_OB_Erase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;523    {
;;;524      uint16_t rdptmp = OB_RDP_Level_0;
000002  25aa              MOVS     r5,#0xaa
;;;525    
;;;526      FLASH_Status status = FLASH_COMPLETE;
;;;527    
;;;528      /* Get the actual read protection Option Byte value */ 
;;;529      if(FLASH_OB_GetRDP() != RESET)
000004  f7fffffe          BL       FLASH_OB_GetRDP
000008  b100              CBZ      r0,|L11.12|
;;;530      {
;;;531        rdptmp = 0x00;  
00000a  2500              MOVS     r5,#0
                  |L11.12|
;;;532      }
;;;533    
;;;534      /* Wait for last operation to be completed */
;;;535      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000c  f44f2630          MOV      r6,#0xb0000
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;536    
;;;537      if(status == FLASH_COMPLETE)
000016  2804              CMP      r0,#4
000018  d120              BNE      |L11.92|
;;;538      {   
;;;539        /* If the previous operation is completed, proceed to erase the option bytes */
;;;540        FLASH->CR |= FLASH_CR_OPTER;
00001a  4c11              LDR      r4,|L11.96|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;541        FLASH->CR |= FLASH_CR_STRT;
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;542    
;;;543        /* Wait for last operation to be completed */
;;;544        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;545        
;;;546        if(status == FLASH_COMPLETE)
000032  2804              CMP      r0,#4
000034  d10c              BNE      |L11.80|
;;;547        {
;;;548          /* If the erase operation is completed, disable the OPTER Bit */
;;;549          FLASH->CR &= ~FLASH_CR_OPTER;
000036  6920              LDR      r0,[r4,#0x10]
000038  f0200020          BIC      r0,r0,#0x20
00003c  6120              STR      r0,[r4,#0x10]
;;;550           
;;;551          /* Enable the Option Bytes Programming operation */
;;;552          FLASH->CR |= FLASH_CR_OPTPG;
00003e  6920              LDR      r0,[r4,#0x10]
000040  f0400010          ORR      r0,r0,#0x10
000044  6120              STR      r0,[r4,#0x10]
;;;553    
;;;554          /* Restore the last read protection Option Byte value */
;;;555          OB->RDP = (uint16_t)rdptmp; 
000046  4807              LDR      r0,|L11.100|
000048  8005              STRH     r5,[r0,#0]
;;;556    
;;;557          /* Wait for last operation to be completed */
;;;558          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L11.80|
;;;559     
;;;560          if(status != FLASH_TIMEOUT)
;;;561          {
;;;562            /* if the program operation is completed, disable the OPTPG Bit */
;;;563            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;564          }
;;;565        }
;;;566        else
;;;567        {
;;;568          if (status != FLASH_TIMEOUT)
000050  2805              CMP      r0,#5
000052  d003              BEQ      |L11.92|
000054  6921              LDR      r1,[r4,#0x10]         ;563
000056  f0210110          BIC      r1,r1,#0x10           ;563
00005a  6121              STR      r1,[r4,#0x10]         ;563
                  |L11.92|
;;;569          {
;;;570            /* Disable the OPTPG Bit */
;;;571            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;572          }
;;;573        }  
;;;574      }
;;;575      /* Return the erase status */
;;;576      return status;
;;;577    }
00005c  bd70              POP      {r4-r6,pc}
;;;578    
                          ENDP

00005e  0000              DCW      0x0000
                  |L11.96|
                          DCD      0x40022000
                  |L11.100|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;986      */
;;;987    FlagStatus FLASH_OB_GetRDP(void)
000000  4903              LDR      r1,|L12.16|
;;;988    {
;;;989      FlagStatus readstatus = RESET;
000002  2000              MOVS     r0,#0
;;;990      
;;;991      if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0110f06          TST      r1,#6
00000a  d000              BEQ      |L12.14|
;;;992      {
;;;993        readstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L12.14|
;;;994      }
;;;995      else
;;;996      {
;;;997        readstatus = RESET;
;;;998      }
;;;999      return readstatus;
;;;1000   }
00000e  4770              BX       lr
;;;1001   
                          ENDP

                  |L12.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;964      */
;;;965    uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L13.12|
;;;966    {
;;;967      /* Return the User Option Byte */
;;;968      return (uint8_t)(FLASH->OBR >> 8);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  f3c02007          UBFX     r0,r0,#8,#8
;;;969    }
000008  4770              BX       lr
;;;970    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;975      */
;;;976    uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L14.8|
;;;977    {
;;;978      /* Return the FLASH write protection Register value */
;;;979      return (uint32_t)(FLASH->WRPR);
000002  6a00              LDR      r0,[r0,#0x20]
;;;980    }
000004  4770              BX       lr
;;;981    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;508      */
;;;509    void FLASH_OB_Launch(void)
000000  4802              LDR      r0,|L15.12|
;;;510    {
;;;511      /* Set the OBL_Launch bit to launch the option byte loading */
;;;512      FLASH->CR |= FLASH_CR_OBL_LAUNCH; 
000002  6901              LDR      r1,[r0,#0x10]
000004  f4415100          ORR      r1,r1,#0x2000
000008  6101              STR      r1,[r0,#0x10]
;;;513    }
00000a  4770              BX       lr
;;;514    
                          ENDP

                  |L15.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;497      */
;;;498    void FLASH_OB_Lock(void)
000000  4802              LDR      r0,|L16.12|
;;;499    {
;;;500      /* Set the OPTWREN Bit to lock the option bytes block access */
;;;501      FLASH->CR &= ~FLASH_CR_OPTWRE;
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;502    }
00000a  4770              BX       lr
;;;503    
                          ENDP

                  |L16.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;650      */
;;;651    FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b570              PUSH     {r4-r6,lr}
;;;652    {
000002  4605              MOV      r5,r0
;;;653      FLASH_Status status = FLASH_COMPLETE;
;;;654      
;;;655      /* Check the parameters */
;;;656      assert_param(IS_OB_RDP(OB_RDP));
;;;657      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;658      
;;;659      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d113              BNE      |L17.58|
;;;660      {
;;;661        FLASH->CR |= FLASH_CR_OPTER;
000012  4c14              LDR      r4,|L17.100|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400020          ORR      r0,r0,#0x20
00001a  6120              STR      r0,[r4,#0x10]
;;;662        FLASH->CR |= FLASH_CR_STRT;
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6120              STR      r0,[r4,#0x10]
;;;663        
;;;664        /* Wait for last operation to be completed */
;;;665        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;666        
;;;667        if(status == FLASH_COMPLETE)
00002a  2804              CMP      r0,#4
00002c  d006              BEQ      |L17.60|
;;;668        {
;;;669          /* If the erase operation is completed, disable the OPTER Bit */
;;;670          FLASH->CR &= ~FLASH_CR_OPTER;
;;;671          
;;;672          /* Enable the Option Bytes Programming operation */
;;;673          FLASH->CR |= FLASH_CR_OPTPG;
;;;674           
;;;675          OB->RDP = OB_RDP;
;;;676    
;;;677          /* Wait for last operation to be completed */
;;;678          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
;;;679        
;;;680          if(status != FLASH_TIMEOUT)
;;;681          {
;;;682            /* if the program operation is completed, disable the OPTPG Bit */
;;;683            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;684          }
;;;685        }
;;;686        else 
;;;687        {
;;;688          if(status != FLASH_TIMEOUT)
00002e  2805              CMP      r0,#5
000030  d003              BEQ      |L17.58|
;;;689          {
;;;690            /* Disable the OPTER Bit */
;;;691            FLASH->CR &= ~FLASH_CR_OPTER;
000032  6921              LDR      r1,[r4,#0x10]
000034  f0210120          BIC      r1,r1,#0x20
                  |L17.56|
000038  6121              STR      r1,[r4,#0x10]         ;683
                  |L17.58|
;;;692          }
;;;693        }
;;;694      }
;;;695      /* Return the protection operation Status */
;;;696      return status;             
;;;697    }
00003a  bd70              POP      {r4-r6,pc}
                  |L17.60|
00003c  6920              LDR      r0,[r4,#0x10]         ;670
00003e  f0200020          BIC      r0,r0,#0x20           ;670
000042  6120              STR      r0,[r4,#0x10]         ;670
000044  6920              LDR      r0,[r4,#0x10]         ;673
000046  f0400010          ORR      r0,r0,#0x10           ;673
00004a  6120              STR      r0,[r4,#0x10]         ;673
00004c  4806              LDR      r0,|L17.104|
00004e  8005              STRH     r5,[r0,#0]            ;675
000050  4630              MOV      r0,r6                 ;678
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  2805              CMP      r0,#5                 ;680
000058  d0ef              BEQ      |L17.58|
00005a  6921              LDR      r1,[r4,#0x10]         ;683
00005c  f0210110          BIC      r1,r1,#0x10           ;683
000060  e7ea              B        |L17.56|
;;;698    
                          ENDP

000062  0000              DCW      0x0000
                  |L17.100|
                          DCD      0x40022000
                  |L17.104|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_SRAMParityConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_SRAMParityConfig PROC
;;;843      */
;;;844    FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
000000  b570              PUSH     {r4-r6,lr}
;;;845    {
000002  4605              MOV      r5,r0
;;;846      FLASH_Status status = FLASH_COMPLETE; 
;;;847    
;;;848      /* Check the parameters */
;;;849      assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
;;;850    
;;;851      /* Wait for last operation to be completed */
;;;852      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2630          MOV      r6,#0xb0000
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;853      
;;;854      if(status == FLASH_COMPLETE)
00000e  2804              CMP      r0,#4
000010  d111              BNE      |L18.54|
;;;855      {  
;;;856        /* Enable the Option Bytes Programming operation */
;;;857        FLASH->CR |= FLASH_CR_OPTPG; 
000012  4c09              LDR      r4,|L18.56|
000014  6920              LDR      r0,[r4,#0x10]
000016  f0400010          ORR      r0,r0,#0x10
00001a  6120              STR      r0,[r4,#0x10]
;;;858    
;;;859        OB->USER = OB_SRAM_Parity | 0xBF;
00001c  4907              LDR      r1,|L18.60|
00001e  f04500bf          ORR      r0,r5,#0xbf
000022  8008              STRH     r0,[r1,#0]
;;;860      
;;;861        /* Wait for last operation to be completed */
;;;862        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;863    
;;;864        if(status != FLASH_TIMEOUT)
00002a  2805              CMP      r0,#5
00002c  d003              BEQ      |L18.54|
;;;865        {
;;;866          /* if the program operation is completed, disable the OPTPG Bit */
;;;867          FLASH->CR &= ~FLASH_CR_OPTPG;
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L18.54|
;;;868        }
;;;869      }
;;;870      /* Return the Option Byte program Status */
;;;871      return status;
;;;872    }
000036  bd70              POP      {r4-r6,pc}
;;;873    
                          ENDP

                  |L18.56|
                          DCD      0x40022000
                  |L18.60|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;482      */
;;;483    void FLASH_OB_Unlock(void)
000000  4804              LDR      r0,|L19.20|
;;;484    {
;;;485      if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d403              BMI      |L19.16|
;;;486      { 
;;;487        /* Unlocking the option bytes block access */
;;;488        FLASH->OPTKEYR = FLASH_OPTKEY1;
000008  4903              LDR      r1,|L19.24|
00000a  6081              STR      r1,[r0,#8]
;;;489        FLASH->OPTKEYR = FLASH_OPTKEY2;
00000c  4903              LDR      r1,|L19.28|
00000e  6081              STR      r1,[r0,#8]
                  |L19.16|
;;;490      }
;;;491    }
000010  4770              BX       lr
;;;492    
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      0x40022000
                  |L19.24|
                          DCD      0x45670123
                  |L19.28|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;715      */
;;;716    FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;717    {
;;;718      FLASH_Status status = FLASH_COMPLETE; 
;;;719    
;;;720      /* Check the parameters */
;;;721      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;722      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;723      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;724    
;;;725      /* Authorize the small information block programming */
;;;726      FLASH->OPTKEYR = FLASH_KEY1;
000004  4c12              LDR      r4,|L20.80|
000006  4605              MOV      r5,r0                 ;717
000008  4810              LDR      r0,|L20.76|
00000a  4616              MOV      r6,r2                 ;717
00000c  460f              MOV      r7,r1                 ;717
00000e  60a0              STR      r0,[r4,#8]
;;;727      FLASH->OPTKEYR = FLASH_KEY2;
000010  4810              LDR      r0,|L20.84|
000012  60a0              STR      r0,[r4,#8]
;;;728      
;;;729      /* Wait for last operation to be completed */
;;;730      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000014  f44f2830          MOV      r8,#0xb0000
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;731      
;;;732      if(status == FLASH_COMPLETE)
00001e  2804              CMP      r0,#4
000020  d112              BNE      |L20.72|
;;;733      {  
;;;734        /* Enable the Option Bytes Programming operation */
;;;735        FLASH->CR |= FLASH_CR_OPTPG; 
000022  6920              LDR      r0,[r4,#0x10]
000024  f0400010          ORR      r0,r0,#0x10
000028  6120              STR      r0,[r4,#0x10]
;;;736               
;;;737        OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
00002a  433d              ORRS     r5,r5,r7
00002c  490a              LDR      r1,|L20.88|
00002e  4335              ORRS     r5,r5,r6
000030  f04500f8          ORR      r0,r5,#0xf8
000034  8008              STRH     r0,[r1,#0]
;;;738      
;;;739        /* Wait for last operation to be completed */
;;;740        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       FLASH_WaitForLastOperation
;;;741    
;;;742        if(status != FLASH_TIMEOUT)
00003c  2805              CMP      r0,#5
00003e  d003              BEQ      |L20.72|
;;;743        {
;;;744          /* if the program operation is completed, disable the OPTPG Bit */
;;;745          FLASH->CR &= ~FLASH_CR_OPTPG;
000040  6921              LDR      r1,[r4,#0x10]
000042  f0210110          BIC      r1,r1,#0x10
000046  6121              STR      r1,[r4,#0x10]
                  |L20.72|
;;;746        }
;;;747      }    
;;;748      /* Return the Option Byte program Status */
;;;749      return status;
;;;750    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;751    
                          ENDP

                  |L20.76|
                          DCD      0x45670123
                  |L20.80|
                          DCD      0x40022000
                  |L20.84|
                          DCD      0xcdef89ab
                  |L20.88|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_VDDAConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_VDDAConfig PROC
;;;801      */
;;;802    FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
000000  b570              PUSH     {r4-r6,lr}
;;;803    {
;;;804      FLASH_Status status = FLASH_COMPLETE; 
;;;805    
;;;806      /* Check the parameters */
;;;807      assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
;;;808    
;;;809      /* Authorize the small information block programming */
;;;810      FLASH->OPTKEYR = FLASH_KEY1;
000002  4c10              LDR      r4,|L21.68|
000004  4605              MOV      r5,r0                 ;803
000006  480e              LDR      r0,|L21.64|
000008  60a0              STR      r0,[r4,#8]
;;;811      FLASH->OPTKEYR = FLASH_KEY2;
00000a  480f              LDR      r0,|L21.72|
00000c  60a0              STR      r0,[r4,#8]
;;;812      
;;;813      /* Wait for last operation to be completed */
;;;814      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  f44f2630          MOV      r6,#0xb0000
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       FLASH_WaitForLastOperation
;;;815      
;;;816      if(status == FLASH_COMPLETE)
000018  2804              CMP      r0,#4
00001a  d110              BNE      |L21.62|
;;;817      {  
;;;818        /* Enable the Option Bytes Programming operation */
;;;819        FLASH->CR |= FLASH_CR_OPTPG; 
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400010          ORR      r0,r0,#0x10
000022  6120              STR      r0,[r4,#0x10]
;;;820               
;;;821    	OB->USER = OB_VDDA_ANALOG |0xDF;
000024  4909              LDR      r1,|L21.76|
000026  f04500df          ORR      r0,r5,#0xdf
00002a  8008              STRH     r0,[r1,#0]
;;;822      
;;;823        /* Wait for last operation to be completed */
;;;824        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;825    
;;;826        if(status != FLASH_TIMEOUT)
000032  2805              CMP      r0,#5
000034  d003              BEQ      |L21.62|
;;;827        {
;;;828          /* if the program operation is completed, disable the OPTPG Bit */
;;;829          FLASH->CR &= ~FLASH_CR_OPTPG;
000036  6921              LDR      r1,[r4,#0x10]
000038  f0210110          BIC      r1,r1,#0x10
00003c  6121              STR      r1,[r4,#0x10]
                  |L21.62|
;;;830        }
;;;831      }    
;;;832      /* Return the Option Byte program Status */
;;;833      return status;
;;;834    }
00003e  bd70              POP      {r4-r6,pc}
;;;835    
                          ENDP

                  |L21.64|
                          DCD      0x45670123
                  |L21.68|
                          DCD      0x40022000
                  |L21.72|
                          DCD      0xcdef89ab
                  |L21.76|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_OB_WriteUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WriteUser PROC
;;;889      */
;;;890    FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
000000  b570              PUSH     {r4-r6,lr}
;;;891    {
;;;892      FLASH_Status status = FLASH_COMPLETE; 
;;;893    
;;;894      /* Authorize the small information block programming */
;;;895      FLASH->OPTKEYR = FLASH_KEY1;
000002  4c10              LDR      r4,|L22.68|
000004  4605              MOV      r5,r0                 ;891
000006  480e              LDR      r0,|L22.64|
000008  60a0              STR      r0,[r4,#8]
;;;896      FLASH->OPTKEYR = FLASH_KEY2;
00000a  480f              LDR      r0,|L22.72|
00000c  60a0              STR      r0,[r4,#8]
;;;897      
;;;898      /* Wait for last operation to be completed */
;;;899      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00000e  f44f2630          MOV      r6,#0xb0000
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       FLASH_WaitForLastOperation
;;;900      
;;;901      if(status == FLASH_COMPLETE)
000018  2804              CMP      r0,#4
00001a  d110              BNE      |L22.62|
;;;902      {  
;;;903        /* Enable the Option Bytes Programming operation */
;;;904        FLASH->CR |= FLASH_CR_OPTPG; 
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400010          ORR      r0,r0,#0x10
000022  6120              STR      r0,[r4,#0x10]
;;;905               
;;;906    	  OB->USER = OB_USER | 0x88;
000024  4909              LDR      r1,|L22.76|
000026  f0450088          ORR      r0,r5,#0x88
00002a  8008              STRH     r0,[r1,#0]
;;;907      
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;910    
;;;911        if(status != FLASH_TIMEOUT)
000032  2805              CMP      r0,#5
000034  d003              BEQ      |L22.62|
;;;912        {
;;;913          /* if the program operation is completed, disable the OPTPG Bit */
;;;914          FLASH->CR &= ~FLASH_CR_OPTPG;
000036  6921              LDR      r1,[r4,#0x10]
000038  f0210110          BIC      r1,r1,#0x10
00003c  6121              STR      r1,[r4,#0x10]
                  |L22.62|
;;;915        }
;;;916      }    
;;;917      /* Return the Option Byte program Status */
;;;918      return status;
;;;919    
;;;920    }
00003e  bd70              POP      {r4-r6,pc}
;;;921    
                          ENDP

                  |L22.64|
                          DCD      0x45670123
                  |L22.68|
                          DCD      0x40022000
                  |L22.72|
                          DCD      0xcdef89ab
                  |L22.76|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;177      */
;;;178    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L23.24|
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;182       
;;;183      if(NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;184      {
;;;185        FLASH->ACR |= FLASH_ACR_PRFTBE;
;;;186      }
;;;187      else
;;;188      {
;;;189        FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L23.14|
000008  f0400010          ORR      r0,r0,#0x10           ;185
00000c  e001              B        |L23.18|
                  |L23.14|
00000e  f0200010          BIC      r0,r0,#0x10
                  |L23.18|
000012  6008              STR      r0,[r1,#0]            ;185
;;;190      }
;;;191    }
000014  4770              BX       lr
;;;192    
                          ENDP

000016  0000              DCW      0x0000
                  |L23.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;391      */
;;;392    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;393    {
000002  4606              MOV      r6,r0
;;;394      FLASH_Status status = FLASH_COMPLETE;
;;;395    
;;;396      /* Check the parameters */
;;;397      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;398    
;;;399      /* Wait for last operation to be completed */
;;;400      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2730          MOV      r7,#0xb0000
000008  460d              MOV      r5,r1                 ;393
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;401      
;;;402      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d10c              BNE      |L24.46|
;;;403      {
;;;404        /* If the previous operation is completed, proceed to program the new data */
;;;405        FLASH->CR |= FLASH_CR_PG;
000014  4c06              LDR      r4,|L24.48|
000016  6920              LDR      r0,[r4,#0x10]
000018  f0400001          ORR      r0,r0,#1
00001c  6120              STR      r0,[r4,#0x10]
;;;406      
;;;407        *(__IO uint16_t*)Address = Data;
00001e  8035              STRH     r5,[r6,#0]
;;;408    
;;;409        /* Wait for last operation to be completed */
;;;410        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       FLASH_WaitForLastOperation
;;;411        
;;;412        /* Disable the PG Bit */
;;;413        FLASH->CR &= ~FLASH_CR_PG;
000026  6921              LDR      r1,[r4,#0x10]
000028  f0210101          BIC      r1,r1,#1
00002c  6121              STR      r1,[r4,#0x10]
                  |L24.46|
;;;414      } 
;;;415      
;;;416      /* Return the Program Status */
;;;417      return status;
;;;418    }
00002e  bdf0              POP      {r4-r7,pc}
;;;419    
                          ENDP

                  |L24.48|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramOptionByteData||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramOptionByteData PROC
;;;933      */
;;;934    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;935    {
000002  4606              MOV      r6,r0
;;;936      FLASH_Status status = FLASH_COMPLETE;
;;;937      /* Check the parameters */
;;;938      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;939      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000004  f44f2730          MOV      r7,#0xb0000
000008  460d              MOV      r5,r1                 ;935
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;940    
;;;941      if(status == FLASH_COMPLETE)
000010  2804              CMP      r0,#4
000012  d10e              BNE      |L25.50|
;;;942      {
;;;943        /* Enables the Option Bytes Programming operation */
;;;944        FLASH->CR |= FLASH_CR_OPTPG; 
000014  4c07              LDR      r4,|L25.52|
000016  6920              LDR      r0,[r4,#0x10]
000018  f0400010          ORR      r0,r0,#0x10
00001c  6120              STR      r0,[r4,#0x10]
;;;945        *(__IO uint16_t*)Address = Data;
00001e  8035              STRH     r5,[r6,#0]
;;;946        
;;;947        /* Wait for last operation to be completed */
;;;948        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       FLASH_WaitForLastOperation
;;;949        
;;;950        if(status != FLASH_TIMEOUT)
000026  2805              CMP      r0,#5
000028  d003              BEQ      |L25.50|
;;;951        {
;;;952          /* If the program operation is completed, disable the OPTPG Bit */
;;;953          FLASH->CR &= ~FLASH_CR_OPTPG;
00002a  6921              LDR      r1,[r4,#0x10]
00002c  f0210110          BIC      r1,r1,#0x10
000030  6121              STR      r1,[r4,#0x10]
                  |L25.50|
;;;954        }
;;;955      }
;;;956      /* Return the Option Byte Data Program Status */
;;;957      return status;
;;;958    }
000032  bdf0              POP      {r4-r7,pc}
;;;959    
                          ENDP

                  |L25.52|
                          DCD      0x40022000

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;333      */
;;;334    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;335    {
000002  4606              MOV      r6,r0
;;;336      FLASH_Status status = FLASH_COMPLETE;
;;;337      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
;;;338    
;;;339      /* Check the parameters */
;;;340      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;341    
;;;342      /* Wait for last operation to be completed */
;;;343      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000006  f44f2730          MOV      r7,#0xb0000
00000a  9000              STR      r0,[sp,#0]
00000c  460d              MOV      r5,r1                 ;335
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;344      
;;;345      if(status == FLASH_COMPLETE)
000014  2804              CMP      r0,#4
000016  d115              BNE      |L26.68|
;;;346      {
;;;347        /* If the previous operation is completed, proceed to program the new first 
;;;348        half word */
;;;349        FLASH->CR |= FLASH_CR_PG;
000018  4c0b              LDR      r4,|L26.72|
00001a  6920              LDR      r0,[r4,#0x10]
00001c  f0400001          ORR      r0,r0,#1
000020  6120              STR      r0,[r4,#0x10]
;;;350      
;;;351        *(__IO uint16_t*)Address = (uint16_t)Data;
000022  8035              STRH     r5,[r6,#0]
;;;352        
;;;353        /* Wait for last operation to be completed */
;;;354        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       FLASH_WaitForLastOperation
;;;355     
;;;356        if(status == FLASH_COMPLETE)
00002a  2804              CMP      r0,#4
00002c  d106              BNE      |L26.60|
00002e  1cb6              ADDS     r6,r6,#2
;;;357        {
;;;358          /* If the previous operation is completed, proceed to program the new second 
;;;359          half word */
;;;360          tmp = Address + 2;
;;;361    
;;;362          *(__IO uint16_t*) tmp = Data >> 16;
000030  0c28              LSRS     r0,r5,#16
000032  9600              STR      r6,[sp,#0]
000034  8030              STRH     r0,[r6,#0]
;;;363        
;;;364          /* Wait for last operation to be completed */
;;;365          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L26.60|
;;;366            
;;;367          /* Disable the PG Bit */
;;;368          FLASH->CR &= ~FLASH_CR_PG;
;;;369        }
;;;370        else
;;;371        {
;;;372          /* Disable the PG Bit */
;;;373          FLASH->CR &= ~FLASH_CR_PG;
00003c  6921              LDR      r1,[r4,#0x10]
00003e  f0210101          BIC      r1,r1,#1
000042  6121              STR      r1,[r4,#0x10]
                  |L26.68|
;;;374        }
;;;375      }
;;;376       
;;;377      /* Return the Program Status */
;;;378      return status;
;;;379    }
000044  bdf8              POP      {r3-r7,pc}
;;;380    
                          ENDP

000046  0000              DCW      0x0000
                  |L26.72|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;130      */
;;;131    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4a03              LDR      r2,|L27.16|
;;;132    {
;;;133       uint32_t tmpreg = 0;
;;;134      
;;;135      /* Check the parameters */
;;;136      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;137      
;;;138      /* Read the ACR register */
;;;139      tmpreg = FLASH->ACR;  
000002  6811              LDR      r1,[r2,#0]
;;;140      
;;;141      /* Sets the Latency value */
;;;142      tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
000004  f0210103          BIC      r1,r1,#3
;;;143      tmpreg |= FLASH_Latency;
000008  4301              ORRS     r1,r1,r0
;;;144      
;;;145      /* Write the ACR register */
;;;146      FLASH->ACR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;147    }
00000c  4770              BX       lr
;;;148    
                          ENDP

00000e  0000              DCW      0x0000
                  |L27.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;227      */
;;;228    void FLASH_Unlock(void)
000000  4804              LDR      r0,|L28.20|
;;;229    {
;;;230      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6901              LDR      r1,[r0,#0x10]
000004  0609              LSLS     r1,r1,#24
000006  d503              BPL      |L28.16|
;;;231      {
;;;232        /* Authorize the FLASH Registers access */
;;;233        FLASH->KEYR = FLASH_KEY1;
000008  4903              LDR      r1,|L28.24|
00000a  6041              STR      r1,[r0,#4]
;;;234        FLASH->KEYR = FLASH_KEY2;
00000c  4903              LDR      r1,|L28.28|
00000e  6041              STR      r1,[r0,#4]
                  |L28.16|
;;;235      }  
;;;236    }
000010  4770              BX       lr
;;;237    
                          ENDP

000012  0000              DCW      0x0000
                  |L28.20|
                          DCD      0x40022000
                  |L28.24|
                          DCD      0x45670123
                  |L28.28|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;1133     */
;;;1134   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b500              PUSH     {lr}
;;;1135   { 
000002  4603              MOV      r3,r0
;;;1136     FLASH_Status status = FLASH_COMPLETE;
;;;1137      
;;;1138     /* Check for the FLASH Status */
;;;1139     status = FLASH_GetStatus();
000004  f7fffffe          BL       FLASH_GetStatus
;;;1140     
;;;1141     /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
;;;1142     while((status == FLASH_BUSY) && (Timeout != 0x00))
000008  e003              B        |L29.18|
;;;1143     {
;;;1144       status = FLASH_GetStatus();
00000a  bf00              NOP      
                  |L29.12|
00000c  f7fffffe          BL       FLASH_GetStatus
000010  1e5b              SUBS     r3,r3,#1
                  |L29.18|
000012  2801              CMP      r0,#1                 ;1142
000014  d003              BEQ      |L29.30|
;;;1145       Timeout--;
;;;1146     }
;;;1147     
;;;1148     if(Timeout == 0x00 )
000016  2b00              CMP      r3,#0
000018  d100              BNE      |L29.28|
                  |L29.26|
;;;1149     {
;;;1150       status = FLASH_TIMEOUT;
00001a  2005              MOVS     r0,#5
                  |L29.28|
;;;1151     }
;;;1152     /* Return the operation status */
;;;1153     return status;
;;;1154   }
00001c  bd00              POP      {pc}
                  |L29.30|
00001e  2b00              CMP      r3,#0                 ;1142
000020  d1f4              BNE      |L29.12|
000022  e7fa              B        |L29.26|
;;;1155   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F30x_StdPeriph_Driver\\src\\stm32f30x_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f30x_flash_c_a2a150d6____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f30x_flash_c_a2a150d6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f30x_flash_c_a2a150d6____REVSH|
#line 128
|__asm___17_stm32f30x_flash_c_a2a150d6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
