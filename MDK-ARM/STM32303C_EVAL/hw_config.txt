; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\hw_config.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\hw_config.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\src\hw_config.c]
                          THUMB

                          AREA ||i.CDC_Receive_DATA||, CODE, READONLY, ALIGN=2

                  CDC_Receive_DATA PROC
;;;370    *******************************************************************************/
;;;371    uint32_t CDC_Receive_DATA(void)
000000  4904              LDR      r1,|L1.20|
;;;372    { 
000002  b510              PUSH     {r4,lr}
;;;373      /*Receive flag*/
;;;374      packet_receive = 0;
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]  ; packet_receive
;;;375      SetEPRxValid(ENDP3); 
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       SetEPRxValid
;;;376      return 1 ;
00000e  2001              MOVS     r0,#1
;;;377    }
000010  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      packet_receive

                          AREA ||i.CDC_Send_DATA||, CODE, READONLY, ALIGN=2

                  CDC_Send_DATA PROC
;;;344    *******************************************************************************/
;;;345    uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
000000  b510              PUSH     {r4,lr}
;;;346    {
000002  460c              MOV      r4,r1
;;;347      /*if max buffer is Not reached*/
;;;348      if(Send_length < VIRTUAL_COM_PORT_DATA_SIZE)     
000004  2940              CMP      r1,#0x40
000006  d20f              BCS      |L2.40|
;;;349      {
;;;350        /*Sent flag*/
;;;351        packet_sent = 0;
000008  4a08              LDR      r2,|L2.44|
00000a  2100              MOVS     r1,#0
00000c  6011              STR      r1,[r2,#0]  ; packet_sent
;;;352        /* send  packet to PMA*/
;;;353        UserToPMABufferCopy((unsigned char*)ptrBuffer, ENDP1_TXADDR, Send_length);
00000e  4622              MOV      r2,r4
000010  21c0              MOVS     r1,#0xc0
000012  f7fffffe          BL       UserToPMABufferCopy
;;;354        SetEPTxCount(ENDP1, Send_length);
000016  4621              MOV      r1,r4
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       SetEPTxCount
;;;355        SetEPTxValid(ENDP1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       SetEPTxValid
;;;356      }
;;;357      else
;;;358      {
;;;359        return 0;
;;;360      } 
;;;361      return 1;
000024  2001              MOVS     r0,#1
;;;362    }
000026  bd10              POP      {r4,pc}
                  |L2.40|
000028  2000              MOVS     r0,#0                 ;359
00002a  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  |L2.44|
                          DCD      packet_sent

                          AREA ||i.Enter_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Enter_LowPowerMode PROC
;;;169    *******************************************************************************/
;;;170    void Enter_LowPowerMode(void)
000000  4901              LDR      r1,|L3.8|
;;;171    {
;;;172      /* Set the device state to suspend */
;;;173      bDeviceState = SUSPENDED;
000002  2003              MOVS     r0,#3
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;174    }
000006  4770              BX       lr
;;;175    
                          ENDP

                  |L3.8|
                          DCD      bDeviceState

                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;292    *******************************************************************************/
;;;293    void Get_SerialNum(void)
000000  480a              LDR      r0,|L4.44|
;;;294    {
000002  b510              PUSH     {r4,lr}
;;;295      uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
;;;296    
;;;297      Device_Serial0 = *(uint32_t*)ID1;
;;;298      Device_Serial1 = *(uint32_t*)ID2;
000004  6801              LDR      r1,[r0,#0]
000006  1d00              ADDS     r0,r0,#4
;;;299      Device_Serial2 = *(uint32_t*)ID3;
000008  6804              LDR      r4,[r0,#0]
00000a  1d00              ADDS     r0,r0,#4
00000c  6800              LDR      r0,[r0,#0]
;;;300     
;;;301      Device_Serial0 += Device_Serial2;
00000e  1808              ADDS     r0,r1,r0
000010  d00b              BEQ      |L4.42|
;;;302    
;;;303      if (Device_Serial0 != 0)
;;;304      {
;;;305        IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
000012  2208              MOVS     r2,#8
000014  4906              LDR      r1,|L4.48|
000016  f7fffffe          BL       IntToUnicode
;;;306        IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
00001a  4905              LDR      r1,|L4.48|
00001c  4620              MOV      r0,r4
00001e  2204              MOVS     r2,#4
000020  e8bd4010          POP      {r4,lr}
000024  3110              ADDS     r1,r1,#0x10
000026  f7ffbffe          B.W      IntToUnicode
                  |L4.42|
;;;307      }
;;;308    }
00002a  bd10              POP      {r4,pc}
;;;309    
                          ENDP

                  |L4.44|
                          DCD      0x1ffff7ac
                  |L4.48|
                          DCD      Virtual_Com_Port_StringSerial+0x2

                          AREA ||i.IntToUnicode||, CODE, READONLY, ALIGN=2

                  IntToUnicode PROC
;;;316    *******************************************************************************/
;;;317    static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;318    {
;;;319      uint8_t idx = 0;
000002  2300              MOVS     r3,#0
;;;320      
;;;321      for( idx = 0 ; idx < len ; idx ++)
;;;322      {
;;;323        if( ((value >> 28)) < 0xA )
000004  240a              MOVS     r4,#0xa
;;;324        {
;;;325          pbuf[ 2* idx] = (value >> 28) + '0';
000006  2530              MOVS     r5,#0x30
;;;326        }
;;;327        else
;;;328        {
;;;329          pbuf[2* idx] = (value >> 28) + 'A' - 10; 
000008  2637              MOVS     r6,#0x37
00000a  461f              MOV      r7,r3
00000c  e011              B        |L5.50|
00000e  bf00              NOP                            ;323
                  |L5.16|
000010  ebb47f10          CMP      r4,r0,LSR #28         ;323
000014  d902              BLS      |L5.28|
000016  eb057c10          ADD      r12,r5,r0,LSR #28     ;325
00001a  e001              B        |L5.32|
                  |L5.28|
00001c  eb067c10          ADD      r12,r6,r0,LSR #28
                  |L5.32|
000020  f801c013          STRB     r12,[r1,r3,LSL #1]
;;;330        }
;;;331        
;;;332        value = value << 4;
;;;333        
;;;334        pbuf[ 2* idx + 1] = 0;
000024  eb010c43          ADD      r12,r1,r3,LSL #1
000028  0100              LSLS     r0,r0,#4              ;332
00002a  1c5b              ADDS     r3,r3,#1
00002c  f88c7001          STRB     r7,[r12,#1]
000030  b2db              UXTB     r3,r3                 ;321
                  |L5.50|
000032  4293              CMP      r3,r2                 ;321
000034  d3ec              BCC      |L5.16|
;;;335      }
;;;336    }
000036  bdf0              POP      {r4-r7,pc}
;;;337    
                          ENDP


                          AREA ||i.Leave_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Leave_LowPowerMode PROC
;;;181    *******************************************************************************/
;;;182    void Leave_LowPowerMode(void)
000000  4804              LDR      r0,|L6.20|
;;;183    {
;;;184      DEVICE_INFO *pInfo = &Device_Info;
;;;185    
;;;186      /* Set the device state to the correct state */
;;;187      if (pInfo->Current_Configuration != 0)
000002  7a81              LDRB     r1,[r0,#0xa]
;;;188      {
;;;189        /* Device configured */
;;;190        bDeviceState = CONFIGURED;
000004  4804              LDR      r0,|L6.24|
000006  b109              CBZ      r1,|L6.12|
000008  2105              MOVS     r1,#5
00000a  e000              B        |L6.14|
                  |L6.12|
;;;191      }
;;;192      else
;;;193      {
;;;194        bDeviceState = ATTACHED;
00000c  2101              MOVS     r1,#1
                  |L6.14|
00000e  6001              STR      r1,[r0,#0]  ; bDeviceState
;;;195      }
;;;196        /*Enable SystemCoreClock*/
;;;197      SystemInit();
000010  f7ffbffe          B.W      SystemInit
;;;198    }
;;;199    
                          ENDP

                  |L6.20|
                          DCD      Device_Info
                  |L6.24|
                          DCD      bDeviceState

                          AREA ||i.Set_System||, CODE, READONLY, ALIGN=2

                  Set_System PROC
;;;62     *******************************************************************************/
;;;63     void Set_System(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;64     {
;;;65     #if !defined(STM32L1XX_MD) && !defined(STM32L1XX_HD) && !defined(STM32L1XX_MD_PLUS)
;;;66       GPIO_InitTypeDef GPIO_InitStructure;
;;;67     #endif /* STM32L1XX_MD && STM32L1XX_XD */  
;;;68     
;;;69     #if defined(USB_USE_EXTERNAL_PULLUP)
;;;70       GPIO_InitTypeDef  GPIO_InitStructure;
;;;71     #endif /* USB_USE_EXTERNAL_PULLUP */ 
;;;72       
;;;73       /*!< At this stage the microcontroller clock setting is already configured, 
;;;74            this is done through SystemInit() function which is called from startup
;;;75            file (startup_stm32f10x_xx.s) before to branch to application main.
;;;76            To reconfigure the default setting of SystemInit() function, refer to
;;;77            system_stm32f10x.c file
;;;78          */   
;;;79     #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS) || defined(STM32F37X) || defined(STM32F30X)
;;;80       /* Enable the SYSCFG module clock */
;;;81       RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;82     #endif /* STM32L1XX_XD */ 
;;;83        
;;;84     #if !defined(STM32L1XX_MD) && !defined(STM32L1XX_HD) && !defined(STM32L1XX_MD_PLUS) && !defined(STM32F37X) && !defined(STM32F30X)
;;;85       /* Enable USB_DISCONNECT GPIO clock */
;;;86       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_DISCONNECT, ENABLE);
;;;87     
;;;88       /* Configure USB pull-up pin */
;;;89       GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
;;;90       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;91       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
;;;92       GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
;;;93     #endif /* STM32L1XX_MD && STM32L1XX_XD */
;;;94        
;;;95     #if defined(USB_USE_EXTERNAL_PULLUP)
;;;96       /* Enable the USB disconnect GPIO clock */
;;;97       RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIO_DISCONNECT, ENABLE);
;;;98     
;;;99       /* USB_DISCONNECT used as USB pull-up */
;;;100      GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
;;;101      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;102      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
;;;103      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;104      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;105      GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);  
;;;106    #endif /* USB_USE_EXTERNAL_PULLUP */ 
;;;107      
;;;108    #if defined(STM32F37X) || defined(STM32F30X)
;;;109      
;;;110      /* Enable the USB disconnect GPIO clock */
;;;111      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIO_DISCONNECT, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0488              LSLS     r0,r1,#18
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;112      
;;;113      /*Set PA11,12 as IN - USB_DM,DP*/ 
;;;114      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000012  2101              MOVS     r1,#1
000014  0448              LSLS     r0,r1,#17
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;115      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
00001a  f44f50c0          MOV      r0,#0x1800
;;;116      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  9000              STR      r0,[sp,#0]
000020  2003              MOVS     r0,#3
000022  f88d0005          STRB     r0,[sp,#5]
;;;117      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000026  2402              MOVS     r4,#2
000028  f88d4004          STRB     r4,[sp,#4]
;;;118      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002c  2500              MOVS     r5,#0
00002e  f88d5006          STRB     r5,[sp,#6]
;;;119      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;120      GPIO_Init(GPIOA, &GPIO_InitStructure);
000032  f04f4690          MOV      r6,#0x48000000
000036  f88d5007          STRB     r5,[sp,#7]            ;119
00003a  4669              MOV      r1,sp
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GPIO_Init
;;;121      
;;;122      /*SET PA11,12 for USB: USB_DM,DP*/
;;;123      GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_14);
000042  220e              MOVS     r2,#0xe
000044  210b              MOVS     r1,#0xb
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       GPIO_PinAFConfig
;;;124      GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_14);
00004c  220e              MOVS     r2,#0xe
00004e  210c              MOVS     r1,#0xc
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       GPIO_PinAFConfig
;;;125      
;;;126      /* USB_DISCONNECT used as USB pull-up */
;;;127      GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
000056  01e0              LSLS     r0,r4,#7
;;;128      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000058  f88d4005          STRB     r4,[sp,#5]
;;;129      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00005c  2401              MOVS     r4,#1
00005e  f88d4004          STRB     r4,[sp,#4]
000062  9000              STR      r0,[sp,#0]            ;128
;;;130      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000064  f88d4006          STRB     r4,[sp,#6]
;;;131      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000068  f88d5007          STRB     r5,[sp,#7]
;;;132      GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
00006c  4669              MOV      r1,sp
00006e  4807              LDR      r0,|L7.140|
000070  f7fffffe          BL       GPIO_Init
;;;133    #endif /* STM32F37X  && STM32F30X)*/
;;;134     
;;;135       /* Configure the EXTI line 18 connected internally to the USB IP */
;;;136      EXTI_ClearITPendingBit(EXTI_Line18);
000074  2012              MOVS     r0,#0x12
000076  f7fffffe          BL       EXTI_ClearITPendingBit
;;;137      EXTI_InitStructure.EXTI_Line = EXTI_Line18;
00007a  4805              LDR      r0,|L7.144|
00007c  2112              MOVS     r1,#0x12
;;;138      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
00007e  6001              STR      r1,[r0,#0]  ; EXTI_InitStructure
000080  2108              MOVS     r1,#8
000082  7141              STRB     r1,[r0,#5]
;;;139      EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000084  7184              STRB     r4,[r0,#6]
;;;140      EXTI_Init(&EXTI_InitStructure); 
000086  f7fffffe          BL       EXTI_Init
;;;141    }
00008a  bd7c              POP      {r2-r6,pc}
;;;142    
                          ENDP

                  |L7.140|
                          DCD      0x48000400
                  |L7.144|
                          DCD      ||area_number.15||

                          AREA ||i.Set_USBClock||, CODE, READONLY, ALIGN=1

                  Set_USBClock PROC
;;;148    *******************************************************************************/
;;;149    void Set_USBClock(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151    #if defined(STM32L1XX_MD) || defined(STM32L1XX_HD) || defined(STM32L1XX_MD_PLUS) 
;;;152      /* Enable USB clock */
;;;153      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
;;;154      
;;;155    #else 
;;;156      /* Select USBCLK source */
;;;157      RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       RCC_USBCLKConfig
;;;158      
;;;159      /* Enable the USB clock */
;;;160      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
000008  2101              MOVS     r1,#1
00000a  e8bd4010          POP      {r4,lr}
00000e  05c8              LSLS     r0,r1,#23
000010  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
;;;161    #endif /* STM32L1XX_MD */
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.USB_Cable_Config||, CODE, READONLY, ALIGN=2

                  USB_Cable_Config PROC
;;;261    *******************************************************************************/
;;;262    void USB_Cable_Config (FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;263    {
;;;264    #if defined(STM32L1XX_MD) || defined (STM32L1XX_HD)|| (STM32L1XX_MD_PLUS)
;;;265      if (NewState != DISABLE)
;;;266      {
;;;267        STM32L15_USB_CONNECT;
;;;268      }
;;;269      else
;;;270      {
;;;271        STM32L15_USB_DISCONNECT;
;;;272      }  
;;;273      
;;;274    #else /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;275      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;276      {
;;;277        GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
000004  f44f7180          MOV      r1,#0x100
;;;278      }
;;;279      else
;;;280      {
;;;281        GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
000008  4610              MOV      r0,r2
00000a  d001              BEQ      |L9.16|
00000c  f7ffbffe          B.W      GPIO_ResetBits
                  |L9.16|
000010  f7ffbffe          B.W      GPIO_SetBits
;;;282      }
;;;283    #endif /* STM32L1XX_MD */
;;;284    }
;;;285    
                          ENDP

                  |L9.20|
                          DCD      0x48000400

                          AREA ||i.USB_Interrupts_Config||, CODE, READONLY, ALIGN=1

                  USB_Interrupts_Config PROC
;;;205    *******************************************************************************/
;;;206    void USB_Interrupts_Config(void)
000000  b538              PUSH     {r3-r5,lr}
;;;207    {
;;;208    NVIC_InitTypeDef NVIC_InitStructure;
;;;209    
;;;210      /* 2 bit for pre-emption priority, 2 bits for subpriority */
;;;211      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;212     
;;;213    #if defined(STM32L1XX_MD)|| defined(STM32L1XX_HD) || defined(STM32L1XX_MD_PLUS)
;;;214      /* Enable the USB interrupt */
;;;215      NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
;;;216      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
;;;217      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;218      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;219      NVIC_Init(&NVIC_InitStructure);
;;;220    
;;;221      /* Enable the USB Wake-up interrupt */
;;;222      NVIC_InitStructure.NVIC_IRQChannel = USB_FS_WKUP_IRQn;
;;;223      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;224      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;225      NVIC_Init(&NVIC_InitStructure);
;;;226    
;;;227    #elif defined(STM32F37X)
;;;228      /* Enable the USB interrupt */
;;;229      NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
;;;230      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
;;;231      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;232      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;233      NVIC_Init(&NVIC_InitStructure);
;;;234      
;;;235      /* Enable the USB Wake-up interrupt */
;;;236      NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
;;;237      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;238      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;239      NVIC_Init(&NVIC_InitStructure);
;;;240      
;;;241    #else
;;;242      /* Enable the USB interrupt */
;;;243      NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
00000a  2014              MOVS     r0,#0x14
00000c  f88d0000          STRB     r0,[sp,#0]
;;;244      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000010  2002              MOVS     r0,#2
000012  f88d0001          STRB     r0,[sp,#1]
;;;245      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000016  2000              MOVS     r0,#0
000018  f88d0002          STRB     r0,[sp,#2]
;;;246      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001c  2401              MOVS     r4,#1
00001e  f88d4003          STRB     r4,[sp,#3]
;;;247      NVIC_Init(&NVIC_InitStructure);
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;248      
;;;249      /* Enable the USB Wake-up interrupt */
;;;250      NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
000028  202a              MOVS     r0,#0x2a
00002a  f88d0000          STRB     r0,[sp,#0]
;;;251      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
00002e  f88d4001          STRB     r4,[sp,#1]
;;;252      NVIC_Init(&NVIC_InitStructure);   
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       NVIC_Init
;;;253    #endif
;;;254    }
000038  bd38              POP      {r3-r5,pc}
;;;255    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Receive_Buffer
                          %        64

                          AREA ||.data||, DATA, ALIGN=0

                  HSEStartUpStatus
000000  00                DCB      0x00

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  EXTI_InitStructure
                          %        8

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  Send_length
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\hw_config.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_25f922fc____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_hw_config_c_25f922fc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_25f922fc____REVSH|
#line 128
|__asm___11_hw_config_c_25f922fc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
