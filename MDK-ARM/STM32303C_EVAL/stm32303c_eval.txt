; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32303c_eval.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32303c_eval.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval.c]
                          THUMB

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;383      */
;;;384    void SD_LowLevel_DeInit(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;385    {
;;;386      GPIO_InitTypeDef  GPIO_InitStructure;
;;;387      
;;;388      SPI_Cmd(SD_SPI, DISABLE); /* SD_SPI disable */
000002  4c18              LDR      r4,|L1.100|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;389      SPI_I2S_DeInit(SD_SPI);   /* DeInitializes the SD_SPI */
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;390      
;;;391      /* SD_SPI Periph clock disable */
;;;392      RCC_APB1PeriphClockCmd(SD_SPI_CLK, DISABLE); 
000012  1424              ASRS     r4,r4,#16
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;393    
;;;394      /*Configure SD_SPI pins: SCK */
;;;395      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
00001c  1160              ASRS     r0,r4,#5
;;;396      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;397      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000026  f88d0007          STRB     r0,[sp,#7]
;;;398      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  480e              LDR      r0,|L1.104|
00002e  f7fffffe          BL       GPIO_Init
;;;399    
;;;400      /* Configure SD_SPI pins: MISO */
;;;401      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
;;;402      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000032  4d0e              LDR      r5,|L1.108|
000034  4669              MOV      r1,sp
000036  4628              MOV      r0,r5
000038  9400              STR      r4,[sp,#0]
00003a  f7fffffe          BL       GPIO_Init
;;;403    
;;;404      /* Configure SD_SPI pins: MOSI */
;;;405      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
00003e  0064              LSLS     r4,r4,#1
;;;406      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  4628              MOV      r0,r5
000044  9400              STR      r4,[sp,#0]
000046  f7fffffe          BL       GPIO_Init
;;;407    
;;;408      /* Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;409      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
;;;410      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  4808              LDR      r0,|L1.112|
00004e  9400              STR      r4,[sp,#0]
000050  f7fffffe          BL       GPIO_Init
;;;411    
;;;412      /* Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;413      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000054  2040              MOVS     r0,#0x40
;;;414      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000056  9000              STR      r0,[sp,#0]
000058  4669              MOV      r1,sp
00005a  4806              LDR      r0,|L1.116|
00005c  f7fffffe          BL       GPIO_Init
;;;415    }
000060  bd7c              POP      {r2-r6,pc}
;;;416    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      0x40003800
                  |L1.104|
                          DCD      0x48001400
                  |L1.108|
                          DCD      0x48000400
                  |L1.112|
                          DCD      0x48001000
                  |L1.116|
                          DCD      0x48000800

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;422      */
;;;423    void SD_LowLevel_Init(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;424    {
000004  b087              SUB      sp,sp,#0x1c
;;;425      GPIO_InitTypeDef  GPIO_InitStructure;
;;;426      SPI_InitTypeDef   SPI_InitStructure;
;;;427    
;;;428      /* SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
;;;429           and SD_SPI_SCK_GPIO Periph clock enable */
;;;430      RCC_AHBPeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |
000006  2101              MOVS     r1,#1
000008  f44f0098          MOV      r0,#0x4c0000
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;431                            SD_SPI_SCK_GPIO_CLK | SD_DETECT_GPIO_CLK, ENABLE);
;;;432    
;;;433      /* SD_SPI Periph clock enable */
;;;434      RCC_APB1PeriphClockCmd(SD_SPI_CLK, ENABLE); 
000010  f44f4880          MOV      r8,#0x4000
000014  2101              MOVS     r1,#1
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;435    
;;;436      /* Configure SD_SPI pins: SCK */
;;;437      GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
;;;438      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001c  f04f0902          MOV      r9,#2
000020  f88d9004          STRB     r9,[sp,#4]
;;;439      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000024  2703              MOVS     r7,#3
000026  f88d7005          STRB     r7,[sp,#5]
;;;440      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
;;;441      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;442      GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002c  f8dfb0d4          LDR      r11,|L2.260|
000030  f44f7600          MOV      r6,#0x200             ;437
000034  f88d4006          STRB     r4,[sp,#6]            ;440
000038  2501              MOVS     r5,#1                 ;441
00003a  9600              STR      r6,[sp,#0]            ;438
00003c  f88d5007          STRB     r5,[sp,#7]            ;441
000040  4669              MOV      r1,sp
000042  4658              MOV      r0,r11
000044  f7fffffe          BL       GPIO_Init
;;;443    
;;;444      /* Configure SD_SPI pins: MISO */
;;;445      GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
;;;446      GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000048  f8dfa0bc          LDR      r10,|L2.264|
00004c  4669              MOV      r1,sp
00004e  4650              MOV      r0,r10
000050  f8cd8000          STR      r8,[sp,#0]
000054  f7fffffe          BL       GPIO_Init
;;;447    
;;;448      /* Configure SD_SPI pins: MOSI */
;;;449      GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000058  f44f4800          MOV      r8,#0x8000
;;;450      GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
00005c  4669              MOV      r1,sp
00005e  4650              MOV      r0,r10
000060  f8cd8000          STR      r8,[sp,#0]
000064  f7fffffe          BL       GPIO_Init
;;;451    
;;;452      /* Configure SD_SPI_CS_PIN pin: SD Card CS pin */
;;;453      GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
;;;454      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000068  f88d5004          STRB     r5,[sp,#4]
;;;455      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00006c  f88d4006          STRB     r4,[sp,#6]
;;;456      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000070  f88d5007          STRB     r5,[sp,#7]
000074  f8cd8000          STR      r8,[sp,#0]            ;454
;;;457      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000078  f88d7005          STRB     r7,[sp,#5]
;;;458      GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
00007c  4669              MOV      r1,sp
00007e  4823              LDR      r0,|L2.268|
000080  f7fffffe          BL       GPIO_Init
;;;459    
;;;460      /* Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;461      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000084  2040              MOVS     r0,#0x40
;;;462      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000086  9000              STR      r0,[sp,#0]
000088  f88d4004          STRB     r4,[sp,#4]
;;;463      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00008c  f88d5007          STRB     r5,[sp,#7]
;;;464      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000090  4669              MOV      r1,sp
000092  481f              LDR      r0,|L2.272|
000094  f7fffffe          BL       GPIO_Init
;;;465    
;;;466      /* Connect PXx to SD_SPI_SCK */
;;;467      GPIO_PinAFConfig(SD_SPI_SCK_GPIO_PORT, SD_SPI_SCK_SOURCE, SD_SPI_SCK_AF);
000098  2205              MOVS     r2,#5
00009a  2109              MOVS     r1,#9
00009c  4658              MOV      r0,r11
00009e  f7fffffe          BL       GPIO_PinAFConfig
;;;468    
;;;469      /* Connect PXx to SD_SPI_MISO */
;;;470      GPIO_PinAFConfig(SD_SPI_MISO_GPIO_PORT, SD_SPI_MISO_SOURCE, SD_SPI_MISO_AF); 
0000a2  2205              MOVS     r2,#5
0000a4  210e              MOVS     r1,#0xe
0000a6  4650              MOV      r0,r10
0000a8  f7fffffe          BL       GPIO_PinAFConfig
;;;471    
;;;472      /* Connect PXx to SD_SPI_MOSI */
;;;473      GPIO_PinAFConfig(SD_SPI_MOSI_GPIO_PORT, SD_SPI_MOSI_SOURCE, SD_SPI_MOSI_AF);  
0000ac  2205              MOVS     r2,#5
0000ae  210f              MOVS     r1,#0xf
0000b0  4650              MOV      r0,r10
0000b2  f7fffffe          BL       GPIO_PinAFConfig
;;;474      
;;;475      /* SD_SPI Config */
;;;476      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
0000b6  f8ad4008          STRH     r4,[sp,#8]
;;;477      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
0000ba  f44f7082          MOV      r0,#0x104
0000be  f8ad000a          STRH     r0,[sp,#0xa]
;;;478      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
0000c2  f44f60e0          MOV      r0,#0x700
0000c6  f8ad000c          STRH     r0,[sp,#0xc]
;;;479      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
;;;480      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
;;;481      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
;;;482      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
0000ca  f8ad4014          STRH     r4,[sp,#0x14]
;;;483    
;;;484      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000ce  f8ad4016          STRH     r4,[sp,#0x16]
;;;485      SPI_InitStructure.SPI_CRCPolynomial = 7;
0000d2  2007              MOVS     r0,#7
;;;486      SPI_Init(SD_SPI, &SPI_InitStructure);
0000d4  4c0f              LDR      r4,|L2.276|
0000d6  f8ad5010          STRH     r5,[sp,#0x10]         ;480
0000da  f8ad0018          STRH     r0,[sp,#0x18]         ;485
0000de  f8ad900e          STRH     r9,[sp,#0xe]          ;479
0000e2  f8ad6012          STRH     r6,[sp,#0x12]         ;481
0000e6  a902              ADD      r1,sp,#8
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       SPI_Init
;;;487      
;;;488      SPI_RxFIFOThresholdConfig(SD_SPI, SPI_RxFIFOThreshold_QF);
0000ee  14a1              ASRS     r1,r4,#18
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       SPI_RxFIFOThresholdConfig
;;;489      
;;;490      SPI_Cmd(SD_SPI, ENABLE); /* SD_SPI enable */
0000f6  2101              MOVS     r1,#1
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       SPI_Cmd
;;;491    }
0000fe  b007              ADD      sp,sp,#0x1c
000100  e8bd8ff0          POP      {r4-r11,pc}
;;;492    
                          ENDP

                  |L2.260|
                          DCD      0x48001400
                  |L2.264|
                          DCD      0x48000400
                  |L2.268|
                          DCD      0x48001000
                  |L2.272|
                          DCD      0x48000800
                  |L2.276|
                          DCD      0x40003800

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;343      */
;;;344    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;345    {
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;346      GPIO_InitTypeDef GPIO_InitStructure;
;;;347    
;;;348      /* Enable GPIO clock */
;;;349      RCC_AHBPeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
000008  492a              LDR      r1,|L3.180|
00000a  482a              LDR      r0,|L3.180|
00000c  1d09              ADDS     r1,r1,#4
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
000012  f8511024          LDR      r1,[r1,r4,LSL #2]
000016  4308              ORRS     r0,r0,r1
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;350    
;;;351      /* Enable USART clock */
;;;352      RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
00001e  4825              LDR      r0,|L3.180|
000020  2101              MOVS     r1,#1
000022  1f00              SUBS     r0,r0,#4
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;353    
;;;354      /* Connect PXx to USARTx_Tx */
;;;355      GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
00002c  4821              LDR      r0,|L3.180|
00002e  4d22              LDR      r5,|L3.184|
000030  3810              SUBS     r0,r0,#0x10
000032  5d02              LDRB     r2,[r0,r4]
000034  1d80              ADDS     r0,r0,#6
000036  f8301014          LDRH     r1,[r0,r4,LSL #1]
00003a  f8550024          LDR      r0,[r5,r4,LSL #2]
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;356    
;;;357      /* Connect PXx to USARTx_Rx */
;;;358      GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
000042  481c              LDR      r0,|L3.180|
000044  1d2e              ADDS     r6,r5,#4
000046  380f              SUBS     r0,r0,#0xf
000048  5d02              LDRB     r2,[r0,r4]
00004a  1dc0              ADDS     r0,r0,#7
00004c  f8301014          LDRH     r1,[r0,r4,LSL #1]
000050  f8560024          LDR      r0,[r6,r4,LSL #2]
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;359      
;;;360      /* Configure USART Tx as alternate function push-pull */
;;;361      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000058  4816              LDR      r0,|L3.180|
;;;362      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;363      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;364      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;365      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
;;;366      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  380e              SUBS     r0,r0,#0xe            ;361
00005e  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;361
000062  9000              STR      r0,[sp,#0]            ;362
000064  2002              MOVS     r0,#2                 ;362
000066  f88d0004          STRB     r0,[sp,#4]            ;362
00006a  2003              MOVS     r0,#3                 ;363
00006c  f88d0005          STRB     r0,[sp,#5]            ;363
000070  2000              MOVS     r0,#0                 ;364
000072  f88d0006          STRB     r0,[sp,#6]            ;364
000076  2001              MOVS     r0,#1                 ;365
000078  f88d0007          STRB     r0,[sp,#7]            ;365
00007c  f8550024          LDR      r0,[r5,r4,LSL #2]
000080  f7fffffe          BL       GPIO_Init
;;;367        
;;;368      /* Configure USART Rx as alternate function push-pull */
;;;369      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
000084  480b              LDR      r0,|L3.180|
;;;370      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
000086  4669              MOV      r1,sp
000088  380c              SUBS     r0,r0,#0xc            ;369
00008a  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;369
00008e  9000              STR      r0,[sp,#0]
000090  f8560024          LDR      r0,[r6,r4,LSL #2]
000094  f7fffffe          BL       GPIO_Init
;;;371    
;;;372      /* USART configuration */
;;;373      USART_Init(COM_USART[COM], USART_InitStruct);
000098  1f2d              SUBS     r5,r5,#4
00009a  4639              MOV      r1,r7
00009c  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a0  f7fffffe          BL       USART_Init
;;;374        
;;;375      /* Enable USART */
;;;376      USART_Cmd(COM_USART[COM], ENABLE);
0000a4  f8550024          LDR      r0,[r5,r4,LSL #2]
0000a8  2101              MOVS     r1,#1
0000aa  f7fffffe          BL       USART_Cmd
;;;377    }
0000ae  e8bd81fc          POP      {r2-r8,pc}
;;;378    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L3.180|
                          DCD      ||.constdata||+0x10
                  |L3.184|
                          DCD      ||.data||+0x4

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;173      */
;;;174    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b57c              PUSH     {r2-r6,lr}
;;;175    {
000002  4604              MOV      r4,r0
;;;176      GPIO_InitTypeDef  GPIO_InitStructure;
;;;177      
;;;178      /* Enable the GPIO_LED Clock */
;;;179      RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  4810              LDR      r0,|L4.72|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;180    
;;;181      /* Configure the GPIO_LED pin */
;;;182      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4d0d              LDR      r5,|L4.72|
;;;183      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;184      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;185      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;186      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;187      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4e0e              LDR      r6,|L4.76|
000014  3d0a              SUBS     r5,r5,#0xa            ;182
000016  4669              MOV      r1,sp
000018  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;182
00001c  9000              STR      r0,[sp,#0]            ;183
00001e  2001              MOVS     r0,#1                 ;183
000020  f88d0004          STRB     r0,[sp,#4]            ;183
000024  2000              MOVS     r0,#0                 ;184
000026  f88d0006          STRB     r0,[sp,#6]            ;184
00002a  f88d0007          STRB     r0,[sp,#7]            ;185
00002e  2003              MOVS     r0,#3                 ;186
000030  f88d0005          STRB     r0,[sp,#5]            ;186
000034  f8560024          LDR      r0,[r6,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;188      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
00003c  f8561024          LDR      r1,[r6,r4,LSL #2]
000040  f8350014          LDRH     r0,[r5,r4,LSL #1]
000044  6188              STR      r0,[r1,#0x18]
;;;189    }
000046  bd7c              POP      {r2-r6,pc}
;;;190    
                          ENDP

                  |L4.72|
                          DCD      ||.constdata||+0x34
                  |L4.76|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;215      */
;;;216    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L5.16|
;;;217    {
;;;218      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L5.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6181              STR      r1,[r0,#0x18]
;;;219    }
00000e  4770              BX       lr
;;;220    
                          ENDP

                  |L5.16|
                          DCD      ||.constdata||+0x2a
                  |L5.20|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;200      */
;;;201    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L6.16|
;;;202    {
;;;203      GPIO_PORT[Led]->BRR = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L6.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8501              STRH     r1,[r0,#0x28]
;;;204    }
00000e  4770              BX       lr
;;;205    
                          ENDP

                  |L6.16|
                          DCD      ||.constdata||+0x2a
                  |L6.20|
                          DCD      ||.data||+0xc

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;230      */
;;;231    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L7.20|
;;;232    {
;;;233      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  8a8a              LDRH     r2,[r1,#0x14]
000008  4b03              LDR      r3,|L7.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  828a              STRH     r2,[r1,#0x14]
;;;234    }
000012  4770              BX       lr
;;;235    
                          ENDP

                  |L7.20|
                          DCD      ||.data||+0xc
                  |L7.24|
                          DCD      ||.constdata||+0x2a

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;319      */
;;;320    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  b148              CBZ      r0,|L8.22|
;;;321    {
000002  1e40              SUBS     r0,r0,#1
;;;322      /* There is no Wakeup button on STM32303C_EVAL-EVAL, the Button value should
;;;323         be greater than 0. */
;;;324      if(Button > 0)
;;;325      {
;;;326        Button = (Button_TypeDef) (Button - 1);
;;;327        return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000004  4905              LDR      r1,|L8.28|
000006  b2c0              UXTB     r0,r0                 ;326
000008  4a05              LDR      r2,|L8.32|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  f8520020          LDR      r0,[r2,r0,LSL #2]
000012  f7ffbffe          B.W      GPIO_ReadInputDataBit
                  |L8.22|
;;;328      }
;;;329      else
;;;330      {
;;;331        return 0xFF; /* Error Code */
000016  20ff              MOVS     r0,#0xff
;;;332      }
;;;333    }
000018  4770              BX       lr
;;;334    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      ||.constdata||+0x44
                  |L8.32|
                          DCD      ||.data||+0x1c

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;252      */
;;;253    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;254    {
000002  b086              SUB      sp,sp,#0x18
000004  460d              MOV      r5,r1
000006  2800              CMP      r0,#0
000008  d048              BEQ      |L9.156|
00000a  1e40              SUBS     r0,r0,#1
;;;255      GPIO_InitTypeDef GPIO_InitStructure;
;;;256      EXTI_InitTypeDef EXTI_InitStructure;
;;;257      NVIC_InitTypeDef NVIC_InitStructure;
;;;258    
;;;259      /* There is no Wakeup button on STM32303C_EVAL-EVAL, the Button value should
;;;260         be greater than 0. */
;;;261      if(Button > 0)
;;;262      {
;;;263        Button = (Button_TypeDef) (Button - 1);
00000c  b2c4              UXTB     r4,r0
;;;264        
;;;265        /* Enable the BUTTON Clock */
;;;266        RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
00000e  4824              LDR      r0,|L9.160|
000010  2101              MOVS     r1,#1
000012  f8500024          LDR      r0,[r0,r4,LSL #2]
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;267        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;268    
;;;269        /* Configure Button pin as input */
;;;270        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000022  2600              MOVS     r6,#0
000024  f88d6010          STRB     r6,[sp,#0x10]
;;;271        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
000028  2002              MOVS     r0,#2
00002a  f88d0013          STRB     r0,[sp,#0x13]
;;;272        GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00002e  481c              LDR      r0,|L9.160|
;;;273        GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
000030  a903              ADD      r1,sp,#0xc
000032  380c              SUBS     r0,r0,#0xc            ;272
000034  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;272
000038  9003              STR      r0,[sp,#0xc]
00003a  481a              LDR      r0,|L9.164|
00003c  f8500024          LDR      r0,[r0,r4,LSL #2]
000040  f7fffffe          BL       GPIO_Init
;;;274    
;;;275    
;;;276        if (Button_Mode == BUTTON_MODE_EXTI)
000044  2d01              CMP      r5,#1
000046  d129              BNE      |L9.156|
;;;277        {
;;;278          /* Connect Button EXTI Line to Button GPIO Pin */
;;;279          SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000048  4815              LDR      r0,|L9.160|
00004a  3832              SUBS     r0,r0,#0x32
00004c  5d01              LDRB     r1,[r0,r4]
00004e  1f80              SUBS     r0,r0,#6
000050  5d00              LDRB     r0,[r0,r4]
000052  f7fffffe          BL       SYSCFG_EXTILineConfig
;;;280    
;;;281          /* Configure Button EXTI line */
;;;282          EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
000056  4812              LDR      r0,|L9.160|
000058  3018              ADDS     r0,r0,#0x18
;;;283          EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
;;;284        
;;;285          if(Button != BUTTON_KEY) 
00005a  2c01              CMP      r4,#1
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;282
000060  9000              STR      r0,[sp,#0]            ;283
000062  f88d6004          STRB     r6,[sp,#4]            ;283
000066  d001              BEQ      |L9.108|
;;;286          {
;;;287            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000068  2008              MOVS     r0,#8
00006a  e000              B        |L9.110|
                  |L9.108|
;;;288          }
;;;289          else
;;;290          {
;;;291            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00006c  200c              MOVS     r0,#0xc
                  |L9.110|
00006e  f88d0005          STRB     r0,[sp,#5]
;;;292          }
;;;293          EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000072  2501              MOVS     r5,#1
000074  f88d5006          STRB     r5,[sp,#6]
;;;294          EXTI_Init(&EXTI_InitStructure);
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       EXTI_Init
;;;295    
;;;296          /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;297          NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
00007e  4808              LDR      r0,|L9.160|
000080  382c              SUBS     r0,r0,#0x2c
000082  5d00              LDRB     r0,[r0,r4]
000084  f88d0008          STRB     r0,[sp,#8]
;;;298          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
000088  200f              MOVS     r0,#0xf
00008a  f88d0009          STRB     r0,[sp,#9]
;;;299          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
00008e  f88d000a          STRB     r0,[sp,#0xa]
;;;300          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000092  f88d500b          STRB     r5,[sp,#0xb]
;;;301    
;;;302          NVIC_Init(&NVIC_InitStructure); 
000096  a802              ADD      r0,sp,#8
000098  f7fffffe          BL       NVIC_Init
                  |L9.156|
;;;303        }
;;;304      }
;;;305    }
00009c  b006              ADD      sp,sp,#0x18
00009e  bd70              POP      {r4-r6,pc}
;;;306    
                          ENDP

                  |L9.160|
                          DCD      ||.constdata||+0x50
                  |L9.164|
                          DCD      ||.data||+0x1c

                          AREA ||i.TS751_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  TS751_LowLevel_DeInit PROC
;;;497      */
;;;498    void TS751_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;499    {
;;;500      GPIO_InitTypeDef  GPIO_InitStructure;
;;;501    
;;;502      /* Disable TS751_I2C */
;;;503      I2C_Cmd(TS751_I2C, DISABLE);
000002  4c14              LDR      r4,|L10.84|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;504      
;;;505      /* DeInitializes the TS751_I2C */
;;;506      I2C_DeInit(TS751_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;507      
;;;508      /* TS751_I2C Periph clock disable */
;;;509      RCC_APB1PeriphClockCmd(TS751_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f0080          MOV      r0,#0x400000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;510        
;;;511      /* Configure TS751_I2C pins: SCL */
;;;512      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
;;;513      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;514      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000026  f88d0007          STRB     r0,[sp,#7]
;;;515      GPIO_Init(TS751_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  480a              LDR      r0,|L10.88|
00002e  f7fffffe          BL       GPIO_Init
;;;516    
;;;517      /* Configure TS751_I2C pins: SDA */
;;;518      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SDA_PIN;
000032  1520              ASRS     r0,r4,#20
;;;519      GPIO_Init(TS751_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000034  f04f4490          MOV      r4,#0x48000000
000038  9000              STR      r0,[sp,#0]
00003a  4669              MOV      r1,sp
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       GPIO_Init
;;;520    
;;;521      /* Configure TS751_I2C pin: SMBUS ALERT */
;;;522      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SMBUSALERT_PIN;
000042  f44f7080          MOV      r0,#0x100
;;;523      GPIO_Init(TS751_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000046  9000              STR      r0,[sp,#0]
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;524    }
000050  bd1c              POP      {r2-r4,pc}
;;;525    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      0x40005800
                  |L10.88|
                          DCD      0x48001400

                          AREA ||i.TS751_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  TS751_LowLevel_Init PROC
;;;530      */
;;;531    void TS751_LowLevel_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;532    {
;;;533      GPIO_InitTypeDef  GPIO_InitStructure;
;;;534    
;;;535      /* TS751_I2C Periph clock enable */
;;;536      RCC_APB1PeriphClockCmd(TS751_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0588              LSLS     r0,r1,#22
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;537        
;;;538      /* Configure the I2C clock source. The clock is derived from the SYSCLK */
;;;539      RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
00000a  481d              LDR      r0,|L11.128|
00000c  f7fffffe          BL       RCC_I2CCLKConfig
;;;540      
;;;541      /* TS751_I2C_SCL_GPIO_CLK, TS751_I2C_SDA_GPIO_CLK 
;;;542           and TS751_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;543      RCC_AHBPeriphClockCmd(TS751_I2C_SCL_GPIO_CLK | TS751_I2C_SDA_GPIO_CLK |
000010  2101              MOVS     r1,#1
000012  f44f0084          MOV      r0,#0x420000
000016  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;544                            TS751_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;545      
;;;546      /* Connect PXx to I2C_SCL */
;;;547      GPIO_PinAFConfig(TS751_I2C_SCL_GPIO_PORT, TS751_I2C_SCL_SOURCE, TS751_I2C_SCL_AF);
00001a  4c1a              LDR      r4,|L11.132|
00001c  2204              MOVS     r2,#4
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;548    
;;;549      /* Connect PXx to I2C_SDA */
;;;550      GPIO_PinAFConfig(TS751_I2C_SDA_GPIO_PORT, TS751_I2C_SDA_SOURCE, TS751_I2C_SDA_AF); 
000026  f04f4590          MOV      r5,#0x48000000
00002a  2204              MOVS     r2,#4
00002c  210a              MOVS     r1,#0xa
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_PinAFConfig
;;;551    
;;;552      /* Connect PXx to I2C_SMBUSALER */
;;;553      GPIO_PinAFConfig(TS751_I2C_SMBUSALERT_GPIO_PORT, TS751_I2C_SMBUSALERT_SOURCE, TS751_I2C_SMBUSALERT_AF);
000034  2204              MOVS     r2,#4
000036  2108              MOVS     r1,#8
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GPIO_PinAFConfig
;;;554        
;;;555      /* Configure TS751_I2C pins: SCL */
;;;556      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SCL_PIN;
00003e  2040              MOVS     r0,#0x40
;;;557      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000040  9000              STR      r0,[sp,#0]
000042  2002              MOVS     r0,#2
000044  f88d0004          STRB     r0,[sp,#4]
;;;558      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000048  2003              MOVS     r0,#3
00004a  f88d0005          STRB     r0,[sp,#5]
;;;559      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
00004e  2001              MOVS     r0,#1
000050  f88d0006          STRB     r0,[sp,#6]
;;;560      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000054  2000              MOVS     r0,#0
000056  f88d0007          STRB     r0,[sp,#7]
;;;561      GPIO_Init(TS751_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       GPIO_Init
;;;562    
;;;563      /* Configure TS751_I2C pins: SDA */
;;;564      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SDA_PIN;
000062  f44f6080          MOV      r0,#0x400
;;;565      GPIO_Init(TS751_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000066  9000              STR      r0,[sp,#0]
000068  4669              MOV      r1,sp
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       GPIO_Init
;;;566    
;;;567      /* Configure TS751_I2C pin: SMBUS ALERT */
;;;568      GPIO_InitStructure.GPIO_Pin = TS751_I2C_SMBUSALERT_PIN;
000070  f44f7080          MOV      r0,#0x100
;;;569      GPIO_Init(TS751_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000074  9000              STR      r0,[sp,#0]
000076  4669              MOV      r1,sp
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       GPIO_Init
;;;570    }
00007e  bd7c              POP      {r2-r6,pc}
;;;571    
                          ENDP

                  |L11.128|
                          DCD      0x10000020
                  |L11.132|
                          DCD      0x48001400

                          AREA ||i.sEE_I2C_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sEE_I2C_LowLevel_DeInit PROC
;;;576      */
;;;577    void sEE_I2C_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;578    {
;;;579      GPIO_InitTypeDef  GPIO_InitStructure; 
;;;580       
;;;581      /* sEE_I2C Peripheral Disable */
;;;582      I2C_Cmd(sEE_I2C, DISABLE);
000002  4c10              LDR      r4,|L12.68|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;583     
;;;584      /* sEE_I2C DeInit */
;;;585      I2C_DeInit(sEE_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;586    
;;;587      /* sEE_I2C Periph clock disable */
;;;588      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f0080          MOV      r0,#0x400000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;589        
;;;590      /* GPIO configuration */  
;;;591      /* Configure sEE_I2C pins: SCL */
;;;592      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
;;;593      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;594      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000026  f88d0007          STRB     r0,[sp,#7]
;;;595      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4806              LDR      r0,|L12.72|
00002e  f7fffffe          BL       GPIO_Init
;;;596    
;;;597      /* Configure sEE_I2C pins: SDA */
;;;598      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000032  1520              ASRS     r0,r4,#20
;;;599      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000034  9000              STR      r0,[sp,#0]
000036  4669              MOV      r1,sp
000038  f04f4090          MOV      r0,#0x48000000
00003c  f7fffffe          BL       GPIO_Init
;;;600    }
000040  bd1c              POP      {r2-r4,pc}
;;;601    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      0x40005800
                  |L12.72|
                          DCD      0x48001400

                          AREA ||i.sEE_I2C_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sEE_I2C_LowLevel_Init PROC
;;;606      */
;;;607    void sEE_I2C_LowLevel_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;608    {
;;;609      GPIO_InitTypeDef  GPIO_InitStructure;
;;;610      
;;;611      /* Configure the I2C clock source. The clock is derived from the SYSCLK */
;;;612      RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
000002  4818              LDR      r0,|L13.100|
000004  f7fffffe          BL       RCC_I2CCLKConfig
;;;613        
;;;614      /* sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
;;;615      RCC_AHBPeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
000008  2101              MOVS     r1,#1
00000a  f44f0084          MOV      r0,#0x420000
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;616      
;;;617      /* sEE_I2C Periph clock enable */
;;;618      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  0588              LSLS     r0,r1,#22
000016  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;619      
;;;620      /* Connect PXx to I2C_SCL*/
;;;621      GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
00001a  4c13              LDR      r4,|L13.104|
00001c  2204              MOVS     r2,#4
00001e  2106              MOVS     r1,#6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;622      
;;;623      /* Connect PXx to I2C_SDA*/
;;;624      GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);
000026  f04f4590          MOV      r5,#0x48000000
00002a  2204              MOVS     r2,#4
00002c  210a              MOVS     r1,#0xa
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_PinAFConfig
;;;625      
;;;626      /* GPIO configuration */  
;;;627      /* Configure sEE_I2C pins: SCL */
;;;628      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
000034  2040              MOVS     r0,#0x40
;;;629      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000036  9000              STR      r0,[sp,#0]
000038  2002              MOVS     r0,#2
00003a  f88d0004          STRB     r0,[sp,#4]
;;;630      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2003              MOVS     r0,#3
000040  f88d0005          STRB     r0,[sp,#5]
;;;631      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000044  2001              MOVS     r0,#1
000046  f88d0006          STRB     r0,[sp,#6]
;;;632      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GPIO_Init
;;;633      
;;;634      /* Configure sEE_I2C pins: SDA */
;;;635      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000052  f44f6080          MOV      r0,#0x400
;;;636      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);     
000056  9000              STR      r0,[sp,#0]
000058  4669              MOV      r1,sp
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       GPIO_Init
;;;637    }
000060  bd7c              POP      {r2-r6,pc}
;;;638    
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
                          DCD      0x10000020
                  |L13.104|
                          DCD      0x48001400

                          AREA ||i.sEE_SPI_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sEE_SPI_LowLevel_DeInit PROC
;;;643      */
;;;644    void sEE_SPI_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;645    {
;;;646      GPIO_InitTypeDef  GPIO_InitStructure;
;;;647      
;;;648      SPI_Cmd(sEE_SPI, DISABLE); /* sEE_SPI disable */
000002  4c15              LDR      r4,|L14.88|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;649      SPI_I2S_DeInit(sEE_SPI);   /* DeInitializes the sEE_SPI */
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;650      
;;;651      /* sEE_SPI Periph clock disable */
;;;652      RCC_APB1PeriphClockCmd(sEE_SPI_CLK, DISABLE); 
000012  1424              ASRS     r4,r4,#16
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;653    
;;;654      /* Configure sEE_SPI pins: SCK */
;;;655      GPIO_InitStructure.GPIO_Pin = sEE_SPI_SCK_PIN;
00001c  1160              ASRS     r0,r4,#5
;;;656      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  f88d0004          STRB     r0,[sp,#4]
;;;657      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000026  f88d0007          STRB     r0,[sp,#7]
;;;658      GPIO_Init(sEE_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  480b              LDR      r0,|L14.92|
00002e  f7fffffe          BL       GPIO_Init
;;;659    
;;;660      /* Configure sEE pins: MISO */
;;;661      GPIO_InitStructure.GPIO_Pin = sEE_SPI_MISO_PIN;
;;;662      GPIO_Init(sEE_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000032  9400              STR      r4,[sp,#0]
000034  4c0a              LDR      r4,|L14.96|
000036  4669              MOV      r1,sp
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GPIO_Init
;;;663    
;;;664      /* Configure sEE pins: MOSI */
;;;665      GPIO_InitStructure.GPIO_Pin = sEE_SPI_MOSI_PIN;
00003e  0160              LSLS     r0,r4,#5
;;;666      GPIO_Init(sEE_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000040  9000              STR      r0,[sp,#0]
000042  4669              MOV      r1,sp
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       GPIO_Init
;;;667    
;;;668      /* Configure sEE_CS_PIN pin: sEE Card CS pin */
;;;669      GPIO_InitStructure.GPIO_Pin = sEE_SPI_CS_PIN;
00004a  2080              MOVS     r0,#0x80
;;;670      GPIO_Init(sEE_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
00004c  9000              STR      r0,[sp,#0]
00004e  4669              MOV      r1,sp
000050  4804              LDR      r0,|L14.100|
000052  f7fffffe          BL       GPIO_Init
;;;671    }
000056  bd1c              POP      {r2-r4,pc}
;;;672    
                          ENDP

                  |L14.88|
                          DCD      0x40003800
                  |L14.92|
                          DCD      0x48001400
                  |L14.96|
                          DCD      0x48000400
                  |L14.100|
                          DCD      0x48000c00

                          AREA ||i.sEE_SPI_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sEE_SPI_LowLevel_Init PROC
;;;677      */
;;;678    void sEE_SPI_LowLevel_Init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;679    {
000004  b088              SUB      sp,sp,#0x20
;;;680      GPIO_InitTypeDef  GPIO_InitStructure;
;;;681      SPI_InitTypeDef   SPI_InitStructure;
;;;682    
;;;683      /* sEE_CS_GPIO, sEE_MOSI_GPIO, sEE_MISO_GPIO and sEE_SCK_GPIO 
;;;684           Periph clock enable */
;;;685      RCC_AHBPeriphClockCmd(sEE_SPI_CS_GPIO_CLK | sEE_SPI_MOSI_GPIO_CLK | sEE_SPI_MISO_GPIO_CLK |
000006  2101              MOVS     r1,#1
000008  f44f00a8          MOV      r0,#0x540000
00000c  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;686                            sEE_SPI_SCK_GPIO_CLK , ENABLE);
;;;687    
;;;688      /* sEE Periph clock enable */
;;;689      RCC_APB1PeriphClockCmd(sEE_SPI_CLK, ENABLE); 
000010  f44f4980          MOV      r9,#0x4000
000014  2101              MOVS     r1,#1
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;690    
;;;691      /* Configure sEE pins: SCK */
;;;692      GPIO_InitStructure.GPIO_Pin = sEE_SPI_SCK_PIN;
;;;693      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001c  2702              MOVS     r7,#2
00001e  f88d7004          STRB     r7,[sp,#4]
;;;694      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  f04f0803          MOV      r8,#3
000026  f88d8005          STRB     r8,[sp,#5]
;;;695      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2400              MOVS     r4,#0
;;;696      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;697      GPIO_Init(sEE_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002c  f8dfa0c0          LDR      r10,|L15.240|
000030  f44f7600          MOV      r6,#0x200             ;692
000034  f88d4006          STRB     r4,[sp,#6]            ;695
000038  2501              MOVS     r5,#1                 ;696
00003a  9600              STR      r6,[sp,#0]            ;693
00003c  f88d5007          STRB     r5,[sp,#7]            ;696
000040  4669              MOV      r1,sp
000042  4650              MOV      r0,r10
000044  f7fffffe          BL       GPIO_Init
;;;698    
;;;699      /* Configure sEE pins: MISO */
;;;700      GPIO_InitStructure.GPIO_Pin = sEE_SPI_MISO_PIN;
;;;701      GPIO_Init(sEE_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000048  f8cd9000          STR      r9,[sp,#0]
00004c  f8df90a4          LDR      r9,|L15.244|
000050  4669              MOV      r1,sp
000052  4648              MOV      r0,r9
000054  f7fffffe          BL       GPIO_Init
;;;702    
;;;703      /* Configure sEE pins: MOSI */
;;;704      GPIO_InitStructure.GPIO_Pin = sEE_SPI_MOSI_PIN;
000058  03e8              LSLS     r0,r5,#15
;;;705      GPIO_Init(sEE_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
00005a  9000              STR      r0,[sp,#0]
00005c  4669              MOV      r1,sp
00005e  4648              MOV      r0,r9
000060  f7fffffe          BL       GPIO_Init
;;;706    
;;;707      /* Configure sEE_CS_PIN pin: sEE Card CS pin */
;;;708      GPIO_InitStructure.GPIO_Pin = sEE_SPI_CS_PIN;
;;;709      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000064  f88d5004          STRB     r5,[sp,#4]
000068  2080              MOVS     r0,#0x80              ;708
;;;710      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00006a  f88d4006          STRB     r4,[sp,#6]
00006e  9000              STR      r0,[sp,#0]            ;709
;;;711      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000070  f88d5007          STRB     r5,[sp,#7]
;;;712      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000074  f88d8005          STRB     r8,[sp,#5]
;;;713      GPIO_Init(sEE_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
000078  4669              MOV      r1,sp
00007a  481f              LDR      r0,|L15.248|
00007c  f7fffffe          BL       GPIO_Init
;;;714    
;;;715      /* Connect PXx to sEE_SCK */
;;;716      GPIO_PinAFConfig(sEE_SPI_SCK_GPIO_PORT, sEE_SPI_SCK_SOURCE, sEE_SPI_SCK_AF);
000080  2205              MOVS     r2,#5
000082  2109              MOVS     r1,#9
000084  4650              MOV      r0,r10
000086  f7fffffe          BL       GPIO_PinAFConfig
;;;717    
;;;718      /* Connect PXx to sEE_MISO */
;;;719      GPIO_PinAFConfig(sEE_SPI_MISO_GPIO_PORT, sEE_SPI_MISO_SOURCE, sEE_SPI_MISO_AF); 
00008a  2205              MOVS     r2,#5
00008c  210e              MOVS     r1,#0xe
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       GPIO_PinAFConfig
;;;720    
;;;721      /* Connect PXx to sEE_MOSI */
;;;722      GPIO_PinAFConfig(sEE_SPI_MOSI_GPIO_PORT, sEE_SPI_MOSI_SOURCE, sEE_SPI_MOSI_AF);  
000094  2205              MOVS     r2,#5
000096  210f              MOVS     r1,#0xf
000098  4648              MOV      r0,r9
00009a  f7fffffe          BL       GPIO_PinAFConfig
;;;723      
;;;724      /* sEE SPI Config */
;;;725      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00009e  f8ad4008          STRH     r4,[sp,#8]
;;;726      SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
0000a2  f44f7082          MOV      r0,#0x104
0000a6  f8ad000a          STRH     r0,[sp,#0xa]
;;;727      SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
0000aa  f44f60e0          MOV      r0,#0x700
0000ae  f8ad000c          STRH     r0,[sp,#0xc]
;;;728      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
;;;729      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
;;;730      SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
;;;731      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
0000b2  2028              MOVS     r0,#0x28
0000b4  f8ad0014          STRH     r0,[sp,#0x14]
;;;732    
;;;733      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000b8  f8ad4016          STRH     r4,[sp,#0x16]
;;;734      SPI_InitStructure.SPI_CRCPolynomial = 7;
0000bc  2007              MOVS     r0,#7
;;;735      SPI_Init(sEE_SPI, &SPI_InitStructure);
0000be  4c0f              LDR      r4,|L15.252|
0000c0  f8ad5010          STRH     r5,[sp,#0x10]         ;729
0000c4  f8ad0018          STRH     r0,[sp,#0x18]         ;734
0000c8  f8ad700e          STRH     r7,[sp,#0xe]          ;728
0000cc  f8ad6012          STRH     r6,[sp,#0x12]         ;730
0000d0  a902              ADD      r1,sp,#8
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       SPI_Init
;;;736    
;;;737      SPI_RxFIFOThresholdConfig(sEE_SPI, SPI_RxFIFOThreshold_QF);
0000d8  14a1              ASRS     r1,r4,#18
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       SPI_RxFIFOThresholdConfig
;;;738    
;;;739      SPI_Cmd(sEE_SPI, ENABLE); /* sEE_SPI enable */
0000e0  2101              MOVS     r1,#1
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       SPI_Cmd
;;;740    }
0000e8  b008              ADD      sp,sp,#0x20
0000ea  e8bd87f0          POP      {r4-r10,pc}
;;;741    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L15.240|
                          DCD      0x48001400
                  |L15.244|
                          DCD      0x48000400
                  |L15.248|
                          DCD      0x48000c00
                  |L15.252|
                          DCD      0x40003800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_AF
000000  07                DCB      0x07
                  COM_RX_AF
000001  07                DCB      0x07
                  COM_TX_PIN
000002  0010              DCW      0x0010
                  COM_RX_PIN
000004  0002              DCW      0x0002
                  COM_TX_PIN_SOURCE
000006  0004              DCW      0x0004
                  COM_RX_PIN_SOURCE
000008  0001              DCW      0x0001
00000a  0000              DCB      0x00,0x00
                  COM_USART_CLK
                          DCD      0x00004000
                  COM_TX_PORT_CLK
                          DCD      0x00080000
                  COM_RX_PORT_CLK
                          DCD      0x00200000
                  BUTTON_PORT_SOURCE
000018  04030104          DCB      0x04,0x03,0x01,0x04
00001c  0302              DCB      0x03,0x02
                  BUTTON_PIN_SOURCE
00001e  0606              DCB      0x06,0x06
000020  0507050d          DCB      0x05,0x07,0x05,0x0d
                  BUTTON_IRQn
000024  17171717          DCB      0x17,0x17,0x17,0x17
000028  1728              DCB      0x17,0x28
                  GPIO_PIN
00002a  0100              DCW      0x0100
00002c  02000400          DCW      0x0200,0x0400
000030  0800              DCW      0x0800
000032  0000              DCB      0x00,0x00
                  GPIO_CLK
                          DCD      0x00200000
                          DCD      0x00200000
                          DCD      0x00200000
                          DCD      0x00200000
                  BUTTON_PIN
000044  00400040          DCW      0x0040,0x0040
000048  00200080          DCW      0x0020,0x0080
00004c  00202000          DCW      0x0020,0x2000
                  BUTTON_CLK
                          DCD      0x00200000
                          DCD      0x00100000
                          DCD      0x00040000
                          DCD      0x00200000
                          DCD      0x00100000
                          DCD      0x00080000
                  BUTTON_EXTI_LINE
000068  00060006          DCW      0x0006,0x0006
00006c  00050007          DCW      0x0005,0x0007
000070  0005000d          DCW      0x0005,0x000d

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40013800
                  COM_TX_PORT
                          DCD      0x48000800
                  COM_RX_PORT
                          DCD      0x48001000
                  GPIO_PORT
                          DCD      0x48001000
                          DCD      0x48001000
                          DCD      0x48001000
                          DCD      0x48001000
                  BUTTON_PORT
                          DCD      0x48001000
                          DCD      0x48000c00
                          DCD      0x48000400
                          DCD      0x48001000
                          DCD      0x48000c00
                          DCD      0x48000800

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Utilities\\STM32_EVAL\\STM32303C_EVAL\\stm32303c_eval.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32303c_eval_c_c84236cb____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32303c_eval_c_c84236cb____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32303c_eval_c_c84236cb____REVSH|
#line 128
|__asm___16_stm32303c_eval_c_c84236cb____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
