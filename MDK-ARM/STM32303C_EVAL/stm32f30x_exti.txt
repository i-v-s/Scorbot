; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32f30x_exti.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32f30x_exti.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Libraries\STM32F30x_StdPeriph_Driver\src\stm32f30x_exti.c]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;285      */
;;;286    void EXTI_ClearFlag(uint32_t EXTI_Line)
000000  f000021f          AND      r2,r0,#0x1f
;;;287    {
;;;288      /* Check the parameters */
;;;289      assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
;;;290    
;;;291      *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a03              LDR      r2,|L1.24|
00000a  f020001f          BIC      r0,r0,#0x1f
00000e  4410              ADD      r0,r0,r2
000010  f8c01414          STR      r1,[r0,#0x414]
;;;292    }
000014  4770              BX       lr
;;;293    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40010000

                          AREA ||i.EXTI_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  EXTI_ClearITPendingBit PROC
;;;327      */
;;;328    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
000000  f000021f          AND      r2,r0,#0x1f
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
;;;332      
;;;333      *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a03              LDR      r2,|L2.24|
00000a  f020001f          BIC      r0,r0,#0x1f
00000e  4410              ADD      r0,r0,r2
000010  f8c01414          STR      r1,[r0,#0x414]
;;;334    }
000014  4770              BX       lr
;;;335    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40010000

                          AREA ||i.EXTI_DeInit||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;123      */
;;;124    void EXTI_DeInit(void)
000000  4910              LDR      r1,|L3.68|
;;;125    {
;;;126      EXTI->IMR    = 0x1F800000;
000002  f04f50fc          MOV      r0,#0x1f800000
000006  6008              STR      r0,[r1,#0]
;;;127      EXTI->EMR    = 0x00000000;
000008  2000              MOVS     r0,#0
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;128      EXTI->RTSR   = 0x00000000;
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;129      EXTI->FTSR   = 0x00000000;
000012  1d09              ADDS     r1,r1,#4
000014  6008              STR      r0,[r1,#0]
;;;130      EXTI->SWIER  = 0x00000000;
000016  1d09              ADDS     r1,r1,#4
000018  6008              STR      r0,[r1,#0]
;;;131      EXTI->PR     = 0xE07FFFFF;
00001a  4a0a              LDR      r2,|L3.68|
00001c  f06f51fc          MVN      r1,#0x1f800000
000020  3214              ADDS     r2,r2,#0x14
000022  6011              STR      r1,[r2,#0]
;;;132      EXTI->IMR2   = 0x0000000C;
000024  4a07              LDR      r2,|L3.68|
000026  210c              MOVS     r1,#0xc
000028  3220              ADDS     r2,r2,#0x20
00002a  6011              STR      r1,[r2,#0]
;;;133      EXTI->EMR2   = 0x00000000;
00002c  1d11              ADDS     r1,r2,#4
00002e  6008              STR      r0,[r1,#0]
;;;134      EXTI->RTSR2  = 0x00000000;
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;135      EXTI->FTSR2  = 0x00000000;
000034  1d09              ADDS     r1,r1,#4
000036  6008              STR      r0,[r1,#0]
;;;136      EXTI->SWIER2 = 0x00000000;
000038  1d09              ADDS     r1,r1,#4
00003a  6008              STR      r0,[r1,#0]
;;;137      EXTI->PR2    = 0x00000003;
00003c  2003              MOVS     r0,#3
00003e  1d09              ADDS     r1,r1,#4
000040  6008              STR      r0,[r1,#0]
;;;138    }
000042  4770              BX       lr
;;;139    
                          ENDP

                  |L3.68|
                          DCD      0x40010400

                          AREA ||i.EXTI_GenerateSWInterrupt||, CODE, READONLY, ALIGN=2

                  EXTI_GenerateSWInterrupt PROC
;;;227      */
;;;228    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
000000  4906              LDR      r1,|L4.28|
;;;229    {
;;;230      /* Check the parameters */
;;;231      assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
;;;232    
;;;233      *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
000002  f020021f          BIC      r2,r0,#0x1f
000006  4411              ADD      r1,r1,r2
000008  f8d12410          LDR      r2,[r1,#0x410]
00000c  f000031f          AND      r3,r0,#0x1f
000010  2001              MOVS     r0,#1
000012  4098              LSLS     r0,r0,r3
000014  4302              ORRS     r2,r2,r0
000016  f8c12410          STR      r2,[r1,#0x410]
;;;234    
;;;235    }
00001a  4770              BX       lr
;;;236    
                          ENDP

                  |L4.28|
                          DCD      0x40010000

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
000000  4601              MOV      r1,r0
;;;263    {
;;;264      FlagStatus bitstatus = RESET;
;;;265      
;;;266      /* Check the parameters */
;;;267      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;268       
;;;269      if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
000002  4b07              LDR      r3,|L5.32|
000004  f021021f          BIC      r2,r1,#0x1f
000008  441a              ADD      r2,r2,r3
00000a  2000              MOVS     r0,#0                 ;264
00000c  f8d22414          LDR      r2,[r2,#0x414]
000010  f001031f          AND      r3,r1,#0x1f
000014  2101              MOVS     r1,#1
000016  4099              LSLS     r1,r1,r3
000018  420a              TST      r2,r1
00001a  d000              BEQ      |L5.30|
;;;270      {
;;;271        bitstatus = SET;
00001c  2001              MOVS     r0,#1
                  |L5.30|
;;;272      }
;;;273      else
;;;274      {
;;;275        bitstatus = RESET;
;;;276      }
;;;277      return bitstatus;
;;;278    }
00001e  4770              BX       lr
;;;279    
                          ENDP

                  |L5.32|
                          DCD      0x40010000

                          AREA ||i.EXTI_GetITStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetITStatus PROC
;;;299      */
;;;300    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000000  4601              MOV      r1,r0
;;;301    {
;;;302      ITStatus bitstatus = RESET;
;;;303      uint32_t enablestatus = 0;
;;;304      
;;;305      /* Check the parameters */
;;;306      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;307      
;;;308      enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
000002  4a0a              LDR      r2,|L6.44|
000004  f021031f          BIC      r3,r1,#0x1f
000008  b510              PUSH     {r4,lr}               ;301
00000a  441a              ADD      r2,r2,r3
00000c  2000              MOVS     r0,#0                 ;302
00000e  f8d23400          LDR      r3,[r2,#0x400]
000012  f001041f          AND      r4,r1,#0x1f
000016  2101              MOVS     r1,#1
000018  40a1              LSLS     r1,r1,r4
;;;309     
;;;310      if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
00001a  f8d22414          LDR      r2,[r2,#0x414]
00001e  400b              ANDS     r3,r3,r1              ;308
000020  420a              TST      r2,r1
000022  d002              BEQ      |L6.42|
000024  2b00              CMP      r3,#0
000026  d000              BEQ      |L6.42|
;;;311      {
;;;312        bitstatus = SET;
000028  2001              MOVS     r0,#1
                  |L6.42|
;;;313      }
;;;314      else
;;;315      {
;;;316        bitstatus = RESET;
;;;317      }
;;;318      return bitstatus;
;;;319      
;;;320    }
00002a  bd10              POP      {r4,pc}
;;;321    
                          ENDP

                  |L6.44|
                          DCD      0x40010000

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;153    
;;;154    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;155    {
;;;156      uint32_t tmp = 0;
;;;157    
;;;158      /* Check the parameters */
;;;159      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;160      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;161      assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
;;;162      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;163    
;;;164      tmp = (uint32_t)EXTI_BASE;
;;;165          
;;;166      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
;;;167      {
;;;168        /* Clear EXTI line configuration */   
;;;169        *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
000002  6802              LDR      r2,[r0,#0]
000004  7986              LDRB     r6,[r0,#6]            ;166
000006  f002041f          AND      r4,r2,#0x1f
00000a  2101              MOVS     r1,#1
00000c  4b38              LDR      r3,|L7.240|
00000e  fa01f404          LSL      r4,r1,r4
000012  f022051f          BIC      r5,r2,#0x1f
000016  2e00              CMP      r6,#0                 ;166
000018  d063              BEQ      |L7.226|
00001a  4a36              LDR      r2,|L7.244|
00001c  4415              ADD      r5,r5,r2
00001e  f8d56400          LDR      r6,[r5,#0x400]
000022  43a6              BICS     r6,r6,r4
000024  f8c56400          STR      r6,[r5,#0x400]
;;;170        *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
000028  6805              LDR      r5,[r0,#0]
00002a  f025041f          BIC      r4,r5,#0x1f
00002e  4414              ADD      r4,r4,r2
000030  f8d46404          LDR      r6,[r4,#0x404]
000034  f005051f          AND      r5,r5,#0x1f
000038  fa01f505          LSL      r5,r1,r5
00003c  43ae              BICS     r6,r6,r5
00003e  f8c46404          STR      r6,[r4,#0x404]
;;;171         
;;;172        tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
000042  6805              LDR      r5,[r0,#0]
000044  7904              LDRB     r4,[r0,#4]
000046  f025061f          BIC      r6,r5,#0x1f
00004a  441e              ADD      r6,r6,r3
00004c  4434              ADD      r4,r4,r6
;;;173    
;;;174        *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
00004e  6826              LDR      r6,[r4,#0]
000050  f005051f          AND      r5,r5,#0x1f
000054  fa01f505          LSL      r5,r1,r5
000058  432e              ORRS     r6,r6,r5
00005a  6026              STR      r6,[r4,#0]
;;;175        
;;;176        tmp = (uint32_t)EXTI_BASE;
;;;177    
;;;178        /* Clear Rising Falling edge configuration */
;;;179        *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
00005c  6805              LDR      r5,[r0,#0]
00005e  f025041f          BIC      r4,r5,#0x1f
000062  4414              ADD      r4,r4,r2
000064  f8d46408          LDR      r6,[r4,#0x408]
000068  f005051f          AND      r5,r5,#0x1f
00006c  fa01f505          LSL      r5,r1,r5
000070  43ae              BICS     r6,r6,r5
000072  f8c46408          STR      r6,[r4,#0x408]
;;;180        *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
000076  6804              LDR      r4,[r0,#0]
000078  f024051f          BIC      r5,r4,#0x1f
00007c  4415              ADD      r5,r5,r2
00007e  f8d5640c          LDR      r6,[r5,#0x40c]
000082  f004071f          AND      r7,r4,#0x1f
000086  fa01f407          LSL      r4,r1,r7
00008a  43a6              BICS     r6,r6,r4
00008c  f8c5640c          STR      r6,[r5,#0x40c]
;;;181        
;;;182          /* Select the trigger for the selected interrupts */
;;;183        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
000090  7944              LDRB     r4,[r0,#5]
000092  2c10              CMP      r4,#0x10
000094  d00b              BEQ      |L7.174|
;;;184        {
;;;185          /* Rising Falling edge */
;;;186        *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
;;;187        *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
;;;188        }
;;;189        else
;;;190        {
;;;191          tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
000096  6802              LDR      r2,[r0,#0]
000098  f022001f          BIC      r0,r2,#0x1f
00009c  4418              ADD      r0,r0,r3
00009e  4420              ADD      r0,r0,r4
;;;192    
;;;193          *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
0000a0  6803              LDR      r3,[r0,#0]
0000a2  f002021f          AND      r2,r2,#0x1f
0000a6  4091              LSLS     r1,r1,r2
0000a8  430b              ORRS     r3,r3,r1
0000aa  6003              STR      r3,[r0,#0]
;;;194        }
;;;195      }
;;;196          
;;;197      else
;;;198      {
;;;199        tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
;;;200    
;;;201        /* Disable the selected external lines */
;;;202        *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
;;;203      }
;;;204             
;;;205    }
0000ac  bdf0              POP      {r4-r7,pc}
                  |L7.174|
0000ae  6804              LDR      r4,[r0,#0]            ;186
0000b0  f024031f          BIC      r3,r4,#0x1f           ;186
0000b4  4413              ADD      r3,r3,r2              ;186
0000b6  f8d35408          LDR      r5,[r3,#0x408]        ;186
0000ba  f004041f          AND      r4,r4,#0x1f           ;186
0000be  fa01f404          LSL      r4,r1,r4              ;186
0000c2  4325              ORRS     r5,r5,r4              ;186
0000c4  f8c35408          STR      r5,[r3,#0x408]        ;186
0000c8  6803              LDR      r3,[r0,#0]            ;187
0000ca  f023001f          BIC      r0,r3,#0x1f           ;187
0000ce  4410              ADD      r0,r0,r2              ;187
0000d0  f8d0240c          LDR      r2,[r0,#0x40c]        ;187
0000d4  f003031f          AND      r3,r3,#0x1f           ;187
0000d8  4099              LSLS     r1,r1,r3              ;187
0000da  430a              ORRS     r2,r2,r1              ;187
0000dc  f8c0240c          STR      r2,[r0,#0x40c]        ;187
0000e0  bdf0              POP      {r4-r7,pc}
                  |L7.226|
0000e2  7900              LDRB     r0,[r0,#4]            ;199
0000e4  18e9              ADDS     r1,r5,r3              ;199
0000e6  4408              ADD      r0,r0,r1              ;199
0000e8  6801              LDR      r1,[r0,#0]            ;202
0000ea  43a1              BICS     r1,r1,r4              ;202
0000ec  6001              STR      r1,[r0,#0]            ;202
0000ee  bdf0              POP      {r4-r7,pc}
;;;206    
                          ENDP

                  |L7.240|
                          DCD      0x40010400
                  |L7.244|
                          DCD      0x40010000

                          AREA ||i.EXTI_StructInit||, CODE, READONLY, ALIGN=1

                  EXTI_StructInit PROC
;;;212      */
;;;213    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
000000  2100              MOVS     r1,#0
;;;214    {
;;;215      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
;;;216      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;217      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
000006  2210              MOVS     r2,#0x10
000008  7142              STRB     r2,[r0,#5]
;;;218      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
00000a  7181              STRB     r1,[r0,#6]
;;;219    }
00000c  4770              BX       lr
;;;220    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F30x_StdPeriph_Driver\\src\\stm32f30x_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f30x_exti_c_28b3b60e____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f30x_exti_c_28b3b60e____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f30x_exti_c_28b3b60e____REVSH|
#line 128
|__asm___16_stm32f30x_exti_c_28b3b60e____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
