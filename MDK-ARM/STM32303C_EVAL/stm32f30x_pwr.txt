; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32f30x_pwr.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32f30x_pwr.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Libraries\STM32F30x_StdPeriph_Driver\src\stm32f30x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;113      */
;;;114    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;115    {
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;118      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;119    }
000004  4770              BX       lr
;;;120    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;513      */
;;;514    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;515    {
;;;516      /* Check the parameters */
;;;517      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;518             
;;;519      PWR->CR |=  PWR_FLAG << 2;
000002  680a              LDR      r2,[r1,#0]
000004  ea420080          ORR      r0,r2,r0,LSL #2
000008  6008              STR      r0,[r1,#0]
;;;520    }
00000a  4770              BX       lr
;;;521    
                          ENDP

                  |L2.12|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;99       */
;;;100    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;103      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;437      */
;;;438    void PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L4.32|
;;;439    {
;;;440      /* Clear Wakeup flag */
;;;441      PWR->CR |= PWR_CR_CWUF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;442      
;;;443      /* Select STANDBY mode */
;;;444      PWR->CR |= PWR_CR_PDDS;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0410102          ORR      r1,r1,#2
000010  6001              STR      r1,[r0,#0]
;;;445      
;;;446      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;447      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4804              LDR      r0,|L4.36|
000014  6801              LDR      r1,[r0,#0]
000016  f0410104          ORR      r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;448      
;;;449    /* This option is used to ensure that store operations are completed */
;;;450    #if defined ( __CC_ARM   )
;;;451      __force_stores();
;;;452    #endif
;;;453      /* Request Wait For Interrupt */
;;;454      __WFI();
00001c  bf30              WFI      
;;;455    }
00001e  4770              BX       lr
;;;456    
                          ENDP

                  |L4.32|
                          DCD      0x40007000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;390      */
;;;391    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  4b0a              LDR      r3,|L5.44|
;;;392    {
;;;393      uint32_t tmpreg = 0;
;;;394      
;;;395      /* Check the parameters */
;;;396      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;397      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;398      
;;;399      /* Select the regulator state in STOP mode ---------------------------------*/
;;;400      tmpreg = PWR->CR;
000002  681a              LDR      r2,[r3,#0]
;;;401      /* Clear PDDS and LPDSR bits */
;;;402      tmpreg &= CR_DS_MASK;
000004  f0220203          BIC      r2,r2,#3
;;;403      
;;;404      /* Set LPDSR bit according to PWR_Regulator value */
;;;405      tmpreg |= PWR_Regulator;
000008  4302              ORRS     r2,r2,r0
;;;406      
;;;407      /* Store the new value */
;;;408      PWR->CR = tmpreg;
00000a  601a              STR      r2,[r3,#0]
;;;409      
;;;410      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;411      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00000c  4808              LDR      r0,|L5.48|
00000e  6802              LDR      r2,[r0,#0]
000010  f0420204          ORR      r2,r2,#4
000014  6002              STR      r2,[r0,#0]
;;;412      
;;;413      /* Select STOP mode entry --------------------------------------------------*/
;;;414      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000016  2901              CMP      r1,#1
000018  d005              BEQ      |L5.38|
;;;415      {   
;;;416        /* Request Wait For Interrupt */
;;;417        __WFI();
;;;418      }
;;;419      else
;;;420      {
;;;421        /* Request Wait For Event */
;;;422        __WFE();
00001a  bf20              WFE      
                  |L5.28|
;;;423      }
;;;424      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;425      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00001c  6801              LDR      r1,[r0,#0]
00001e  f0210104          BIC      r1,r1,#4
000022  6001              STR      r1,[r0,#0]
;;;426    }
000024  4770              BX       lr
                  |L5.38|
000026  bf30              WFI                            ;417
000028  e7f8              B        |L5.28|
;;;427    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40007000
                  |L5.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSleepMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSleepMode PROC
;;;350      */
;;;351    void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
000000  4905              LDR      r1,|L6.24|
;;;352    {
;;;353      /* Check the parameters */
;;;354      assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
;;;355      
;;;356      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;357      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000002  680a              LDR      r2,[r1,#0]
000004  f0220204          BIC      r2,r2,#4
000008  600a              STR      r2,[r1,#0]
;;;358      
;;;359      /* Select SLEEP mode entry -------------------------------------------------*/
;;;360      if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
00000a  2801              CMP      r0,#1
00000c  d001              BEQ      |L6.18|
;;;361      {   
;;;362        /* Request Wait For Interrupt */
;;;363        __WFI();
;;;364      }
;;;365      else
;;;366      {
;;;367        /* Request Wait For Event */
;;;368        __WFE();
00000e  bf20              WFE      
;;;369      }
;;;370    }
000010  4770              BX       lr
                  |L6.18|
000012  bf30              WFI                            ;363
000014  4770              BX       lr
;;;371    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;487      */
;;;488    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4a03              LDR      r2,|L7.16|
;;;489    {
000002  4601              MOV      r1,r0
;;;490      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;491      /* Check the parameters */
;;;492      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;493      
;;;494      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L7.14|
;;;495      {
;;;496        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;497      }
;;;498      else
;;;499      {
;;;500        bitstatus = RESET;
;;;501      }
;;;502      /* Return the flag status */
;;;503      return bitstatus;
;;;504    }
00000e  4770              BX       lr
;;;505    
                          ENDP

                  |L7.16|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;182      */
;;;183    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;187      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;188    }
000004  4770              BX       lr
;;;189    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;157      */
;;;158    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4a03              LDR      r2,|L9.16|
;;;159    {
;;;160      uint32_t tmpreg = 0;
;;;161      
;;;162      /* Check the parameters */
;;;163      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;164      
;;;165      tmpreg = PWR->CR;
000002  6811              LDR      r1,[r2,#0]
;;;166      
;;;167      /* Clear PLS[7:5] bits */
;;;168      tmpreg &= CR_PLS_MASK;
000004  f02101e0          BIC      r1,r1,#0xe0
;;;169      
;;;170      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;171      tmpreg |= PWR_PVDLevel;
000008  4301              ORRS     r1,r1,r0
;;;172      
;;;173      /* Store the new value */
;;;174      PWR->CR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;175    }
00000c  4770              BX       lr
;;;176    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;218      */
;;;219    void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
000000  4a04              LDR      r2,|L10.20|
;;;220    {  
;;;221      /* Check the parameters */
;;;222      assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));  
;;;223      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;224    
;;;225      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;226      {
;;;227        /* Enable the EWUPx pin */
;;;228        PWR->CSR |= PWR_WakeUpPin;
;;;229      }
;;;230      else
;;;231      {
;;;232        /* Disable the EWUPx pin */
;;;233        PWR->CSR &= ~PWR_WakeUpPin;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L10.12|
000008  4301              ORRS     r1,r1,r0              ;228
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4381              BICS     r1,r1,r0
                  |L10.14|
00000e  6051              STR      r1,[r2,#4]            ;228
;;;234      }
;;;235    }
000010  4770              BX       lr
;;;236    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F30x_StdPeriph_Driver\\src\\stm32f30x_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_pwr_c_0c2a8b75____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f30x_pwr_c_0c2a8b75____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_pwr_c_0c2a8b75____REVSH|
#line 128
|__asm___15_stm32f30x_pwr_c_0c2a8b75____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
