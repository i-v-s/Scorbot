; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\system_stm32f30x.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\system_stm32f30x.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\src\system_stm32f30x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;299      */
;;;300    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;301    {
;;;302      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;303    
;;;304    /******************************************************************************/
;;;305    /*            PLL (clocked by HSE) used as System clock source                */
;;;306    /******************************************************************************/
;;;307    
;;;308      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
;;;309      /* Enable HSE */
;;;310      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4821              LDR      r0,|L1.140|
000006  9101              STR      r1,[sp,#4]            ;302
000008  9100              STR      r1,[sp,#0]
00000a  6802              LDR      r2,[r0,#0]
00000c  f4423280          ORR      r2,r2,#0x10000
000010  6002              STR      r2,[r0,#0]
;;;311     
;;;312      /* Wait till HSE is ready and if Time out is reached exit */
;;;313      do
;;;314      {
;;;315        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;316        StartUpCounter++;
;;;317      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6802              LDR      r2,[r0,#0]            ;315
000018  f4023200          AND      r2,r2,#0x20000        ;315
00001c  9200              STR      r2,[sp,#0]            ;316
00001e  9a01              LDR      r2,[sp,#4]            ;316
000020  1c52              ADDS     r2,r2,#1              ;316
000022  9201              STR      r2,[sp,#4]
000024  9a00              LDR      r2,[sp,#0]
000026  b912              CBNZ     r2,|L1.46|
000028  9a01              LDR      r2,[sp,#4]
00002a  429a              CMP      r2,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;318    
;;;319      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6802              LDR      r2,[r0,#0]
000030  0392              LSLS     r2,r2,#14
000032  d529              BPL      |L1.136|
;;;320      {
;;;321        HSEStatus = (uint32_t)0x01;
000034  2101              MOVS     r1,#1
;;;322      }
;;;323      else
;;;324      {
;;;325        HSEStatus = (uint32_t)0x00;
;;;326      }
;;;327    
;;;328      if (HSEStatus == (uint32_t)0x01)
;;;329      {
;;;330        /* Enable Prefetch Buffer and set Flash Latency */
;;;331        FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
000036  4a16              LDR      r2,|L1.144|
000038  9100              STR      r1,[sp,#0]
00003a  2112              MOVS     r1,#0x12
00003c  6011              STR      r1,[r2,#0]
;;;332     
;;;333         /* HCLK = SYSCLK / 1 */
;;;334         RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00003e  6841              LDR      r1,[r0,#4]
000040  6041              STR      r1,[r0,#4]
;;;335           
;;;336         /* PCLK2 = HCLK / 1 */
;;;337         RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000042  6841              LDR      r1,[r0,#4]
000044  6041              STR      r1,[r0,#4]
;;;338         
;;;339         /* PCLK1 = HCLK / 2 */
;;;340         RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000046  6841              LDR      r1,[r0,#4]
000048  f4416180          ORR      r1,r1,#0x400
00004c  6041              STR      r1,[r0,#4]
;;;341    
;;;342        /* PLL configuration */
;;;343        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
00004e  6841              LDR      r1,[r0,#4]
000050  f421117c          BIC      r1,r1,#0x3f0000
000054  6041              STR      r1,[r0,#4]
;;;344        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
000056  6841              LDR      r1,[r0,#4]
000058  f44111e8          ORR      r1,r1,#0x1d0000
00005c  6041              STR      r1,[r0,#4]
;;;345    
;;;346        /* Enable PLL */
;;;347        RCC->CR |= RCC_CR_PLLON;
00005e  6801              LDR      r1,[r0,#0]
000060  f0417180          ORR      r1,r1,#0x1000000
000064  6001              STR      r1,[r0,#0]
                  |L1.102|
;;;348    
;;;349        /* Wait till PLL is ready */
;;;350        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000066  6801              LDR      r1,[r0,#0]
000068  0189              LSLS     r1,r1,#6
00006a  d5fc              BPL      |L1.102|
;;;351        {
;;;352        }
;;;353        
;;;354        /* Select PLL as system clock source */
;;;355        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00006c  6841              LDR      r1,[r0,#4]
00006e  f0210103          BIC      r1,r1,#3
000072  6041              STR      r1,[r0,#4]
;;;356        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
000074  6841              LDR      r1,[r0,#4]
000076  f0410102          ORR      r1,r1,#2
00007a  6041              STR      r1,[r0,#4]
                  |L1.124|
;;;357    
;;;358        /* Wait till PLL is used as system clock source */
;;;359        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
00007c  6841              LDR      r1,[r0,#4]
00007e  f3c10181          UBFX     r1,r1,#2,#2
000082  2902              CMP      r1,#2
000084  d1fa              BNE      |L1.124|
;;;360        {
;;;361        }
;;;362      }
;;;363      else
;;;364      { /* If HSE fails to start-up, the application will have wrong clock
;;;365             configuration. User can add here some code to deal with this error */
;;;366      }
;;;367    }
000086  bd0c              POP      {r2,r3,pc}
                  |L1.136|
000088  9100              STR      r1,[sp,#0]            ;325
00008a  bd0c              POP      {r2,r3,pc}
;;;368    
                          ENDP

                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;247      */
;;;248    void SystemCoreClockUpdate (void)
000000  b530              PUSH     {r4,r5,lr}
;;;249    {
;;;250      uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
;;;251    
;;;252      /* Get SYSCLK source -------------------------------------------------------*/
;;;253      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4916              LDR      r1,|L2.92|
000004  6848              LDR      r0,[r1,#4]
;;;254      
;;;255      switch (tmp)
;;;256      {
;;;257        case 0x00:  /* HSI used as system clock */
;;;258          SystemCoreClock = HSI_VALUE;
000006  4a16              LDR      r2,|L2.96|
000008  f010030c          ANDS     r3,r0,#0xc            ;253
00000c  4815              LDR      r0,|L2.100|
00000e  d003              BEQ      |L2.24|
000010  2b04              CMP      r3,#4                 ;255
000012  d001              BEQ      |L2.24|
000014  2b08              CMP      r3,#8                 ;255
000016  d001              BEQ      |L2.28|
                  |L2.24|
;;;259          break;
000018  6002              STR      r2,[r0,#0]  ; SystemCoreClock
00001a  e015              B        |L2.72|
                  |L2.28|
;;;260        case 0x04:  /* HSE used as system clock */
;;;261          SystemCoreClock = HSE_VALUE;
;;;262          break;
;;;263        case 0x08:  /* PLL used as system clock */
;;;264          /* Get PLL clock source and multiplication factor ----------------------*/
;;;265          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
00001c  684b              LDR      r3,[r1,#4]
;;;266          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
00001e  684c              LDR      r4,[r1,#4]
000020  f4031370          AND      r3,r3,#0x3c0000       ;265
;;;267          pllmull = ( pllmull >> 18) + 2;
000024  f04f0502          MOV      r5,#2
000028  f4143f80          TST      r4,#0x10000           ;266
00002c  eb054393          ADD      r3,r5,r3,LSR #18
;;;268          
;;;269          if (pllsource == 0x00)
000030  d007              BEQ      |L2.66|
;;;270          {
;;;271            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;272            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;273          }
;;;274          else
;;;275          {
;;;276            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
000032  6acc              LDR      r4,[r1,#0x2c]
000034  f004040f          AND      r4,r4,#0xf
000038  1c64              ADDS     r4,r4,#1
;;;277            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;278            SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
00003a  fbb2f2f4          UDIV     r2,r2,r4
00003e  435a              MULS     r2,r3,r2
000040  e7ea              B        |L2.24|
                  |L2.66|
000042  4a09              LDR      r2,|L2.104|
000044  4353              MULS     r3,r2,r3              ;272
000046  6003              STR      r3,[r0,#0]            ;272  ; SystemCoreClock
                  |L2.72|
;;;279          }      
;;;280          break;
;;;281        default: /* HSI used as system clock */
;;;282          SystemCoreClock = HSI_VALUE;
;;;283          break;
;;;284      }
;;;285      /* Compute HCLK clock frequency ----------------*/
;;;286      /* Get HCLK prescaler */
;;;287      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000048  6849              LDR      r1,[r1,#4]
00004a  4a06              LDR      r2,|L2.100|
00004c  f3c11103          UBFX     r1,r1,#4,#4
000050  1d12              ADDS     r2,r2,#4
000052  5c51              LDRB     r1,[r2,r1]
;;;288      /* HCLK clock frequency */
;;;289      SystemCoreClock >>= tmp;  
000054  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000056  40ca              LSRS     r2,r2,r1
000058  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;290    }
00005a  bd30              POP      {r4,r5,pc}
;;;291    
                          ENDP

                  |L2.92|
                          DCD      0x40021000
                  |L2.96|
                          DCD      0x007a1200
                  |L2.100|
                          DCD      ||.data||
                  |L2.104|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;168      */
;;;169    void SystemInit(void)
000000  4816              LDR      r0,|L3.92|
;;;170    {
000002  b510              PUSH     {r4,lr}
;;;171      /* FPU settings ------------------------------------------------------------*/
;;;172      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;173        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;174      #endif
;;;175    
;;;176      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;177      /* Set HSION bit */
;;;178      RCC->CR |= (uint32_t)0x00000001;
00000c  4814              LDR      r0,|L3.96|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;179    
;;;180      /* Reset CFGR register */
;;;181      RCC->CFGR &= 0xF87FC00C;
000016  6841              LDR      r1,[r0,#4]
000018  4a12              LDR      r2,|L3.100|
00001a  4011              ANDS     r1,r1,r2
00001c  6041              STR      r1,[r0,#4]
;;;182    
;;;183      /* Reset HSEON, CSSON and PLLON bits */
;;;184      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6801              LDR      r1,[r0,#0]
000020  4a11              LDR      r2,|L3.104|
000022  4011              ANDS     r1,r1,r2
000024  6001              STR      r1,[r0,#0]
;;;185    
;;;186      /* Reset HSEBYP bit */
;;;187      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  6801              LDR      r1,[r0,#0]
000028  f4212180          BIC      r1,r1,#0x40000
00002c  6001              STR      r1,[r0,#0]
;;;188    
;;;189      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
;;;190      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  6841              LDR      r1,[r0,#4]
000030  f42101fe          BIC      r1,r1,#0x7f0000
000034  6041              STR      r1,[r0,#4]
;;;191    
;;;192      /* Reset PREDIV1[3:0] bits */
;;;193      RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
000036  6ac1              LDR      r1,[r0,#0x2c]
000038  f021010f          BIC      r1,r1,#0xf
00003c  62c1              STR      r1,[r0,#0x2c]
;;;194    
;;;195      /* Reset USARTSW[1:0], I2CSW and TIMs bits */
;;;196      RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
00003e  6b01              LDR      r1,[r0,#0x30]
000040  4a0a              LDR      r2,|L3.108|
000042  4011              ANDS     r1,r1,r2
000044  6301              STR      r1,[r0,#0x30]
;;;197      
;;;198      /* Disable all interrupts */
;;;199      RCC->CIR = 0x00000000;
000046  2100              MOVS     r1,#0
000048  6081              STR      r1,[r0,#8]
;;;200    
;;;201      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;202         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;203      SetSysClock();
00004a  f7fffffe          BL       SetSysClock
;;;204      
;;;205    #ifdef VECT_TAB_SRAM
;;;206      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;207    #else
;;;208      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00004e  4903              LDR      r1,|L3.92|
000050  f04f6000          MOV      r0,#0x8000000
000054  3980              SUBS     r1,r1,#0x80
000056  6008              STR      r0,[r1,#0]
;;;209    #endif  
;;;210    }
000058  bd10              POP      {r4,pc}
;;;211    
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      0xe000ed88
                  |L3.96|
                          DCD      0x40021000
                  |L3.100|
                          DCD      0xf87fc00c
                  |L3.104|
                          DCD      0xfef6ffff
                  |L3.108|
                          DCD      0xff00fccc

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f30x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f30x_c_5d646a67____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f30x_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f30x_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f30x_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
