; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32f30x_dma.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32f30x_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F30X -DUSE_STM32303C_EVAL ..\..\..\Libraries\STM32F30x_StdPeriph_Driver\src\stm32f30x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;656      */
;;;657    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  00c1              LSLS     r1,r0,#3
;;;658    {
000002  d502              BPL      |L1.10|
;;;659      /* Check the parameters */
;;;660      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;661    
;;;662    /* Calculate the used DMAy */
;;;663      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;664      {
;;;665        /* Clear the selected DMAy flags */
;;;666        DMA2->IFCR = DMAy_FLAG;
000004  4902              LDR      r1,|L1.16|
000006  6008              STR      r0,[r1,#0]
;;;667      }
;;;668      else
;;;669      {
;;;670        /* Clear the selected DMAy flags */
;;;671        DMA1->IFCR = DMAy_FLAG;
;;;672      }
;;;673    }
000008  4770              BX       lr
                  |L1.10|
00000a  4902              LDR      r1,|L1.20|
00000c  6048              STR      r0,[r1,#4]            ;671
00000e  4770              BX       lr
;;;674    
                          ENDP

                  |L1.16|
                          DCD      0x40020404
                  |L1.20|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;831      */
;;;832    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  00c1              LSLS     r1,r0,#3
;;;833    {
000002  d502              BPL      |L2.10|
;;;834      /* Check the parameters */
;;;835      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;836      
;;;837      /* Calculate the used DMAy */
;;;838      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;839      {
;;;840        /* Clear the selected DMAy interrupt pending bits */
;;;841        DMA2->IFCR = DMAy_IT;
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;842      }
;;;843      else
;;;844      {
;;;845        /* Clear the selected DMAy interrupt pending bits */
;;;846        DMA1->IFCR = DMAy_IT;
;;;847      }
;;;848    }
000008  4770              BX       lr
                  |L2.10|
00000a  4902              LDR      r1,|L2.20|
00000c  6048              STR      r0,[r1,#4]            ;846
00000e  4770              BX       lr
;;;849    
                          ENDP

                  |L2.16|
                          DCD      0x40020404
                  |L2.20|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;327      */
;;;328    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;332      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;333    
;;;334      if (NewState != DISABLE)
;;;335      {
;;;336        /* Enable the selected DMAy Channelx */
;;;337        DMAy_Channelx->CCR |= DMA_CCR_EN;
;;;338      }
;;;339      else
;;;340      {
;;;341        /* Disable the selected DMAy Channelx */
;;;342        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;337
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  f64f72fe          MOV      r2,#0xfffe
000010  4011              ANDS     r1,r1,r2
                  |L3.18|
000012  6001              STR      r1,[r0,#0]            ;337
;;;343      }
;;;344    }
000014  4770              BX       lr
;;;345    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;140      */
;;;141    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;142    {
;;;143      /* Check the parameters */
;;;144      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;145    
;;;146      /* Disable the selected DMAy Channelx */
;;;147      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;148    
;;;149      /* Reset DMAy Channelx control register */
;;;150      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;151    
;;;152      /* Reset DMAy Channelx remaining bytes register */
;;;153      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;154    
;;;155      /* Reset DMAy Channelx peripheral address register */
;;;156      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;157    
;;;158      /* Reset DMAy Channelx memory address register */
;;;159      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;160    
;;;161      if (DMAy_Channelx == DMA1_Channel1)
;;;162      {
;;;163        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;164        DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
000014  4931              LDR      r1,|L4.220|
000016  4a31              LDR      r2,|L4.220|
000018  3908              SUBS     r1,r1,#8
00001a  4290              CMP      r0,r2                 ;161
00001c  d103              BNE      |L4.38|
00001e  6848              LDR      r0,[r1,#4]
000020  f040000f          ORR      r0,r0,#0xf
000024  e006              B        |L4.52|
                  |L4.38|
;;;165      }
;;;166      else if (DMAy_Channelx == DMA1_Channel2)
000026  4a2d              LDR      r2,|L4.220|
000028  3214              ADDS     r2,r2,#0x14
00002a  4290              CMP      r0,r2
00002c  d104              BNE      |L4.56|
;;;167      {
;;;168        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;169        DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
00002e  6848              LDR      r0,[r1,#4]
000030  f04000f0          ORR      r0,r0,#0xf0
                  |L4.52|
000034  6048              STR      r0,[r1,#4]            ;164
;;;170      }
;;;171      else if (DMAy_Channelx == DMA1_Channel3)
;;;172      {
;;;173        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;174        DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
;;;175      }
;;;176      else if (DMAy_Channelx == DMA1_Channel4)
;;;177      {
;;;178        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;179        DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
;;;180      }
;;;181      else if (DMAy_Channelx == DMA1_Channel5)
;;;182      {
;;;183        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;184        DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
;;;185      }
;;;186      else if (DMAy_Channelx == DMA1_Channel6)
;;;187      {
;;;188        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;189        DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
;;;190      }
;;;191      else if (DMAy_Channelx == DMA1_Channel7)
;;;192      {
;;;193        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;194        DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
;;;195      }
;;;196      else if (DMAy_Channelx == DMA2_Channel1)
;;;197      {
;;;198        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;199        DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
;;;200      }
;;;201      else if (DMAy_Channelx == DMA2_Channel2)
;;;202      {
;;;203        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;204        DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
;;;205      }
;;;206      else if (DMAy_Channelx == DMA2_Channel3)
;;;207      {
;;;208        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;209        DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
;;;210      }
;;;211      else if (DMAy_Channelx == DMA2_Channel4)
;;;212      {
;;;213        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;214        DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
;;;215      }
;;;216      else
;;;217      { 
;;;218        if (DMAy_Channelx == DMA2_Channel5)
;;;219        {
;;;220          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;221          DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
;;;222        }
;;;223      }
;;;224    }
000036  4770              BX       lr
                  |L4.56|
000038  4a28              LDR      r2,|L4.220|
00003a  3228              ADDS     r2,r2,#0x28           ;171
00003c  4290              CMP      r0,r2                 ;171
00003e  d103              BNE      |L4.72|
000040  6848              LDR      r0,[r1,#4]            ;174
000042  f4406070          ORR      r0,r0,#0xf00          ;174
000046  e7f5              B        |L4.52|
                  |L4.72|
000048  4a24              LDR      r2,|L4.220|
00004a  323c              ADDS     r2,r2,#0x3c           ;176
00004c  4290              CMP      r0,r2                 ;176
00004e  d103              BNE      |L4.88|
000050  6848              LDR      r0,[r1,#4]            ;179
000052  f4404070          ORR      r0,r0,#0xf000         ;179
000056  e7ed              B        |L4.52|
                  |L4.88|
000058  4a20              LDR      r2,|L4.220|
00005a  3250              ADDS     r2,r2,#0x50           ;181
00005c  4290              CMP      r0,r2                 ;181
00005e  d103              BNE      |L4.104|
000060  6848              LDR      r0,[r1,#4]            ;184
000062  f4402070          ORR      r0,r0,#0xf0000        ;184
000066  e7e5              B        |L4.52|
                  |L4.104|
000068  4a1c              LDR      r2,|L4.220|
00006a  3264              ADDS     r2,r2,#0x64           ;186
00006c  4290              CMP      r0,r2                 ;186
00006e  d103              BNE      |L4.120|
000070  6848              LDR      r0,[r1,#4]            ;189
000072  f4400070          ORR      r0,r0,#0xf00000       ;189
000076  e7dd              B        |L4.52|
                  |L4.120|
000078  4a18              LDR      r2,|L4.220|
00007a  3278              ADDS     r2,r2,#0x78           ;191
00007c  4290              CMP      r0,r2                 ;191
00007e  d103              BNE      |L4.136|
000080  6848              LDR      r0,[r1,#4]            ;194
000082  f0406070          ORR      r0,r0,#0xf000000      ;194
000086  e7d5              B        |L4.52|
                  |L4.136|
000088  4a15              LDR      r2,|L4.224|
00008a  1f11              SUBS     r1,r2,#4              ;199
00008c  4290              CMP      r0,r2                 ;196
00008e  d103              BNE      |L4.152|
000090  6808              LDR      r0,[r1,#0]            ;199
000092  f040000f          ORR      r0,r0,#0xf            ;199
000096  e006              B        |L4.166|
                  |L4.152|
000098  4a11              LDR      r2,|L4.224|
00009a  3214              ADDS     r2,r2,#0x14           ;201
00009c  4290              CMP      r0,r2                 ;201
00009e  d104              BNE      |L4.170|
0000a0  6808              LDR      r0,[r1,#0]            ;204
0000a2  f04000f0          ORR      r0,r0,#0xf0           ;204
                  |L4.166|
0000a6  6008              STR      r0,[r1,#0]            ;199
                  |L4.168|
0000a8  4770              BX       lr
                  |L4.170|
0000aa  4a0d              LDR      r2,|L4.224|
0000ac  3228              ADDS     r2,r2,#0x28           ;206
0000ae  4290              CMP      r0,r2                 ;206
0000b0  d103              BNE      |L4.186|
0000b2  6808              LDR      r0,[r1,#0]            ;209
0000b4  f4406070          ORR      r0,r0,#0xf00          ;209
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  4a09              LDR      r2,|L4.224|
0000bc  323c              ADDS     r2,r2,#0x3c           ;211
0000be  4290              CMP      r0,r2                 ;211
0000c0  d103              BNE      |L4.202|
0000c2  6808              LDR      r0,[r1,#0]            ;214
0000c4  f4404070          ORR      r0,r0,#0xf000         ;214
0000c8  e7ed              B        |L4.166|
                  |L4.202|
0000ca  4a05              LDR      r2,|L4.224|
0000cc  3250              ADDS     r2,r2,#0x50           ;218
0000ce  4290              CMP      r0,r2                 ;218
0000d0  d1ea              BNE      |L4.168|
0000d2  6808              LDR      r0,[r1,#0]            ;221
0000d4  f4402070          ORR      r0,r0,#0xf0000        ;221
0000d8  e7e5              B        |L4.166|
;;;225    
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x40020008
                  |L4.224|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;404      */
;;;405    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;409      /* Return the number of remaining data units for DMAy Channelx */
;;;410      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;411    }
000004  4770              BX       lr
;;;412    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;560      */
;;;561    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  4601              MOV      r1,r0
;;;562    {
;;;563      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L6.12|
;;;564      uint32_t tmpreg = 0;
;;;565      
;;;566      /* Check the parameters */
;;;567      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;568    
;;;569      /* Calculate the used DMAy */
;;;570      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;571      {
;;;572        /* Get DMA2 ISR register value */
;;;573        tmpreg = DMA2->ISR ;
000008  4a03              LDR      r2,|L6.24|
00000a  e000              B        |L6.14|
                  |L6.12|
;;;574      }
;;;575      else
;;;576      {
;;;577        /* Get DMA1 ISR register value */
;;;578        tmpreg = DMA1->ISR ;
00000c  4a03              LDR      r2,|L6.28|
                  |L6.14|
00000e  6812              LDR      r2,[r2,#0]
;;;579      }
;;;580    
;;;581      /* Check the status of the specified DMAy flag */
;;;582      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L6.22|
;;;583      {
;;;584        /* DMAy_FLAG is set */
;;;585        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;586      }
;;;587      else
;;;588      {
;;;589        /* DMAy_FLAG is reset */
;;;590        bitstatus = RESET;
;;;591      }
;;;592      
;;;593      /* Return the DMAy_FLAG status */
;;;594      return  bitstatus;
;;;595    }
000016  4770              BX       lr
;;;596    
                          ENDP

                  |L6.24|
                          DCD      0x40020400
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;735      */
;;;736    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  4601              MOV      r1,r0
;;;737    {
;;;738      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
000004  00ca              LSLS     r2,r1,#3
000006  d501              BPL      |L7.12|
;;;739      uint32_t tmpreg = 0;
;;;740    
;;;741      /* Check the parameters */
;;;742      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;743    
;;;744      /* Calculate the used DMA */
;;;745      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
;;;746      {
;;;747        /* Get DMA2 ISR register value */
;;;748        tmpreg = DMA2->ISR;
000008  4a03              LDR      r2,|L7.24|
00000a  e000              B        |L7.14|
                  |L7.12|
;;;749      }
;;;750      else
;;;751      {
;;;752        /* Get DMA1 ISR register value */
;;;753        tmpreg = DMA1->ISR;
00000c  4a03              LDR      r2,|L7.28|
                  |L7.14|
00000e  6812              LDR      r2,[r2,#0]
;;;754      }
;;;755    
;;;756      /* Check the status of the specified DMAy interrupt */
;;;757      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000010  420a              TST      r2,r1
000012  d000              BEQ      |L7.22|
;;;758      {
;;;759        /* DMAy_IT is set */
;;;760        bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L7.22|
;;;761      }
;;;762      else
;;;763      {
;;;764        /* DMAy_IT is reset */
;;;765        bitstatus = RESET;
;;;766      }
;;;767      /* Return the DMAy_IT status */
;;;768      return  bitstatus;
;;;769    }
000016  4770              BX       lr
;;;770    
                          ENDP

                  |L7.24|
                          DCD      0x40020400
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;480      */
;;;481    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;485      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      if (NewState != DISABLE)
;;;489      {
;;;490        /* Enable the selected DMA interrupts */
;;;491        DMAy_Channelx->CCR |= DMA_IT;
;;;492      }
;;;493      else
;;;494      {
;;;495        /* Disable the selected DMA interrupts */
;;;496        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;491
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;491
;;;497      }
;;;498    }
00000e  4770              BX       lr
;;;499    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;234      */
;;;235    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;236    {
;;;237      uint32_t tmpreg = 0;
;;;238    
;;;239      /* Check the parameters */
;;;240      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;241      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;242      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;243      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;244      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;245      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;246      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;247      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;248      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;249    
;;;250    /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
;;;251      /* Get the DMAy_Channelx CCR value */
;;;252      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;253    
;;;254      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;255      tmpreg &= CCR_CLEAR_MASK;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;256    
;;;257      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;258      /* Set DIR bit according to DMA_DIR value */
;;;259      /* Set CIRC bit according to DMA_Mode value */
;;;260      /* Set PINC bit according to DMA_PeripheralInc value */
;;;261      /* Set MINC bit according to DMA_MemoryInc value */
;;;262      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;263      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;264      /* Set PL bits according to DMA_Priority value */
;;;265      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;266      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  6a0c              LDR      r4,[r1,#0x20]
00000c  688a              LDR      r2,[r1,#8]
00000e  4322              ORRS     r2,r2,r4
000010  e9d14504          LDRD     r4,r5,[r1,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  4322              ORRS     r2,r2,r4
000018  698c              LDR      r4,[r1,#0x18]
00001a  4322              ORRS     r2,r2,r4
00001c  69cc              LDR      r4,[r1,#0x1c]
00001e  4322              ORRS     r2,r2,r4
000020  6a4c              LDR      r4,[r1,#0x24]
000022  4322              ORRS     r2,r2,r4
000024  6a8c              LDR      r4,[r1,#0x28]
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;267                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;268                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;269                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;270    
;;;271      /* Write to DMAy Channelx CCR */
;;;272      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;273    
;;;274    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;275      /* Write to DMAy Channelx CNDTR */
;;;276      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  898a              LDRH     r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;277    
;;;278    /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
;;;279      /* Write to DMAy Channelx CPAR */
;;;280      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;281    
;;;282    /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
;;;283      /* Write to DMAy Channelx CMAR */
;;;284      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;285    }
000038  bd30              POP      {r4,r5,pc}
;;;286    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;386      */
;;;387    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;388    {
;;;389      /* Check the parameters */
;;;390      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;391    
;;;392    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;393      /* Write to DMAy Channelx CNDTR */
;;;394      DMAy_Channelx->CNDTR = DataNumber;
;;;395    }
000002  4770              BX       lr
;;;396    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;292      */
;;;293    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;294    {
;;;295    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;296      /* Initialize the DMA_PeripheralBaseAddr member */
;;;297      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;298      /* Initialize the DMA_MemoryBaseAddr member */
;;;299      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;300      /* Initialize the DMA_DIR member */
;;;301      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;302      /* Initialize the DMA_BufferSize member */
;;;303      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
000008  8181              STRH     r1,[r0,#0xc]
;;;304      /* Initialize the DMA_PeripheralInc member */
;;;305      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;306      /* Initialize the DMA_MemoryInc member */
;;;307      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;308      /* Initialize the DMA_PeripheralDataSize member */
;;;309      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;310      /* Initialize the DMA_MemoryDataSize member */
;;;311      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;312      /* Initialize the DMA_Mode member */
;;;313      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;314      /* Initialize the DMA_Priority member */
;;;315      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;316      /* Initialize the DMA_M2M member */
;;;317      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;318    }
000018  4770              BX       lr
;;;319    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F30x_StdPeriph_Driver\\src\\stm32f30x_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_dma_c_e9b554c0____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f30x_dma_c_e9b554c0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f30x_dma_c_e9b554c0____REVSH|
#line 128
|__asm___15_stm32f30x_dma_c_e9b554c0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
